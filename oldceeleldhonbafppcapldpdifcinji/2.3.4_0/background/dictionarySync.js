class DictionarySync{static init(){this._isInitialized||(this._isInitialized=!0,this._storageController.onReady(()=>{const{isDictionarySynced:t}=this._storageController.getSettings();t?this.downloadAll():this.checkForInitialSync()}),setInterval(()=>this.downloadAll(),72e5))}static _isSyncCapable(){if(!this._storageController.isReady())return!1;const{havePremiumAccount:t,username:e,password:n,token:o}=this._storageController.getSettings();return t&&e&&(n||o)}static disableSync(){return this._storageController.updateSettings({isDictionarySynced:!1})}static checkForInitialSync(){const{isDictionarySynced:t,dictionary:e}=this._storageController.getSettings();if(t)return;if(!this._isSyncCapable())return;Tracker.trackEvent("Action","dict_sync:started");const n=e.length;this.addBatch(e).then(()=>this.downloadList()).then(t=>{const e=t.length/n;e<.9?Tracker.trackEvent("Action","dict_sync:failed_comparison",String(e)):this._storageController.updateSettings({isDictionarySynced:!0,dictionary:t}).then(()=>{Tracker.trackEvent("Action","dict_sync:succeeded")}).catch(()=>{Tracker.trackEvent("Action","dict_sync:failed_storage")})}).catch(()=>{Tracker.trackEvent("Action","dict_sync:failed_sync")})}static addBatch(t){if(this._syncing)return Promise.reject();if(!this._isSyncCapable())return Promise.reject();if(t.length>this.MAX_WORDS)return Tracker.trackEvent("Action","too_many_words_for_dictionary_batch_add",String(t.length)),Promise.reject();this._syncing=!0;const e=t.slice(0);let n=0;return new Promise((t,o)=>{const r=()=>{const i=e.shift();if(void 0===i&&!e.length)return this._syncing=!1,void t();this._isValidWord(i)?this.addWord(i).then(()=>wait(1500)).then(r).catch(t=>++n>4?(this._syncing=!1,void o(t)):r()):r()};r()})}static _isValidWord(t){return Boolean(t&&t.trim()&&!t.trim().match(/\s/)&&!t.match(this.EMOJI_REGEXP))}static removeBatch(t){return this._deleting?Promise.reject():this._isSyncCapable()?(Tracker.trackEvent("Action","dict_batch_delete:started",String(t.length)),t=t.slice(0,this.MAX_WORDS),this._deleting=!0,new Promise((e,n)=>{const o=()=>{const r=t.shift();if(void 0===r&&!t.length)return this._deleting=!1,Tracker.trackEvent("Action","dict_batch_delete:succeeded"),void e();this._isValidWord(r)?this.removeWord(r).then(()=>wait(1500)).then(o).catch(t=>{this._deleting=!1,Tracker.trackEvent("Action","dict_batch_delete:failed",t&&t.message),n(t)}):o()};o()})):Promise.reject()}static downloadAll(){this._deleting||this._storageController.onReady(()=>{if(!this._isSyncCapable())return;const{isDictionarySynced:t}=this._storageController.getSettings();t&&this.downloadList().then(t=>{this._storageController.updateSettings({dictionary:t})})})}static addWord(t,e=!1){let n=`${config.PREMIUM_SERVER_URL}/words/add`;const{username:o,token:r,password:i,havePremiumAccount:s,isDictionarySynced:c}=this._storageController.getSettings();if(s&&o&&r)n+=`?username=${encodeURIComponent(o)}&tokenV2=${encodeURIComponent(r)}`;else{if(!(s&&o&&i))return Promise.reject(new Error("Not logged-in for adding words to dictionary"));n+=`?username=${encodeURIComponent(o)}&password=${encodeURIComponent(i)}`}return n+=`&word=${encodeURIComponent(t.trim())}`,fetch(n,{method:"POST"}).then(t=>t.status>=200&&t.status<300?Promise.resolve():Promise.reject(new Error(`Status: ${t.status}`))).catch(n=>e?Promise.reject(n):wait(5e3).then(()=>this.addWord(t,!0)))}static removeWord(t,e=!1){let n=`${config.PREMIUM_SERVER_URL}/words/delete`;const{username:o,token:r,password:i,havePremiumAccount:s}=this._storageController.getSettings();if(s&&o&&r)n+=`?username=${encodeURIComponent(o)}&tokenV2=${encodeURIComponent(r)}`;else{if(!(s&&o&&i))return Promise.reject(new Error("Not logged-in for removing words from dictionary"));n+=`?username=${encodeURIComponent(o)}&password=${encodeURIComponent(i)}`}return n+=`&word=${encodeURIComponent(t.trim())}`,fetch(n,{method:"POST"}).then(t=>t.status>=200&&t.status<300?Promise.resolve():Promise.reject(new Error(`Status: ${t.status}`))).catch(n=>e?Promise.reject(n):wait(5e3).then(()=>this.removeWord(t,!0)))}static downloadList(){let t=`${config.PREMIUM_SERVER_URL}/words`;const{username:e,token:n,password:o,havePremiumAccount:r}=this._storageController.getSettings();if(r&&e&&n)t+=`?username=${encodeURIComponent(e)}&tokenV2=${encodeURIComponent(n)}`;else{if(!(r&&e&&o))throw new Error("Not logged-in for dictionary sync");t+=`?username=${encodeURIComponent(e)}&password=${encodeURIComponent(o)}`}return t+="&limit=2000",fetch(t).then(t=>t.json()).then(t=>t&&t.words?Promise.resolve(t.words):Promise.reject(new Error("Empty response while loading dictionary"))).catch(t=>(Tracker.trackEvent("Action","dict_download:failed",t&&t.message),Promise.reject(t)))}}DictionarySync.MAX_WORDS=1e3,DictionarySync._storageController=new StorageController,DictionarySync._isInitialized=!1,DictionarySync._syncing=!1,DictionarySync._deleting=!1,DictionarySync.EMOJI_REGEXP=/\u00a9|\u00ae|[\u2000-\u3300]|\ud83c[\ud000-\udfff]|\ud83d[\ud000-\udfff]|\ud83e[\ud000-\udfff]/;