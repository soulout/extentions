/*
Code architecture and implementation by kristof.mihaly@nomo.hu
For Ginger Software Ltd.
Ginger Grammar Checker Chrome Extension
*/

var $gingerWidgetJquery = $.noConflict(true);

if (!gingerModule) {
    var gingerModule = function(e, t) {
        var o = {};
        var n = function(e) {
            var t = o[e];
            t.module = t.classCache();
            t.isInited = true;
        };
        var r = function(e, t, n) {
            if (o[e]) {}
            o[e] = {
                classCache: t,
                isInited: false,
                deps: n
            };
            return o[e];
        };
        var i = function(e) {
            if (e && e.length) {
                var t = true;
                for (var n = 0; n < e.length; n++) {
                    if (!i(e[n])) {
                        t = false;
                        break;
                    }
                }
                return t;
            } else {
                return true;
            }
        };
        var a = function(e, t) {
            if (typeof o[e] === "undefined") {
                throw "Module '" + e + "' is not loaded. Check dependency in the end of your module definition.";
            }
            if (!i(e.deps)) {
                throw "Module '" + e + "' doesn't have all dependencies loaded.";
            }
            if (!o[e].isInited) {
                n(e);
            }
            if (t) return o[e].classCache; else return o[e].module;
        };
        var g = function(e) {
            if (!o[e]) {
                console.log(e, "not added to project or has not been loaded");
                return false;
            } else if (!o[e].isInited) {
                console.log("module ", e, "not loaded, because");
                var t = o[e].deps;
                if (t.length) {
                    var n = true;
                    for (var r = 0; r < t.length; r++) {
                        var i = t[r];
                        n = n && g(i);
                    }
                    return n;
                } else {
                    return true;
                }
            } else {
                return true;
            }
        };
        return {
            load: r,
            get: a,
            debug: g
        };
    }();
}

(function() {
    var e = gingerModule.load("widget.ajaxQueue", function() {
        var s = $gingerWidgetJquery({});
        var e = function() {
            s.clearQueue();
        };
        $gingerWidgetJquery.ajaxQueue = function(r) {
            var i, o = $gingerWidgetJquery.Deferred(), a = o.promise();
            var e = s.queue(g);
            a.abort = function(e) {
                if (i && i.abort) {
                    return i.abort(e);
                }
                var t = s.queue(), n = $gingerWidgetJquery.inArray(g, t);
                if (n > -1) {
                    t.splice(n, 1);
                }
                o.rejectWith(r.context || r, [ a, e, "" ]);
                return a;
            };
            function g(e) {
                i = $gingerWidgetJquery.ajax(r).done(o.resolve).fail(o.reject);
            }
            return a;
        };
        return {
            flush: e
        };
    });
})();

(function() {
    var e = gingerModule.load("widget.api", function() {
        var o = $gingerWidgetJquery({});
        var e = {};
        var a = gingerModule.get("widget.cache");
        var g = {};
        var t = null;
        var n = 600;
        var r = [];
        var i = function() {
            if (r.length) r[0]();
        };
        var s = function(t) {
            var n = $gingerWidgetJquery.Deferred();
            if (t) {
                r.push(function() {
                    var e = this;
                    $gingerWidgetJquery.ajax(t).then(function(e) {
                        r.splice(0, 1);
                        i();
                        n.resolve(e);
                    }, function(e) {
                        r.splice(0, 1);
                        i();
                        n.reject(e);
                    });
                });
            }
            if (r.length === 1) {
                i();
            }
            return n.promise();
        };
        var l = function(t, n) {
            t = t.replace(/(^\s+|\s+$|\W+)/g, "");
            var e = a.get("api.wordSpell", t);
            if (e) {
                n(e);
            } else {
                f(true);
                var r = {
                    securedPage: false,
                    authToken: gingerModule.get("widget.config").get("token"),
                    userIdentifier: gingerModule.get("widget.session").get("userId"),
                    apiKey: gingerModule.get("widget.config").get("apiKey"),
                    lang: gingerModule.get("widget.config").get("dialect"),
                    clientVersion: gingerModule.get("widget.config").get("version"),
                    text: t,
                    isFirstInPhrase: false
                };
                s({
                    url: "https://servicesht.gingersoftware.com/Dictionary/jsonSecured/IsUserSpelledCorrectly",
                    data: r,
                    datatype: "jsonp",
                    jsonpCallback: "gingerModuleApi.checkWordSpell"
                }).then(function(e) {
                    f(false);
                    if (e.ExceptionType) {
                        return;
                    }
                    a.set("api.wordSpell", t, e);
                    n(e);
                }, function() {
                    f(false);
                });
            }
        };
        var c = function(e, t) {
            var i = e.text;
            var n = a.get("api.sentence", i);
            if (n) {
                if (n.response !== null) {
                    t(JSON.parse(JSON.stringify(n.response)));
                } else {
                    n.cb.push(t);
                }
            } else {
                a.set("api.sentence", i, {
                    response: null,
                    cb: [ t ]
                });
                if (e.id != null && g.sentenceId === e.id && g.abort) {
                    f(false);
                    g.abort();
                }
                var r = {
                    securedPage: false,
                    userIdentifier: gingerModule.get("widget.session").get("userId"),
                    lang: gingerModule.get("widget.config").get("dialect"),
                    apiKey: gingerModule.get("widget.config").get("apiKey"),
                    clientVersion: gingerModule.get("widget.config").get("version"),
                    text: e.text,
                    isOnTheFly: false
                };
                f(true);
                g = s({
                    url: "https://services.gingersoftware.com/Ginger/correct/jsonSecured/GingerTheUserTextFull",
                    data: r,
                    method: "GET"
                }).then(function(e) {
                    f(false);
                    o.trigger("grammarcheck.sent");
                    if (e.ExceptionType) {
                        a.remove("api.sentence", i);
                        return;
                    }
                    var t = a.get("api.sentence", i);
                    if (t && t.cb) {
                        for (var n = 0; n < t.cb.length; n++) {
                            var r = gingerModule.get("widget.utils").clone(e);
                            if (t.cb[n]) t.cb[n](r);
                        }
                    }
                    a.set("api.sentence", i, {
                        response: e
                    });
                }, function() {
                    f(false);
                    a.remove("api.sentence", i);
                });
                g.sentenceId = e.id;
            }
        };
        var u = function(e, t) {
            var n = {
                userIdentifier: gingerModule.get("widget.session").get("userId"),
                apiKey: gingerModule.get("widget.config").get("apiKey"),
                lang: gingerModule.get("widget.config").get("dialect"),
                authToken: gingerModule.get("widget.config").get("token"),
                clientVersion: gingerModule.get("widget.config").get("version")
            };
            n = gingerModule.get("widget.utils").merge(e, n);
            s({
                url: "https://data.gingersoftware.com/clientdata/jsonSecured/UserIgnoredCorrection",
                data: n,
                datatype: "jsonp",
                jsonpCallback: "gingerModuleApi.ignoreCorrection",
                success: function(e) {
                    if (t) t(e);
                },
                error: function() {
                    console.log("error");
                }
            });
        };
        var d = 0;
        var f = function(e) {
            if (t) t = clearTimeout(t);
            if (e) {
                d++;
                if (d == 1) o.trigger("ajax.start");
            } else {
                d--;
                if (d == 0) o.trigger("ajax.end");
            }
        };
        var v = function(t, n) {
            var e = {
                userIdentifier: gingerModule.get("widget.session").get("userId"),
                apiKey: gingerModule.get("widget.config").get("apiKey"),
                lang: gingerModule.get("widget.config").get("dialect"),
                authToken: gingerModule.get("widget.config").get("token"),
                clientVersion: gingerModule.get("widget.config").get("version"),
                word: t,
                securedPage: false
            };
            s({
                url: "https://services.gingersoftware.com/Ginger/correct/jsonSecured/AddToPersonalDictionary",
                data: e,
                datatype: "jsonp",
                jsonpCallback: "gingerModuleApi.addToPersonalDictionary",
                success: function(e) {
                    o.trigger("dictionary.added", t);
                    if (n) n(e);
                },
                error: function() {
                    console.log("error");
                }
            });
        };
        var p = function() {
            var e = {};
            var i = a.dump();
            var t = function(e) {
                if (!i[e]) return {};
                var t = {};
                for (var n in i[e]) {
                    var r = i[e][n];
                    if (r.response) t[n] = r;
                }
                return t;
            };
            e["api.wordSpell"] = t("api.wordSpell");
            e["api.sentence"] = t("api.sentence");
            return e;
        };
        var m = function(e) {
            for (var t in e) {
                for (var n in e[t]) {
                    a.set(t, n, e[t][n]);
                }
            }
        };
        var h = function() {};
        h();
        return {
            checkWordSpell: l,
            ignoreMistake: u,
            checkSentence: c,
            addToDictionary: v,
            dumpCorrectionCache: p,
            restoreCorrectionCache: m,
            listen: o
        };
    }, [ "widget.utils", "widget.cache", "widget.ajaxQueue", "widget.session" ]);
})();

(function() {
    var e = gingerModule.load("widget.cache", function() {
        var r = {};
        var e = function(e, t, n) {
            if (!e) e = "default";
            if (!r[e]) r[e] = {};
            r[e][t] = n;
            return n;
        };
        var t = function(e, t) {
            if (r[e] && r[e][t]) return r[e][t]; else return null;
        };
        var n = function() {
            return r;
        };
        var i = function(e) {
            r = e;
        };
        var o = function(e, t) {
            return delete r[e][t];
        };
        var a = function() {
            r = {};
        };
        return {
            set: e,
            get: t,
            remove: o,
            flush: a,
            dump: n,
            restore: i
        };
    });
})();

(function() {
    var e = gingerModule.load("widget.caret", function() {
        var e = function(e, t) {
            e = $gingerWidgetJquery(e).get(0);
            var n = e;
            var r = n && n.getAttribute("contenteditable");
            if (arguments.length === 1) {
                if (n) {
                    if (window.getSelection) {
                        if (r) {
                            var i = window.getSelection().getRangeAt(0), o = i.cloneRange();
                            o.selectNodeContents(n);
                            o.setEnd(i.endContainer, i.endOffset);
                            return o.toString().length;
                        }
                        return n.selectionStart;
                    }
                    if (n.selectionStart) return n.selectionStart;
                }
                return;
            }
            if (n) {
                if (t == -1) t = e[r ? "text" : "val"]().length;
                if (window.getSelection) {
                    if (r) {
                        n.focus();
                        window.getSelection().collapse(n.firstChild, t);
                    } else n.setSelectionRange(t, t);
                }
                if (!r) n.focus();
            }
        };
        return {
            get: e
        };
    }, []);
})();

(function() {
    var e = gingerModule.load("widget.config", function() {
        var n = {
            userId: null,
            apiKey: null,
            version: "0.0.136",
            widgetUid: null,
            charLimit: null,
            source: null,
            dialect: "US",
            platform: "chrome"
        };
        var e = function(e) {
            return e ? n[e] : n;
        };
        var t = function(e, t) {
            n[e] = t;
            return n;
        };
        var r = function(e) {
            n = gingerModule.get("widget.utils").merge(n, e);
        };
        return {
            get: e,
            set: t,
            merge: r
        };
    }, [ "widget.utils" ]);
})();

(function() {
    var e = gingerModule.load("widget.contentManager", function() {
        var s = function(e) {
            e = e.replace(/<style([\s\S]*?)<\/style>/gi, "");
            e = e.replace(/<script([\s\S]*?)<\/script>/gi, "");
            e = e.replace(/<\/div>/gi, "\n");
            e = e.replace(/<\/li>/gi, "\n");
            e = e.replace(/<li>/gi, "  *  ");
            e = e.replace(/<\/ul>/gi, "\n");
            e = e.replace(/<\/p>/gi, "\n");
            e = e.replace(/<br\s*[\/]?>/gi, "\n");
            e = e.replace(/<[^>]+>/gi, "");
            e = $gingerWidgetJquery("<textarea />").html(e).text();
            return e;
        };
        var l = function(e) {
            e = e.replace(/\[data-block='true'\]/, "~~~~~~~~~");
            e = e.replace(/<[^>]+>/gi, "");
            e = e.replace(/~~~~~~~~~/, "\n");
            e = $gingerWidgetJquery("<textarea />").html(e).text();
            e = e.replace(/\s+$/, "");
            return e;
        };
        var c = function(e, t) {
            if (!e) e = [];
            if (/textarea/i.test(t.nodeName)) {
                e.push("change");
            }
            for (var n = 0; n < e.length; n++) {
                var r = document.createEvent("CustomEvent");
                r.initCustomEvent(e[n], true, true, null);
                t.dispatchEvent(r);
            }
        };
        var e = function(e, t, n, r) {
            var i = gingerModule.get("widget.utils").isRichTextElement(e);
            var o = i && $gingerWidgetJquery(e).find("[data-block='true']").length > 0 || i && $gingerWidgetJquery(e).closest("[data-reactroot]").length;
            var a = gingerModule.get("widget.siteSettings").get(window.location.href, e);
            var g = e.getAttribute("ginger-widget-mode");
            if (g && g === "contenteditable") {
                o = false;
            }
            if (/<[^>]+>|&\w+;/.test(t)) {
                if (o && i) {
                    t = l(t);
                } else if (!i || o) {
                    t = s(t);
                }
            }
            if (typeof n === "undefined" && typeof r === "undefined") {
                if (i && !o) {
                    $gingerWidgetJquery(e).html(t);
                    c(a.postRewriteEvents, e);
                    return;
                } else if (!i && !o) {
                    $gingerWidgetJquery(e).val(t);
                    c(a.postRewriteEvents, e);
                    return;
                }
            }
            if (!n) n = 0;
            if (!r) r = d(e).length;
            gingerModule.get(a.rewriter).rewrite(e, t, n, r);
            c(a.postRewriteEvents, e);
            return t;
        };
        var a = function(e) {
            var t = $gingerWidgetJquery("<div></div>").html(e.innerHTML).get(0);
            $gingerWidgetJquery(t).find("[data-block='true']").prepend(String.fromCharCode(31));
            value = $gingerWidgetJquery(t).text().replace(/^\x1F/, "");
            return value;
        };
        var g = function(e) {
            var t = e.innerHTML;
            if (!t) return "";
            function n(e, t) {
                return (t ? "(" : "(?:") + e + ")";
            }
            if (e === document.body) {
                t = t.replace(/<div class="ginger-extension-writer".*$/i, "").replace(/<div class="ginger-module-correctionBubble".*$/i, "");
            }
            var r = "br|p|div|h\\d|table|ol|ul|li|tbody|de|dt|td|th|tr|sub|sup|caption|textarea|button|select|pre|address|body";
            var i = "[^>]*";
            var o = "/?";
            var a = {
                compactBlockTags: {
                    pattern: new RegExp("<" + n(o, true) + n(r) + i + ">", "gi"),
                    replace: "<+>"
                },
                aggregateConsecutiveOpeningBlockTags: {
                    pattern: new RegExp("(?:<" + n(r) + i + ">)+", "gi"),
                    replace: "<ginger-block-elem>"
                },
                aggregateConsecutiveClosingBlockTags: {
                    pattern: new RegExp("(?:</" + n(r) + i + ">)+", "gi"),
                    replace: "</ginger-block-elem>"
                },
                aggregateConsecutiveOpenClosingBlockTags: {
                    pattern: new RegExp("(?:</ginger-block-elem><ginger-block-elem>)", "gi"),
                    replace: "<ginger-block-break/>"
                },
                representBlockElemDifferencesWithNewLineRepresentation: {
                    pattern: new RegExp("(?:<(ginger-block-elem|/ginger-block-elem|ginger-block-break/)>)", "gi"),
                    replace: String.fromCharCode(31)
                },
                removeTrailingAndStartingNewLines: {
                    pattern: new RegExp("(^|$)"),
                    replace: ""
                },
                removeNewLines: {
                    pattern: /\n/gi,
                    replace: " "
                }
            };
            t = u(t, a.aggregateConsecutiveOpeningBlockTags);
            t = u(t, a.aggregateConsecutiveClosingBlockTags);
            t = u(t, a.compactBlockTags);
            t = u(t, a.aggregateConsecutiveOpenClosingBlockTags);
            t = u(t, a.representBlockElemDifferencesWithNewLineRepresentation);
            if ($gingerWidgetJquery(e).css("whiteSpace") !== "pre-wrap") {
                t = u(t, a.removeNewLines);
            }
            t = u(t, a.removeTrailingAndStartingNewLines);
            var g = document.createElement("div");
            g.innerHTML = t;
            $gingerWidgetJquery(g).find(".XjviVd").remove();
            t = g.textContent;
            return t;
        };
        var u = function(e, t) {
            return e.replace(t.pattern, t.replace);
        };
        var d = function(e) {
            var t;
            var n = gingerModule.get("widget.utils").isRichTextElement(e);
            var r = n && $gingerWidgetJquery(e).find("[data-block='true']").length > 0 || n && $gingerWidgetJquery(e).closest("[data-reactroot]").length;
            var i = e.getAttribute("ginger-widget-mode");
            if (i && i === "contenteditable") {
                r = false;
            }
            var o = n && /pluggable-input-body/.test(e.className);
            if (r || o) {
                t = a(e);
            } else if (n) {
                t = g(e);
            } else {
                t = $gingerWidgetJquery(e).val();
            }
            t = t.replace("^\n+", "");
            return t;
        };
        return {
            setVal: e,
            getVal: d
        };
    }, [ "widget.utils" ]);
})();

(function() {
    var e = gingerModule.load("widget.correctionBubble", function() {
        var x = $gingerWidgetJquery({});
        var e;
        var C;
        var M;
        var r;
        var W;
        var n;
        var t;
        var i;
        var T = 28;
        var q = 0;
        var S = null;
        var o = 600;
        var J = null;
        var k = {};
        var F = null;
        var N = null;
        var a = function(e, t, n) {
            if (!C || C.parent().length === 0) L();
            if ($gingerWidgetJquery(C).is(":hover") && $gingerWidgetJquery(C).is(":visible")) return;
            if (gingerModule.get("widget.licenseLimits").isCapacityLimited()) {
                R(true);
            } else {
                R(false);
            }
            E();
            if (S) S = clearTimeout(S);
            if (gingerModule.get("widget.session").isLoggedIn()) {
                A(false);
            } else {
                A(true);
            }
            var r = $gingerWidgetJquery("#gwmw-" + e.id);
            if (F && F.id === e.id) {
                return;
            }
            F = e;
            N = t;
            J = n;
            k = {
                sentenceId: t.id,
                correctionId: e.id,
                sentence: t,
                correction: e
            };
            $gingerWidgetJquery(W).empty();
            var i = [];
            var o = e.UXFrgFrom;
            var a = e.UXFrgTo;
            var g = o;
            var s = gingerModule.get("widget.phraseService").getSentenceFragments(t, o, a);
            for (var l = 0; l < s.length; l++) {
                var c;
                if (s[l].correction) {
                    var u = s[l].correction.Suggestions.length != 0;
                    c = document.createElement("gwbm");
                    c.id = "gwbm-" + s[l].correction.id;
                    c.className = "ginger-module-correctionBubbleService-mistake-type-" + s[l].correction.Type;
                    if (u) {
                        c.appendChild(document.createTextNode(s[l].correction.Suggestions[0].Text));
                    } else {
                        c.appendChild(document.createTextNode(s[l].text));
                        c.className += " ginger-module-correctionBubbleService-mistake-nosuggestion";
                    }
                    (function(t, e) {
                        var n = document.createElement("gwbmo");
                        if (m) {
                            n.className = "ginger-module-correctionBubbleService-mistake-bubble-under";
                        }
                        var r = document.createElement("ga");
                        var i = document.createElement("ga");
                        var o = document.createElement("ga");
                        r.className = "ginger-module-correctionBubbleService-mistake-bubble-approve";
                        i.className = "ginger-module-correctionBubbleService-mistake-bubble-ignore";
                        o.className = "ginger-module-correctionBubbleService-mistake-bubble-add";
                        r.title = "Approve the Suggestion";
                        i.title = "Ignore the Suggestion";
                        o.title = "Add to Personal Dictionary";
                        r.onmousedown = function(e) {
                            x.trigger("approved.mistake", k);
                            if (!gingerModule.get("widget.session").isLoggedIn()) {
                                x.trigger("unauthenticated.approve");
                            } else if (gingerModule.get("widget.licenseLimits").isCapacityLimited()) {
                                x.trigger("limited.approve");
                            } else {
                                I("approve", {
                                    correctionId: t.id
                                }, true);
                                $gingerWidgetJquery("#gwbm-" + t.id).replaceWith(document.createTextNode($gingerWidgetJquery("#gwbm-" + t.id).text()));
                                E();
                            }
                            e.stopPropagation();
                            e.preventDefault();
                            return false;
                        };
                        i.onmousedown = function(e) {
                            x.trigger("ignored.mistake", k);
                            I("ignore", {
                                correctionId: t.id
                            }, true);
                            $gingerWidgetJquery("#gwbm-" + t.id).replaceWith(document.createTextNode($gingerWidgetJquery("#gwbm-" + t.id).text()));
                            E();
                            e.stopPropagation();
                            e.preventDefault();
                            return false;
                        };
                        o.onmousedown = function(e) {
                            if (!gingerModule.get("widget.session").isLoggedIn()) {
                                x.trigger("unauthenticated.addToDictionary");
                            } else {
                                x.trigger("addedtodict.mistake", k);
                                I("addToDictionary", {
                                    correctionId: t.id
                                }, true);
                            }
                            E();
                            e.stopPropagation();
                            e.preventDefault();
                            return false;
                        };
                        if (u) {
                            n.appendChild(r);
                        }
                        if (s[l].correction.Type == 1 && s[l].correction.Mistakes[0].CanAddToDict && !gingerModule.get("widget.config").get("disableAddToDictionary")) {
                            n.appendChild(o);
                        } else {
                            n.appendChild(i);
                        }
                        e.appendChild(n);
                    })(s[l].correction, c);
                } else {
                    c = document.createTextNode(s[l].text);
                }
                $gingerWidgetJquery(W).get(0).appendChild(c);
            }
            C.show();
            var d = $gingerWidgetJquery(r).offset();
            var f = $gingerWidgetJquery(document.body).offset();
            if (f.left) {
                d.left -= f.left;
            }
            var v = $gingerWidgetJquery(r).height();
            var p = $gingerWidgetJquery(r).width();
            C.css("padding", q);
            var m;
            var h = 22;
            var w = d.top - T;
            if (w - h < 0) {
                m = true;
                w = d.top + T;
            } else if (w - h <= $gingerWidgetJquery("html,body").scrollTop()) {
                m = true;
                w = d.top + T;
            }
            C.css("top", w);
            var y = C.offset();
            var b = C.width();
            x.trigger("show", {
                correction: F,
                sentence: N
            });
            var $ = $gingerWidgetJquery(M).outerWidth();
            if (y.top === w && y.left <= d.left && y.left + b >= d.left + p) {} else {
                C.css("left", d.left);
            }
            if (d.left + $ > $gingerWidgetJquery(window).width()) {
                C.css("left", $gingerWidgetJquery(window).width() - $ - 10);
            }
            return;
        };
        var g = function(e, t) {
            if (C) {
                if ($gingerWidgetJquery(C).is(":visible")) {
                    x.trigger("hide", {
                        correction: F,
                        sentence: N
                    });
                }
                C.hide();
            }
            F = null;
            N = null;
        };
        var E = function() {
            if (S) S = clearTimeout(S);
        };
        var s = function(e, t) {
            E();
            S = setTimeout(function() {
                l();
            }, o);
        };
        var L = function() {
            var e = document.body.getAttribute("contenteditable") ? document.body.parentNode : document.body;
            C = $gingerWidgetJquery("<gdiv class='ginger-module-correctionBubble'></gdiv>").appendTo(e);
            r = $gingerWidgetJquery("<gdiv class='ginger-module-correctionBubble-container ginger-module-correctionBubble-container-loggedout'><gdiv class='ginger-module-correctionBubble-login'>Log in</gdiv><gdiv class='ginger-module-correctionBubble-body'>to use Ginger</gdiv></gdiv>").appendTo(C);
            M = $gingerWidgetJquery("<gdiv class='ginger-module-correctionBubble-container ginger-module-correctionBubble-container-loggedin'></gdiv>").appendTo(C);
            n = $gingerWidgetJquery("<gdiv class='ginger-module-correctionBubble-limited'>Limited mode</gdiv>").appendTo(M);
            n.on("click", function(e) {
                gingerModule.get("widget.licenseLimits").approvalsUsed(0);
                e.stopPropagation();
                e.preventDefault();
                return false;
            });
            r.on("click", function(e) {
                x.trigger("unauthenticated.approve.all");
                e.stopPropagation();
                e.preventDefault();
                return false;
            });
            W = $gingerWidgetJquery("<gdiv class='ginger-module-correctionBubble-body'></gdiv>").appendTo(M);
            var t = $gingerWidgetJquery("<ga href='javascript:' class='ginger-module-correctionBubble-close' title='Ignore mistake'>&times;</ga>").appendTo(M);
            t.on("mousedown", function(e) {
                e.stopPropagation();
                e.preventDefault();
                if (gingerModule.get("widget.licenseLimits").isCapacityLimited()) {
                    x.trigger("limited.approve");
                } else {
                    x.trigger("ignore.all", k);
                    I("ignoreAll");
                }
                return false;
            });
            W.on("mousedown", function(e) {
                e.stopImmediatePropagation();
                e.preventDefault();
                e.stopPropagation();
                if (!gingerModule.get("widget.session").isLoggedIn()) {
                    x.trigger("unauthenticated.approve.all");
                } else if (gingerModule.get("widget.licenseLimits").isCapacityLimited()) {
                    x.trigger("limited.approve.all");
                } else {
                    x.trigger("approve.all", k);
                    I("approveAll");
                    g();
                }
                return false;
            });
            if (C.closest("[contenteditable]").length) {
                C.attr("contenteditable", false);
            }
            C.hide();
            $gingerWidgetJquery(C).on("mouseleave", function e(t) {
                s();
            });
            $gingerWidgetJquery(C).on("mouseenter", function e(t) {
                setTimeout(E, 60);
            });
            R(false);
        };
        var I = function(e, t, n) {
            if (J) {
                J(e, t ? t : k);
            }
            if (!n) g();
        };
        var l = function() {
            J = null;
            g();
        };
        var A = function(e) {
            var t = $gingerWidgetJquery(M);
            var n = $gingerWidgetJquery(r);
            if (e) {
                t.hide();
                n.show();
            } else {
                t.show();
                n.hide();
            }
        };
        var R = function(e) {
            if (e) {
                $gingerWidgetJquery(C).addClass("ginger-module-correctionBubble-limitedmode");
            } else {
                $gingerWidgetJquery(C).removeClass("ginger-module-correctionBubble-limitedmode");
            }
        };
        var c = function() {};
        return {
            show: a,
            hide: g,
            gracefulHide: s,
            listen: x,
            setLimitedVisibility: R,
            init: c
        };
    }, [ "widget.utils", "widget.inputFinder", "widget.licenseLimits", "widget.session" ]);
})();

(function() {
    var e = gingerModule.load("widget.correctionService", function(e) {
        var u = [];
        var g = function(g, s) {
            var l = g.words.length;
            var c = [];
            if (g.words.length === 0) {
                s(g);
            }
            for (var e = 0; e < g.words.length; e++) {
                if (u.indexOf(g.words[e]) === -1) (function(e) {
                    var o = g.words[e];
                    var a = gingerModule.get("widget.utils").trimAndMatch(o.text);
                    gingerModule.get("widget.api").checkWordSpell(a.text, function(e) {
                        o.correction = e.IsUserSpelledCorrectlyResult;
                        if (!o.correction.IsCorrect) {
                            var t = o.startsAt + a.pre.length - g.startsAt;
                            var n = t + a.text.length;
                            n = n - 1;
                            if (o.correction.IsCorrect !== true) {
                                var r = g.correction && g.correction.Corrections ? d(g.correction.Corrections, t, n) : null;
                                var i = {
                                    From: t,
                                    To: n,
                                    UXFrgFrom: t,
                                    UXFrgTo: n,
                                    Type: 1,
                                    Suggestions: [],
                                    Mistakes: [ {
                                        From: t,
                                        To: n,
                                        CanAddToDict: true
                                    } ],
                                    id: r ? r.id : gingerModule.get("widget.utils").generateUID()
                                };
                                c.push(i);
                            }
                        }
                        l--;
                        if (l == 0) {
                            if (!g.correction) {
                                g.correction = {
                                    checkType: "shallow"
                                };
                            }
                            g.correction.Corrections = c;
                            s(g);
                        }
                    });
                })(e);
            }
        };
        var s = function(n, r) {
            n = JSON.parse(JSON.stringify(n));
            if (n.words.length) {
                var i = n.words.length - 1;
                var e = n.words[i].text;
                var t = /[\s\n]+$/g;
                var o = e.match(t);
                if (o) {
                    n.text = n.text.replace(t, "");
                    n.words[i].text = e.replace(t, "");
                }
            }
            gingerModule.get("widget.api").checkSentence(n, function(e) {
                try {
                    n.correction = e;
                    if (o) {
                        n.words[i].text += o;
                        n.text += o;
                    }
                    for (var t = 0; t < n.correction.Corrections.length; t++) {
                        var e = n.correction.Corrections[t];
                        if (!e.id) {
                            e.id = gingerModule.get("widget.utils").generateUID();
                        }
                    }
                    r(n);
                } catch (e) {
                    if (window.Raven && window.Raven.setExtraContext) {
                        Raven.captureException(e);
                    } else {
                        if (console && console.error) console.error(e);
                        throw new Error(e);
                    }
                    r(n);
                }
            });
        };
        var t = function(e, t, n) {
            e.ignored = true;
            if (e.Type === 1) {
                var r = t.text;
                var i = r.substring(e.From, e.To + 1);
                var o = e.Suggestions.length ? e.Suggestions[0].Text : t.text.substring(e.From, e.To + 1);
                var a = r.substring(e.UXFrgFrom, e.UXFrgTo);
                var g = e.TopLrnCatId;
                var s = gingerModule.get("widget.config").get("dialect");
                gingerModule.get("widget.api").ignoreMistake({
                    ignoredWord: i,
                    suggestedCorrection: o,
                    uxFragment: a,
                    originalSentence: r,
                    categoryId: g,
                    dictionaryLanguage: s
                }, function(e) {
                    if (n) n(e);
                });
                u.push(i);
            }
            return e;
        };
        var l = function(e) {
            if (!e.correction.Corrections || !e.correction.Corrections.length) {
                return null;
            }
            var t = false;
            var n = [];
            for (var r = 0; r < e.correction.Corrections.length; r++) {
                var i = e.correction.Corrections[r];
                if (!i.id) {
                    i.id = gingerModule.get("widget.utils").generateUID();
                }
                var o = e.text.substring(i.From, i.To + 1);
                if (i.Type === 1 && u.indexOf(o) !== -1) {
                    i.ignored = true;
                    t = true;
                }
            }
            return t ? e : null;
        };
        var n = function(r, i, o) {
            if (!r) return;
            var a = r.length;
            for (var e = 0; e < r.length; e++) {
                (function(n) {
                    if (r[n].text.match(/^\s*$/)) {
                        a--;
                    } else {
                        var e = !!r[n].activeSentence;
                        if (e) {
                            g(r[n], function(e) {
                                r[n] = e;
                                e.correction.checkType = "shallow";
                                a--;
                                i(r);
                                if (a === 0 && o) {
                                    o(r);
                                }
                            });
                        } else {
                            if (!r[n].correction || r[n].correction.checkType !== "deep") {
                                s(r[n], function(e) {
                                    e.correction.checkType = "deep";
                                    var t = l(e);
                                    if (t) {
                                        r[n] = c(r[n], t);
                                    } else {
                                        r[n] = c(r[n], e);
                                    }
                                    a--;
                                    i(r);
                                    if (a === 0 && o) {
                                        o(r);
                                    }
                                });
                            } else {
                                var t = l(r[n]);
                                a--;
                                if (t) {
                                    r[n] = t;
                                    i(r);
                                }
                            }
                        }
                    }
                    if (a === 0 && o) {
                        i(r);
                        o(r);
                    }
                })(e);
            }
        };
        var r = function() {
            return u;
        };
        var i = function(e) {
            u = e;
        };
        var d = function(e, t, n) {
            for (var r = 0; r < e.length; r++) {
                var i = e[r];
                if (i.From === t && i.To === n) {
                    return i;
                }
            }
            return null;
        };
        var c = function(e, t) {
            try {
                for (var n = 0; n < e.correction.Corrections.length; n++) {
                    var r = e.correction.Corrections[n];
                    var i = d(t.correction.Corrections, r.From, r.To);
                    if (i && i.Type === r.Type) {
                        i.id = r.id;
                    }
                }
            } catch (e) {
                if (false && console && console.warn) {
                    console.warn("grammar check result merge catch", e);
                }
            }
            return t;
        };
        var f = function(e, t) {
            if (!t.correction || !t.correction.Corrections.length) {
                return e;
            }
            var n = gingerModule.get("widget.utils").diffString(t.text, e.text);
            if (n.preCommon == 0 && n.postCommon == 0) {
                return e;
            }
            for (var r = 0; r < t.correction.Corrections.length; r++) {
                var i = t.correction.Corrections[r];
                if (n.to <= i.From) {
                    i.UXFrgFrom += n.diff;
                    i.UXFrgTo += n.diff;
                    i.From += n.diff;
                    i.To += n.diff;
                } else if (n.from >= i.To + 1) {} else {
                    t.correction.Corrections.splice(r, 1);
                    r--;
                }
            }
            e.correction = t.correction;
            return e;
        };
        var o = function(e, t) {
            var n = 0;
            var r = 0;
            if (!t.length || !e.length) {
                return e;
            }
            var i;
            var o;
            for (var a = 0; a < e.length && a < t.length; a++) {
                if (t[a].text === e[a].text) {
                    n = a + 1;
                    e[a].correction = t[a].correction;
                    e[a].id = t[a].id;
                    t[a] = e[a];
                } else {
                    i = gingerModule.get("widget.utils").trimAndMatch(t[a].text);
                    o = gingerModule.get("widget.utils").trimAndMatch(e[a].text);
                    if (i.pre + i.text === o.pre + o.text) {
                        n = a + 1;
                        e[a].correction = t[a].correction;
                        e[a].id = t[a].id;
                        t[a] = e[a];
                    } else {
                        break;
                    }
                }
            }
            if (e.length <= n) {
                return e;
            }
            for (var a = 0; a < e.length && a < t.length; a++) {
                if (t.length - a - 1 <= n - 1) break;
                if (e.length - a - 1 <= n - 1) break;
                if (t[t.length - a - 1].text === e[e.length - a - 1].text) {
                    r = a + 1;
                    e[e.length - a - 1].correction = t[t.length - a - 1].correction;
                    e[e.length - a - 1].id = t[t.length - a - 1].id;
                } else {
                    i = gingerModule.get("widget.utils").trimAndMatch(t[t.length - a - 1].text);
                    o = gingerModule.get("widget.utils").trimAndMatch(e[e.length - a - 1].text);
                    if (i.pre + i.text === o.pre + o.text) {
                        r = a + 1;
                        e[e.length - a - 1].correction = t[t.length - a - 1].correction;
                        e[e.length - a - 1].id = t[t.length - a - 1].id;
                    } else {
                        break;
                    }
                }
            }
            for (var a = r; a < e.length - n && a < t.length - n; a++) {
                if (t.length - a - 1 < n) {
                    e[e.length - a - 1].id = gingerModule.get("widget.utils").generateUID();
                } else if (e.length - a - 1 < n) {} else {
                    if (t[t.length - a - 1].correction && t[t.length - a - 1].correction.Corrections.length) {
                        e[e.length - a - 1] = f(e[e.length - a - 1], t[t.length - a - 1]);
                        if (e[e.length - a - 1].correction) e[e.length - a - 1].correction.checkType = "shallow";
                    } else {}
                }
            }
            return e;
        };
        var a = function() {
            u = [];
        };
        return {
            correct: n,
            flush: a,
            correctSpellingOfSentence: g,
            mergeSentenceCorrections: f,
            mergeCorrections: o,
            ignoreMistake: t,
            getIgnoredWords: r,
            setIgnoredWords: i
        };
    }, [ "widget.phraseService", "widget.utils" ]);
})();

(function() {
    var e = gingerModule.load("widget.ghostModifiers", function() {
        var r = function(e) {
            if (!window.location) return null;
            var t = window.location.hostname.split(":")[0];
            return t.indexOf(e) != -1;
        };
        var i = {};
        i.faceBook = {
            domain: "facebook.com",
            modifier: function(e, t) {
                var n = $gingerWidgetJquery(e).closest("._2ihx._i-o").length;
                if (n) {
                    $gingerWidgetJquery(e).css("textAlign", "center");
                }
            }
        };
        i.unitTest = {
            domain: "localhost",
            modifier: function(e, t) {
                return;
            }
        };
        var e = function(e, t) {
            for (var n in i) {
                if (r(i[n].domain)) {
                    i[n].modifier(e, t);
                }
            }
        };
        return {
            process: e
        };
    });
})();

(function() {
    var e = gingerModule.load("widget.highlighters.ghost", function() {
        var a;
        var o;
        var c;
        var u = "gwsw";
        var d = "gwmw";
        var g = true;
        var s = false;
        var l = [];
        var t = function(e) {
            var t = document.styleSheets, n = [];
            if (!t) return;
            e.matches = e.matches || e.webkitMatchesSelector || e.mozMatchesSelector || e.msMatchesSelector || e.oMatchesSelector;
            try {
                for (var r in t) {
                    var i = t[r].rules || t[r].cssRules;
                    for (var o in i) {
                        if (e.matches(i[o].selectorText)) {
                            n.push(i[o].cssText);
                            if (/[+]/.test(i[o].selectorText)) {
                                return true;
                            }
                        }
                    }
                }
            } catch (e) {}
            return false;
        };
        var f = function() {
            if (!$gingerWidgetJquery(o).is(":visible")) {
                return;
            }
            var e = $gingerWidgetJquery(o).position();
            var t = window.devicePixelRatio || 1;
            if ($gingerWidgetJquery(c).css("box-sizing") === "border-box") {
                $gingerWidgetJquery(c).css("height", $gingerWidgetJquery(o).outerHeight() / t);
                $gingerWidgetJquery(c).css("width", $gingerWidgetJquery(o).outerWidth() / t);
            } else {
                $gingerWidgetJquery(c).css("height", $gingerWidgetJquery(o).height() / t);
                $gingerWidgetJquery(c).css("width", $gingerWidgetJquery(o).width() / t);
            }
            var n = parseInt($gingerWidgetJquery(o).css("z-index"));
            if (!n) n = 1;
            if (n < 2) n = 2;
            var r = $gingerWidgetJquery(o).data("gingerPositionCache");
            if (!r) {
                r = $gingerWidgetJquery(o).css("position");
                $gingerWidgetJquery(o).data("gingerPositionCache", r);
            }
            var i = r;
            if (i == "fixed") {
                $gingerWidgetJquery(c).css("position", "fixed");
                $gingerWidgetJquery(c).css("z-index", n - 1);
                $gingerWidgetJquery(o).css("z-index", n);
                $gingerWidgetJquery(c).css("top", e.top);
                $gingerWidgetJquery(c).css("left", e.left);
            } else if (i == "relative") {
                $gingerWidgetJquery(c).css("position", "absolute");
                $gingerWidgetJquery(c).css("top", e.top);
                $gingerWidgetJquery(c).css("left", e.left);
                if (s) {
                    $gingerWidgetJquery(c).css("top", e.top);
                    $gingerWidgetJquery(c).css("left", e.left);
                    $gingerWidgetJquery(c).css("z-index", n - 1);
                    $gingerWidgetJquery(o).css("z-index", n);
                }
            } else if (i == "absolute") {
                $gingerWidgetJquery(c).css("position", "absolute");
                $gingerWidgetJquery(c).css("z-index", n - 1);
                $gingerWidgetJquery(o).css("z-index", n);
                $gingerWidgetJquery(c).css("top", e.top);
                $gingerWidgetJquery(c).css("left", e.left);
            } else {
                $gingerWidgetJquery(o).css("position", "relative");
                $gingerWidgetJquery(c).css("position", "absolute");
                $gingerWidgetJquery(c).css("top", e.top);
                $gingerWidgetJquery(c).css("left", e.left);
                if (s) {
                    $gingerWidgetJquery(c).css("top", e.top);
                    $gingerWidgetJquery(c).css("left", e.left);
                    $gingerWidgetJquery(c).css("z-index", n - 1);
                    $gingerWidgetJquery(o).css("z-index", n);
                }
            }
        };
        var v = function(e) {
            return e.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#039;");
        };
        var p = function(e, t) {
            var n = $gingerWidgetJquery("<" + u + " />").get(0);
            n.id = "gws-" + e.id;
            var r = e.preLineBreakCount ? new Array(e.preLineBreakCount + 1).join("\n") : "";
            var i = e.postLineBreakCount ? new Array(e.postLineBreakCount + 1).join("\n") : "";
            if (!e.correction || !e.correction.Corrections.length) {
                n.innerHTML = r + v(e.text) + i;
                return n;
            }
            n.innerHTML += r;
            var o = gingerModule.get("widget.phraseService").getSentenceFragments(e);
            var a = "";
            for (var g = 0; g < o.length; g++) {
                var s;
                if (o[g].correction && !o[g].correction.ignored) {
                    var l = false;
                    if (t.indexOf(o[g].correction.id) === -1 && !$gingerWidgetJquery(c).find("#" + d + "-" + o[g].correction.id).length) {
                        l = true;
                    }
                    s = document.createElement(d);
                    s.className = "ginger-module-highlighter-mistake-type-" + o[g].correction.Type;
                    s.id = "gwmw-" + o[g].correction.id;
                    if (l) {
                        s.className += " ginger-module-highlighter-mistake-anim";
                    }
                    s.appendChild(document.createTextNode(o[g].text));
                } else {
                    s = document.createTextNode(o[g].text);
                }
                n.appendChild(s);
            }
            n.innerHTML += i;
            return n;
        };
        var m = function() {
            if (!a.isEnabled()) return;
            var e = $gingerWidgetJquery(o).css("background");
            var t = $gingerWidgetJquery(o).css("background-image");
            var n = $gingerWidgetJquery(o).css("background-color");
            var r = t == "none" && n == "rgba(0, 0, 0, 0)" ? true : false;
            if (!r) {
                $gingerWidgetJquery(o).get(0).style.setProperty("background", "none", "important");
                $gingerWidgetJquery(o).data("gingerBackgroundCache", e);
            }
            $gingerWidgetJquery(c).css("color", $gingerWidgetJquery(o).css("color"));
            $gingerWidgetJquery(c).css("border-radius", $gingerWidgetJquery(o).css("border-radius"));
            $gingerWidgetJquery(c).css("box-sizing", $gingerWidgetJquery(o).css("box-sizing"));
            $gingerWidgetJquery(c).css("height", $gingerWidgetJquery(o).css("height"));
            $gingerWidgetJquery(c).css("paddingTop", $gingerWidgetJquery(o).css("paddingTop"));
            $gingerWidgetJquery(c).css("paddingLeft", $gingerWidgetJquery(o).css("paddingLeft"));
            $gingerWidgetJquery(c).css("paddingRight", $gingerWidgetJquery(o).css("paddingRight"));
            $gingerWidgetJquery(c).css("paddingBottom", $gingerWidgetJquery(o).css("paddingBottom"));
            $gingerWidgetJquery(c).css("marginTop", $gingerWidgetJquery(o).css("marginTop"));
            $gingerWidgetJquery(c).css("marginLeft", $gingerWidgetJquery(o).css("marginLeft"));
            $gingerWidgetJquery(c).css("marginRight", $gingerWidgetJquery(o).css("marginRight"));
            $gingerWidgetJquery(c).css("marginBottom", $gingerWidgetJquery(o).css("marginBottom"));
            $gingerWidgetJquery(c).css("width", $gingerWidgetJquery(o).css("width"));
            $gingerWidgetJquery(c).css("font-family", $gingerWidgetJquery(o).css("font-family"));
            $gingerWidgetJquery(c).css("direction", $gingerWidgetJquery(o).css("direction"));
            $gingerWidgetJquery(c).css("font-size", $gingerWidgetJquery(o).css("font-size"));
            $gingerWidgetJquery(c).css("line-height", $gingerWidgetJquery(o).css("line-height"));
            $gingerWidgetJquery(c).css("text-align", $gingerWidgetJquery(o).css("text-align"));
            $gingerWidgetJquery(c).css("letter-spacing", $gingerWidgetJquery(o).css("letter-spacing"));
            $gingerWidgetJquery(c).css("font-weight", $gingerWidgetJquery(o).css("font-weight"));
            var i = $gingerWidgetJquery(o).data("gingerBackgroundCache");
            if (i) {
                $gingerWidgetJquery(c).css("background", i);
            }
            $gingerWidgetJquery(c).css({
                color: "rgba(0,0,0,0)"
            });
            $gingerWidgetJquery(c).css({
                display: "block"
            });
            if (gingerModule.get("widget.utils").isRichTextElement(o)) {
                $gingerWidgetJquery(c).css("white-space", "pre-wrap");
            } else {
                $gingerWidgetJquery(c).css("white-space", $gingerWidgetJquery(o).css("white-space"));
            }
            gingerModule.get("widget.ghostModifiers").process(o, c);
        };
        var e = function(e) {
            if (!a.isEnabled() || !gingerModule.get("widget").isEnabled()) return;
            if (!g) return;
            var t = gingerModule.get("widget.utils").clone(e);
            try {
                if (t[t.length - 1].text.match(/\n$/)) {
                    t[t.length - 1].text += "\n";
                }
            } catch (e) {}
            m();
            f();
            var n = $gingerWidgetJquery(c).find(d).map(function() {
                return this.id.substring((d + "-").length);
            }).get();
            var r = $gingerWidgetJquery(c).find(u);
            for (var i = 0; i < t.length || i < r.length; i++) {
                var o = !l[i] || JSON.stringify(t[i]) !== JSON.stringify(l[i]);
                if (!t[i]) {
                    $gingerWidgetJquery(r[i]).remove();
                } else if (!r[i]) {
                    $gingerWidgetJquery(c).append(p(t[i], n));
                } else if (o) {
                    $gingerWidgetJquery(r[i]).replaceWith(p(t[i], n));
                } else {}
            }
            l = t;
            h();
        };
        var h = function() {
            c.scrollTop($gingerWidgetJquery(o).scrollTop());
            c.scrollLeft($gingerWidgetJquery(o).scrollLeft());
        };
        var n = function() {
            var e = $gingerWidgetJquery(o).css("position");
            if (s) {
                c = $gingerWidgetJquery("<div class='ginger-module-highlighter ginger-module-highlighter-ghost'></div>").insertAfter($gingerWidgetJquery(o));
            } else if (e == "static" || e == "relative") {
                c = $gingerWidgetJquery("<div class='ginger-module-highlighter ginger-module-highlighter-ghost'></div>").insertBefore($gingerWidgetJquery(o));
            } else {
                c = $gingerWidgetJquery("<div class='ginger-module-highlighter ginger-module-highlighter-ghost'></div>").insertAfter($gingerWidgetJquery(o));
            }
        };
        var r = function() {
            return $gingerWidgetJquery(c).find(d);
        };
        var i = function(e) {
            if (e) {
                $gingerWidgetJquery(c).show();
            } else {
                $gingerWidgetJquery(c).hide();
            }
            g = !!e;
        };
        var w = function() {
            var e = $gingerWidgetJquery(o).data("gingerBackgroundCache");
            if (e) {
                $gingerWidgetJquery(o).css("background", e);
            }
            $gingerWidgetJquery(o).css("position", "");
            $gingerWidgetJquery(o).css("z-index", "");
            a.events.listen.off("mutation.ghostUpdate");
            $gingerWidgetJquery(o).off("blur", f);
            $gingerWidgetJquery(o).off("scroll", h);
            $gingerWidgetJquery(c).remove();
        };
        var y = function(e) {
            a = e;
            o = a.element;
            s = t(o);
            $gingerWidgetJquery(o).blur(f);
            o.addEventListener("scroll", h);
            a.events.listen.on("mutation.ghostUpdate", function() {
                if (!a.isEnabled() || !gingerModule.get("widget").isEnabled()) return;
                m();
                f();
            });
            n();
            f();
        };
        return {
            refresh: e,
            refreshPosition: f,
            init: y,
            setVisibility: i,
            scrollUpdate: h,
            getMistakeElements: r,
            destroy: w
        };
    }, [ "widget.utils", "widget.phraseService", "widget.ghostModifiers" ]);
})();

(function() {
    var e = gingerModule.load("widget.highlighters.inline", function() {
        var m;
        var h;
        var w = "gwmw";
        var y = true;
        var b = function() {
            var e = /emailauthorframe\.jsp\?email_type=html/.test(window.location.href);
            if (e) {
                w = "span";
            }
        };
        var e = function(e, t) {
            var n = "p,h1, h2, h3, h4, h5, h6,li,pre,address,blockquote,dl,div";
            if (e === t) return false;
            var r = $gingerWidgetJquery(e).parents().has(t).first();
            var i = $gingerWidgetJquery(e).parentsUntil(r, n).length;
            var o = $gingerWidgetJquery(t).parentsUntil(r, n).length;
            return i || o ? true : false;
        };
        var $ = function(e, t, n) {
            var r = n.From + t.startsAt;
            var i = n.To + 1 + t.startsAt;
            var o = gingerModule.get("widget.utils").getNodeOffsetOfIndex(e, r, i);
            if (!o.startNode || !o.endNode) {
                return;
            }
            var a = g(w, o.startNode, o.startNodeOffset, o.endNode, o.endNodeOffset);
            $gingerWidgetJquery(e).find("b:empty,i:empty").remove();
            e.normalize();
            return a;
        };
        var x = function() {
            return gingerModule.get("widget.selectionManager").saveSelection(h);
        };
        var C = function() {
            return gingerModule.get("widget.selectionManager").restoreSelection(h);
        };
        var g = function(e, t, n, r, i) {
            var o = document.createRange();
            try {
                o.setStart(t, n);
                o.setEnd(r, i);
            } catch (e) {
                console.error(e);
            }
            var a = document.createElement(e);
            a.appendChild(o.extractContents());
            o.insertNode(a);
            return a;
        };
        var M = function(e) {
            if (!e) return;
            $gingerWidgetJquery(e).html($gingerWidgetJquery(e).html().replace(/<[\/]?gwmw[^>]*>/gi, ""));
            e = $gingerWidgetJquery(e);
            var t = e.parent();
            if (e.contents().length) {
                e.contents().insertBefore(e);
                e.remove();
            } else {
                e.remove();
            }
            t.find("b:empty,i:empty").remove();
        };
        var W = function() {
            var e = $gingerWidgetJquery(h).find("span[style]");
            e.each(function(e, t) {
                var n = $gingerWidgetJquery(t).css("background-color");
                if (n) {
                    n = n.toLowerCase().replace(/ /g, "");
                    if (n === "rgba(255,115,115,0.3)" || n === "rgba(87,131,204,0.3)") {
                        $gingerWidgetJquery(t).css("background-color", "");
                    }
                }
            });
        };
        var T = function() {
            $gingerWidgetJquery(h).find(".XjviVd").slice(1).remove();
        };
        var t = function(e, t) {
            for (var n = 0; n < t.length; n++) {
                if (t[n].id === e) return t[n];
            }
            return null;
        };
        var q = function(e, t) {
            var n = document.getElementById("gwmw-" + e.id);
            if (!t || !e || n.innerText !== t.text.substring(e.From, e.To + 1) || n.querySelectorAll(w).length) {
                return false;
            }
            return true;
        };
        var S = function(e, t, n, r) {
            if (window.location.hostname.indexOf("lightning.force.com") != -1) {
                if (n.id === t[t.length - 1].id && r.id === n.correction.Corrections[n.correction.Corrections.length - 1].id) {
                    var i = n.words[n.words.length - 1];
                    if (i.startsAt - n.startsAt === r.From && i.endsAt - n.startsAt === r.To + 1) {
                        if (!$gingerWidgetJquery("gwcphb").next().length) {
                            return true;
                        }
                    }
                }
            }
            return false;
        };
        var n = null;
        var r = function(e) {
            if (n) clearTimeout(n);
            n = setTimeout(function() {
                console.log("anticoollision calling refresh");
                i(e);
            }, 20);
        };
        var i = function(e) {
            if (h !== document.activeElement) return;
            if (!m.isEnabled() || !gingerModule.get("widget").isEnabled()) return;
            b();
            W();
            if (!y) return;
            var t = gingerModule.get("widget.utils").cloneRepresentation(e);
            if (h.innerHTML == "") {
                $gingerWidgetJquery(h).html($gingerWidgetJquery(h).text());
            }
            var n = J(t);
            var r = false;
            var i = h.querySelectorAll(w);
            for (var o = 0; o < i.length; o++) {
                var a = i[o];
                var g = a.id.replace("gwmw-", "");
                if (!a.id || n.indexOf(g) === -1) {
                    if (!r) {
                        r = true;
                        x();
                    }
                    M(a);
                }
            }
            for (var s = 0; s < t.length; s++) {
                var l = t[s];
                if (l.correction && l.correction.Corrections.length) {
                    for (var c = 0; c < l.correction.Corrections.length; c++) {
                        var u = l.correction.Corrections[c];
                        var d = u && u.ignored;
                        var f = h.querySelector("#gwmw-" + u.id);
                        var v = S(h, e, l, u);
                        if (!f && !d && !v) {
                            if (!r) {
                                r = true;
                                x();
                            }
                            var p = $(h, l, u);
                            if (p) {
                                p.className = "ginger-module-highlighter-mistake-anim ginger-module-highlighter-mistake-type-" + u.Type;
                                p.id = "gwmw-" + u.id;
                                p.addEventListener("animationend", function(t) {
                                    return function(e) {
                                        $gingerWidgetJquery(t).removeClass("ginger-module-highlighter-mistake-anim");
                                    };
                                }(p), {
                                    once: true
                                }, true);
                            } else {
                                if (window.Raven && window.Raven && window.Raven.setExtraContext) {
                                    Raven.setExtraContext({
                                        innerHTML: h.innerHTML,
                                        sentence: l,
                                        correction: u
                                    });
                                    Raven.captureMessage("Couldn't wrap mistakeNode #1 (handled .className bug)", function(e, t) {});
                                }
                            }
                        } else if (v) {} else if (u.ignored) {
                            if (!r) {
                                r = true;
                                x();
                            }
                            M(f);
                        } else if (l.activeSentence && !q(u, l)) {
                            if (!r) {
                                r = true;
                                x();
                            }
                            M(f);
                            var p = $(h, l, u);
                            if (p) {
                                p.className = "ginger-module-highlighter-mistake-type-" + u.Type;
                                p.id = "gwmw-" + u.id;
                            } else {
                                if (window.Raven && window.Raven && window.Raven.setExtraContext) {
                                    Raven.setExtraContext({
                                        innerHTML: h.innerHTML,
                                        sentence: l,
                                        correction: u
                                    });
                                    Raven.captureMessage("Couldn't wrap mistakeNode #2 (handled .className bug)", function(e, t) {});
                                }
                            }
                        }
                    }
                }
            }
            h.normalize();
            if (r) C();
            setTimeout(T, 150);
        };
        var o = function() {
            return $gingerWidgetJquery(h).find(w);
        };
        var a = function(e) {
            if (!e) {
                s();
            }
            y = e;
        };
        var s = function() {
            setTimeout(function() {
                o().each(function(e, t, e) {
                    M(t);
                });
            });
        };
        var J = function(e) {
            var t = [];
            for (var n = 0; n < e.length; n++) {
                if (e[n].correction && e[n].correction.Corrections && e[n].correction.Corrections.length) {
                    for (var r = 0; r < e[n].correction.Corrections.length; r++) {
                        t.push(e[n].correction.Corrections[r].id);
                    }
                }
            }
            return t.sort();
        };
        var l = function(e) {
            m = e;
            h = m.element;
        };
        return {
            refresh: r,
            init: l,
            setVisibility: a,
            getMistakeElements: o,
            destroy: s,
            unit: {
                createMistakeTag: $,
                removeMistakeTag: M,
                saveSelection: x,
                restoreSelection: C,
                wrapSelection: g,
                isThereBlockElemDifference: e
            }
        };
    }, [ "widget.utils", "widget.selectionManager" ]);
})();

(function() {
    var e = gingerModule.load("widget.injector.draft", function() {
        var e = function() {
            var i = {};
            var o = function(e) {
                for (var t in e) {
                    if (t.indexOf("__reactInternalInstance") === 0) {
                        return e[t].memoizedProps || e[t]._currentElement.props;
                    }
                }
                return null;
            };
            var a = function(e) {
                e.defaultPrevented = false;
                e.target = document.activeElement;
                e.preventDefault = function() {};
                return e;
            };
            document.addEventListener("gingerModule-hasReactProp", function(e) {
                var t = e.detail;
                var n = !!o(t.element);
                t.cb(n);
            });
            document.addEventListener("gingerModule-eventEmitter-react-fire", function(e) {
                var t = o(document.activeElement);
                if (e.detail.event) {
                    var n = e.detail.event;
                    var r = e.detail.params ? a(e.detail.params) : {};
                    if (t && n && t[n]) {
                        t[n](r);
                    }
                } else if (e.detail.prop) {
                    if (t) {
                        t[e.detail.prop] = e.detail.value;
                    }
                }
            });
            document.addEventListener("gingerModule-eventEmitter-onpaste", function(e) {
                var t = o(document.activeElement);
                var n = a({
                    clipboardData: {
                        getData: function() {
                            return e.detail || "";
                        },
                        items: [ "text/plain" ]
                    }
                });
                if (t && t.onPaste) {
                    t.onPaste(n);
                }
            });
            document.addEventListener("gingerModule-eventEmitter-onkeydown", function(e) {
                var t = o(document.activeElement);
                var n = a(e.detail);
                if (t) {
                    t.onKeyDown(n);
                }
            });
            var e = function(e, t) {
                if (!i[e]) return;
                for (var n = 0; n < i[e].length; n++) {
                    var r = i[e][n];
                    r(new CustomEvent(e), t);
                }
            };
            var g = document.addEventListener.bind(document);
            document.addEventListener = function(e, t, n) {
                var r = i[e] || [];
                r.push(t);
                i[e] = r;
                g(e, t, n);
            };
        };
        return e;
    });
})();

(function() {
    var e = gingerModule.load("widget.injector", function() {
        var t = function(e, t, n) {
            if (!n) n = [];
            var r = e.createElement("script");
            var i = t.toString();
            r.innerHTML = "(function(){(" + i + ")(" + n.join(",") + ") })()";
            e.documentElement.appendChild(r);
        };
        var n = {};
        var e = function(e) {
            if (!n[e]) {
                n[e] = true;
                if (document.body) {
                    t(document, gingerModule.get(e), []);
                }
            }
        };
        return {
            injectOnce: e
        };
    }, [ "widget.rewriters.common" ]);
})();

(function() {
    var e = gingerModule.load("widget.injector.quill", function() {
        var e = function() {
            var g = function(e, t, n, r) {
                if (!n) n = 0;
                if (!r) r = [];
                if (n > 5) return null;
                for (var i in e) {
                    if (i === t) {
                        return e[i];
                    }
                    if (typeof e[i] === "object") {
                        var o = r.slice(0);
                        o.push(i);
                        var a = g(e[i], t, n + 1, o);
                        if (a) {
                            return a;
                        }
                    }
                }
                return null;
            };
            var r = function(t) {
                function n(e, t) {
                    if (typeof t !== "function" && t !== null) {
                        throw new TypeError("Super expression must either be null or a function, not " + typeof t);
                    }
                    e.prototype = Object.create(t && t.prototype, {
                        constructor: {
                            value: e,
                            enumerable: false,
                            writable: true,
                            configurable: true
                        }
                    });
                    if (t) Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t;
                }
                function r(e, t) {
                    if (!e) {
                        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    }
                    return t && (typeof t === "object" || typeof t === "function") ? t : e;
                }
                var i = function() {
                    n(e, t.imports["blots/inline"]);
                    function e() {
                        return r(this, (e.__proto__ || Object.getPrototypeOf(e)).apply(this, arguments));
                    }
                    return e;
                }();
                i.tagName = "GWMW";
                i.blotName = "ginger-inline";
                i.formats = function(e) {
                    return e.id;
                };
                t.register("formats/ginger-inline", i);
                var e = function() {
                    n(e, t.imports["blots/inline"]);
                    function e() {
                        return r(this, (i.__proto__ || Object.getPrototypeOf(e)).apply(this, arguments));
                    }
                    return e;
                }();
                e.tagName = "GWCPHB";
                e.blotName = "ginger-inline-ph";
                t.register("formats/ginger-inline-ph", e);
            };
            var i = false;
            var o = function() {
                if (i) return;
                try {
                    var e = g(window.Aura, "ComponentService.indexComponent");
                    var t = g(e, "lightning/quillLib");
                    var n = g(t, "Quill");
                    r(n);
                    i = true;
                    window.removeEventListener("click", o);
                } catch (e) {}
            };
            window.addEventListener("click", o);
            o();
        };
        return e;
    });
})();

(function() {
    var e = gingerModule.load("widget.inputFinder", function() {
        var t = {
            selector: "textarea, *[contenteditable]"
        };
        var n = $gingerWidgetJquery({});
        var r = [];
        var i = 5e3;
        var o = null;
        var a = function(e) {
            $field = $gingerWidgetJquery(e);
            var t = {};
            t.id = gingerModule.get("widget.utils").generateUID();
            $field.data("gingerWidgetFieldId", t.id);
            $field.gingerWidgetFieldId = t.id;
            r.push(e);
            n.trigger("new", $field.get(0));
        };
        var g = function(e) {
            var t = $gingerWidgetJquery(e);
            if (window.location.hostname === "www.linkedin.com") {
                if (t.attr("id") === "jobs-description") {
                    return true;
                } else if (t.hasClass("mentions-texteditor__contenteditable")) {
                    return true;
                }
            }
            if (window.location.hostname === "localhost") {
                if (t.attr("id") === "unittest-input-field-that-matches-override-criteria") {
                    return true;
                }
            }
            if (t.is(".cke_editable")) {
                return true;
            }
            return false;
        };
        var s = function() {
            if (gingerModule.get("widget").isEnabled()) {
                var n = $gingerWidgetJquery(document.activeElement);
                var e = gingerModule.get("widget.siteSettings").get(window.location.href, document.activeElement);
                if (n && !n.data("gingerWidgetFieldId") && n.attr("disableGinger") !== "true" && n.attr("data-ginger") !== "false" && (n.is(t.selector) || n.attr("contenteditable")) && !e.disabled) {
                    if (n.attr("spellcheck") !== "false" || g(document.activeElement)) {
                        gingerModule.get("widget.preFlightProbe").run(document.activeElement).then(function e() {
                            a(n);
                        }, function e(t) {
                            a(n);
                        });
                    }
                }
            } else {
                console.log("widget is disabled");
            }
        };
        var l = false;
        var e = function(e) {
            if (l) return;
            t = gingerModule.get("widget.utils").merge(t, e);
            s();
            o = setInterval(s, i);
            document.addEventListener("click", function() {
                setTimeout(s, 400);
            });
            l = true;
        };
        var c = function(e) {
            a(e);
            return e;
        };
        return {
            listen: n,
            refresh: s,
            feed: c,
            init: e
        };
    }, [ "widget.utils", "widget.siteSettings" ]);
})();

(function() {
    var e = gingerModule.load("widget.inputHandler", function() {
        var v;
        var p = [];
        var o = null;
        var t = null;
        var n = null;
        var r = 1500;
        var e = null;
        var i = 50;
        var a = null;
        var g = true;
        var s = null;
        var d = [];
        var m = function() {
            return gingerModule.get("widget.contentManager").getVal(v.element);
        };
        var l = function() {
            var e = gingerModule.get("widget.utils").isRichTextElement(v.element);
            if (e) {
                if ($gingerWidgetJquery(v.element).text() === $gingerWidgetJquery(v.element).attr("data-placeholder-default")) {
                    return "";
                } else {
                    return $gingerWidgetJquery(v.element).html().replace(/<[\/]?gwmw[^>]*>/gi, "");
                }
            } else {
                return $gingerWidgetJquery(v.element).val();
            }
        };
        var c = function(e) {
            gingerModule.get("widget.contentManager").setVal(v.element, e);
            setTimeout(function() {
                D();
                U(true);
            }, 200);
        };
        var f = function(e) {
            var t = h(e);
            return t !== null ? p[t] : null;
        };
        var h = function(e) {
            for (var t = 0; t < p.length; t++) {
                if (p[t].id === e) {
                    return t;
                }
            }
            return null;
        };
        var w = function(e) {
            for (var t = 0; t < p.length; t++) {
                if (p[t].correction && p[t].correction.Corrections) {
                    for (var n = 0; n < p[t].correction.Corrections.length; n++) {
                        var r = p[t].correction.Corrections[n];
                        if (r.id === e) {
                            return p[t];
                        }
                    }
                }
            }
            return null;
        };
        var y = function(e) {
            for (var t = 0; t < p.length; t++) {
                if (p[t].correction && p[t].correction.Corrections) {
                    for (var n = 0; n < p[t].correction.Corrections.length; n++) {
                        var r = p[t].correction.Corrections[n];
                        if (r.id === e) {
                            return r;
                        }
                    }
                }
            }
            return null;
        };
        var u = function(e) {
            return e.replace("gwmw-", "");
        };
        var b = function(e, t, n) {
            return gingerModule.get("widget.contentManager").setVal(v.element, e, t, n);
        };
        var $ = function(e) {
            var t = w(e);
            var n = 0;
            for (var r = 0; r < t.correction.Corrections.length; r++) {
                if (t.correction.Corrections[r].id === e) {
                    t.correction.Corrections.splice(r, 1);
                    r--;
                }
            }
            return t;
        };
        var x = function(e) {
            gingerModule.get("widget.api").addToDictionary(e, function(e) {});
        };
        var C = function(e) {
            var t = w(e);
            var n = y(e);
            var r = t.startsAt;
            var i = E(t, n.From, n.To + 1);
            var o = i.length - (n.To + 1 - n.From);
            $(n.id);
            b(i, r + n.From, r + n.To + 1);
            var a = gingerModule.get("widget.phraseService").getSentences(m(v.element));
            var g = a.length > p.length;
            if (g) {
                var s = h(t.id) + 1;
                var l = a[s - 1];
                var c = a[s];
                c.id = gingerModule.get("widget.utils").generateUID();
                c.correction = {
                    Corrections: []
                };
                p.splice(s, 0, c);
                for (var u = 0; u < t.correction.Corrections.length; u++) {
                    var d = t.correction.Corrections[u].From - t.text.length;
                    if (g && d > 0) {
                        var f = t.correction.Corrections[u];
                        f.From -= t.text.length;
                        f.To -= t.text.length;
                        f.UXFrgFrom -= t.text.length;
                        f.UXFrgTo -= t.text.length;
                        if (f.UXFrgFrom < 0) f.UXFrgFrom = 0;
                        c.correction.Corrections.push(f);
                        $(t.correction.Corrections[u].id);
                        u--;
                    }
                }
            }
            for (var u = 0; u < t.correction.Corrections.length; u++) {
                if (t.correction.Corrections[u].From > n.From) {
                    t.correction.Corrections[u].From += o;
                    t.correction.Corrections[u].To += o;
                    t.correction.Corrections[u].UXFrgFrom += o;
                    t.correction.Corrections[u].UXFrgTo += o;
                }
            }
            for (var u = 0; u < a.length; u++) {
                p[u].startsAt = a[u].startsAt;
                p[u].endsAt = a[u].endsAt;
                if (a[u].text !== p[u].text) {
                    p[u].text = a[u].text;
                }
            }
        };
        var M = function(e, t) {
            try {
                d.push({
                    result: e,
                    bubbleResultData: t,
                    representation: p
                });
                var n, r;
                if (e === "ignoreAll") {
                    r = f(t.sentenceId);
                    n = y(t.correctionId);
                    var i = r.correction.Corrections.length;
                    var o = [];
                    for (var a = 0; a < r.correction.Corrections.length; a++) {
                        var g = r.correction.Corrections[a];
                        if (g.From >= n.UXFrgFrom && g.To <= n.UXFrgTo) {
                            o.push(g);
                        }
                    }
                    for (var a = 0; a < o.length; a++) {
                        gingerModule.get("widget.correctionService").ignoreMistake(o[a], r, function() {});
                    }
                    U(true);
                } else if (e === "approve") {
                    C(t.correctionId);
                    v.highlighter.refresh(p);
                    v.stats.update(p);
                    gingerModule.get("widget.licenseLimits").approvalsUsed(1);
                } else if (e === "ignore") {
                    r = w(t.correctionId);
                    n = y(t.correctionId);
                    $(t.correctionId);
                    gingerModule.get("widget.correctionService").ignoreMistake(n, r);
                    U(true);
                } else if (e === "addToDictionary") {
                    r = w(t.correctionId);
                    n = y(t.correctionId);
                    var s = r.text.substring(n.From, n.To + 1);
                    x(s);
                    $(t.correctionId);
                    U(true);
                } else if (e === "approveAll") {
                    r = f(t.sentenceId);
                    n = y(t.correctionId);
                    var l = E(r, n.UXFrgFrom, n.UXFrgTo + 1);
                    var c = 0;
                    for (var a = 0; a < r.correction.Corrections.length; a++) {
                        if (r.correction.Corrections[a].From >= n.UXFrgFrom && r.correction.Corrections[a].To <= n.UXFrgTo) {
                            c++;
                            r.correction.Corrections.splice(a, 1);
                            a--;
                        }
                    }
                    var u = {
                        From: n.UXFrgFrom,
                        To: n.UXFrgTo,
                        UXFrgFrom: n.UXFrgFrom,
                        UXFrgTo: n.UXFrgTo,
                        Suggestions: [ {
                            Text: l
                        } ],
                        id: gingerModule.get("widget.utils").generateUID()
                    };
                    r.correction.Corrections.push(u);
                    C(u.id);
                    v.highlighter.refresh(p);
                    v.stats.update(p);
                    gingerModule.get("widget.licenseLimits").approvalsUsed(c);
                }
            } catch (e) {
                if (window.Raven && window.Raven.setExtraContext) {
                    Raven.captureException(e);
                } else {
                    if (console && console.error) console.error(e);
                    throw new Error(e);
                }
            }
        };
        var W = function(e) {
            var t = v.highlighter.getMistakeElements();
            var n = null;
            for (var r = 0; r < t.length && n === null; r++) {
                if (gingerModule.get("widget.utils").isMouseEventOverElement(e, t[r])) {
                    n = t[r];
                    return n;
                }
            }
            return null;
        };
        var T = function(r) {
            if (e) e = clearTimeout(e);
            e = setTimeout(function() {
                var e = W(r);
                if (e) {
                    var t = y(u($gingerWidgetJquery(e).attr("id")));
                    var n = w(t.id);
                    if (n.correction.checkType === "shallow") {
                        U(true, function() {
                            T(r);
                        });
                    } else {
                        gingerModule.get("widget.correctionBubble").show(t, n, M);
                        a = e;
                    }
                } else {
                    if (a) {
                        gingerModule.get("widget.correctionBubble").gracefulHide();
                    }
                }
            }, i);
        };
        var q = function() {
            $gingerWidgetJquery(v.element).on("mousemove", T);
        };
        var S = function() {
            $gingerWidgetJquery(v.element).off("mousemove", T);
        };
        var J = function(e) {
            t = e;
            if (e) {
                q();
            } else {
                S();
            }
        };
        var k = function() {
            if (n !== null) {
                n = clearTimeout(n);
            }
        };
        var F = function(e) {
            k();
            n = setTimeout(function() {
                U(true);
            }, e || r);
        };
        var N = function() {
            var e = gingerModule.get("widget.config").get("charLimit");
            if (e) {
                var t = m(v.element);
                if (t.length > e) {
                    c(t.substr(0, e));
                    if (console && console.log) console.log("Ginger Widget's max char limit reached", e);
                    v.events.listen.trigger("charLimit");
                    return false;
                }
            }
            return true;
        };
        var E = function(e, t, n) {
            var r = e.text;
            var i = 0;
            for (var o = 0; o < e.correction.Corrections.length; o++) {
                if (e.correction.Corrections[o].From >= t && e.correction.Corrections[o].To <= n - 1) {
                    var a = e.correction.Corrections[o].From;
                    var g = e.correction.Corrections[o].To + 1;
                    var s = e.correction.Corrections[o].Suggestions.length ? e.correction.Corrections[o].Suggestions[0].Text : e.text.substring(a, g);
                    r = r.substring(0, a + i) + s + r.substring(g + i);
                    i += s.length - (g - a);
                }
            }
            return r.substring(t, n + i);
        };
        var L = {};
        var I = function(e, t) {
            if (!L[e]) {
                L[e] = [];
            }
            var n = L[e];
            n.push(t);
            v.events.listen.on(e, t);
        };
        var A = function(e) {
            if (!L[e]) return;
            for (var t = 0; t < L[e].length; t++) {
                v.events.listen.off(e, L[e][t]);
            }
        };
        var R = function() {
            gingerModule.get("widget.correctionBubble").hide();
            $gingerWidgetJquery(v.element).attr("spellcheck", "true");
            $gingerWidgetJquery(v.element).data("gingerWidgetFieldId", null);
            v.highlighter.destroy();
            J(false);
            for (var e in L) {
                A(e);
            }
        };
        var j = function() {
            I("focus", function() {
                F();
            });
            I("blur", function() {
                setTimeout(function() {
                    gingerModule.get("widget.correctionBubble").hide();
                }, 1e3);
            });
            I("delete", function() {
                s = "delete";
                setTimeout(function() {
                    v.events.listen.trigger("inputchange");
                }, 50);
            });
            I("mouseover", function() {
                J(true);
            });
            I("mouseout", function() {
                J(false);
            });
            I("paste", function() {
                setTimeout(function() {
                    D();
                    U(true);
                }, 50);
            });
            I("inputchange", function(e) {
                D();
                var t = gingerModule.get("widget.utils").isRichTextElement(v.element);
                var n = t ? $gingerWidgetJquery(v.element).text() : $gingerWidgetJquery(v.element).val();
                if (/^\s*$/.test(n)) {
                    p = [];
                    v.stats.update([]);
                    v.highlighter.refresh([]);
                } else {
                    if (s == "sentence.end") {
                        U(true);
                    } else if (s == "word.end") {
                        U();
                        F();
                    } else if (s == "delete") {
                        v.highlighter.refresh(p);
                        v.stats.update(p);
                        F();
                    } else {
                        setTimeout(function() {
                            v.highlighter.refresh(p);
                            v.stats.update(p);
                            F();
                        }, 10);
                    }
                }
                s = null;
                v.stats.update(p);
            });
            I("sentence.end", function() {
                s = "sentence.end";
            });
            I("click", function() {
                s = "sentence.end";
                setTimeout(function() {
                    v.events.listen.trigger("inputchange");
                }, 50);
            });
            I("enter", function() {
                s = "sentence.end";
                setTimeout(function() {
                    v.events.listen.trigger("inputchange");
                }, 50);
            });
            I("word.end", function() {
                s = "word.end";
            });
            I("visibility.change", function(e, t) {
                if (g) {
                    v.highlighter.setVisibility(t);
                }
            });
        };
        var D = function() {
            N();
            var e = gingerModule.get("widget.phraseService").getRepresentation(v.element);
            var t = gingerModule.get("widget.utils").cloneRepresentation(p);
            var n = gingerModule.get("widget.correctionService").mergeCorrections(e, t);
            p = n;
            v.highlighter.refresh(p);
            v.stats.update(p);
            return p;
        };
        var U = function(e, t) {
            if (!g) return;
            if (!p.length) {
                v.highlighter.refresh(p);
                v.stats.update(p);
                if (t) t([]);
                return;
            }
            k();
            if (e) {
                for (var n = 0; n < p.length; n++) {
                    p[n].activeSentence = null;
                }
            }
            var r = gingerModule.get("widget.utils").cloneRepresentation(p);
            var i = new Date().getTime();
            o = i;
            gingerModule.get("widget.correctionService").correct(r, function e(t) {
                if (o !== i) {
                    return;
                }
                p = t;
                D();
            }, function e() {
                if (o !== i) {
                    return;
                }
                gingerModule.get("widget.correctionBubble").hide();
                if (t) t(p);
            });
        };
        var B = function() {
            v.element.focus();
        };
        var O = function() {
            c("");
            p = [];
            v.stats.update([]);
            v.highlighter.refresh([]);
        };
        var P = function() {
            if (!g) return;
            g = false;
            gingerModule.get("widget.correctionBubble").hide();
            $gingerWidgetJquery(v.element).attr("spellcheck", "true");
            v.highlighter.setVisibility(false);
            v.events.listen.trigger("enable.change", {
                enabled: false
            });
            v.events.listen.trigger("disabled");
        };
        var V = function() {
            if (g) return;
            g = true;
            $gingerWidgetJquery(v.element).attr("spellcheck", "false");
            v.highlighter.setVisibility(true);
            v.events.listen.trigger("enable.change", {
                enabled: true
            });
            v.events.listen.trigger("enabled");
            U(true);
        };
        var G = function(e) {
            e.setAttribute("spellcheck", "false");
            try {
                v = {
                    element: $gingerWidgetJquery(e).get(0),
                    id: $gingerWidgetJquery(e).data("gingerWidgetFieldId"),
                    events: null,
                    highlighter: null,
                    rewriter: null,
                    stats: null,
                    empty: O,
                    focus: B,
                    setVal: c,
                    getVal: m,
                    enable: V,
                    disable: P,
                    getFormattedVal: l,
                    getRepresentation: function() {
                        return p;
                    },
                    isEnabled: function() {
                        return g;
                    },
                    destroy: R,
                    unit: {
                        replaceInTextarea: b,
                        recheck: U,
                        updateRepresentation: D,
                        handleCorrectionBubbleResult: M,
                        flush: O
                    }
                };
                v.settings = gingerModule.get("widget.siteSettings").get(window.location.href, e);
                v.highlighter = new gingerModule.get(v.settings.highlighter, true)();
                v.stats = new gingerModule.get("widget.inputHandler.stats", true)();
                v.events = new gingerModule.get("widget.inputHandler.events", true)();
                v.events.init(v);
                v.highlighter.init(v);
                v.stats.init(e);
                if (v.settings.injection) {
                    gingerModule.get("widget.injector").injectOnce(v.settings.injection);
                }
                gingerModule.get("widget.onlinestatus").listen.on("online", function() {
                    U(true);
                    console.log("widget is back online");
                });
                gingerModule.get("widget.onlinestatus").listen.on("offline", function() {
                    console.warn("Ginger Widget is offline");
                });
                j();
                D();
                if (p.length) {
                    U(true);
                }
            } catch (e) {
                console.error(e);
            }
            return v;
        };
        return {
            init: G
        };
    }, [ "widget.utils", "widget.api", "widget.phraseService", "widget.correctionService", "widget.correctionBubble", "widget.inputHandler.events", "widget.inputHandler.stats", "widget.onlinestatus" ]);
})();

(function() {
    var e = gingerModule.load("widget.inputHandler.events", function() {
        var r = $gingerWidgetJquery({});
        var g;
        var s = function(e) {
            var t = String.fromCharCode(e);
            var n = "?!.";
            return e === 13 || n.indexOf(t) !== -1;
        };
        var i = function(e) {
            var t = String.fromCharCode(e);
            var n = /\s/;
            var r = t.match(n) !== null;
            var i = $gingerWidgetJquery(g);
            var o = gingerModule.get("widget.caret").get(i);
            var a = i.val().substr(o - 1, 1);
            return s(a.charCodeAt(0)) || a.match(n) ? false : r;
        };
        var o = {};
        var a = 800;
        var l = null;
        var c = function() {
            var e = a;
            if (l) l = clearTimeout(l);
            var t = gingerModule.get("widget.mutationDetectorService").getLayout(g);
            if (t.isVisible !== o.isVisible) {
                e = a;
                r.trigger("visibility.change", t.isVisible);
                if (t.isVisible) {
                    r.trigger("mutation", {
                        input: g
                    });
                }
            } else {
                var n = gingerModule.get("widget.mutationDetectorService").compareLayouts(t, o);
                if (n) {
                    r.trigger("mutation", {
                        input: g
                    });
                    e = 80;
                }
            }
            o = t;
            l = setTimeout(c, e);
        };
        var e = function(e) {
            g = e.element;
            var t = $gingerWidgetJquery(g);
            t.on("keypress", function(e) {
                if (s(e.which)) {
                    r.trigger("sentence.end", {
                        input: t
                    });
                } else if (i(e.which)) {
                    r.trigger("word.end", {
                        input: t
                    });
                }
            });
            t.bind("paste", function() {
                r.trigger("paste", {
                    input: t
                });
            });
            t.on("keyup", function(e) {
                if (e.which === 13) {
                    r.trigger("enter", {
                        input: t
                    });
                }
            });
            t.on("keydown", function(e) {
                if ([ 8, 46 ].indexOf(e.which) !== -1) {
                    r.trigger("delete", {
                        input: t
                    });
                } else if ([ 37, 38, 39, 40 ].indexOf(e.which) !== -1) {
                    r.trigger("inputchange", {
                        input: t
                    });
                } else if (e.which === 89 && e.ctrlKey) {
                    r.trigger("paste");
                } else if (e.which === 90 && e.ctrlKey) {
                    r.trigger("paste");
                }
            });
            t.focus(function() {
                r.trigger("focus", {
                    input: t
                });
            });
            t.blur(function() {
                r.trigger("blur", {
                    input: t
                });
            });
            t.scroll(function() {
                r.trigger("scroll", {
                    input: t
                });
            });
            t.mouseover(function() {
                r.trigger("mouseover", {
                    input: t
                });
            });
            t.mouseout(function() {
                r.trigger("mouseout", {
                    input: t
                });
            });
            t.keydown(function() {
                r.trigger("keydown", {
                    input: t
                });
            });
            c();
            var n = gingerModule.get("widget.utils").isRichTextElement(g);
            document.addEventListener("click", function() {
                mutationIntervals = [ 0, 50, 100, 200, 500 ];
                mutationIntervals.forEach(function(e) {
                    setTimeout(c, mutationIntervals);
                });
                r.trigger("click");
            });
            g.addEventListener("input", function() {
                r.trigger("inputchange", {
                    input: g
                });
            });
            t.on("paste", function(e) {
                if (e.which === 8 || e.which === 46) {
                    return true;
                }
                r.trigger("paste");
            });
        };
        return {
            listen: r,
            checkMutation: c,
            init: e
        };
    }, [ "widget.utils", "widget.caret", "widget.mutationDetectorService" ]);
})();

(function() {
    var e = gingerModule.load("widget.inputHandler.stats", function() {
        var n = $gingerWidgetJquery({});
        var o;
        var e = Math.random();
        var r;
        var i = function(e) {
            var t = {
                grammar: 0,
                spelling: 0
            };
            if (e && e.length) {
                for (var n = 0; n < e.length; n++) {
                    if (e[n].correction) {
                        for (var r = 0; r < e[n].correction.Corrections.length; r++) {
                            var i = e[n].correction.Corrections[r];
                            if (!i.ignored) {
                                if (i.Type === 3 || i.Type === 2) {
                                    t.grammar++;
                                } else {
                                    t.spelling++;
                                }
                            }
                        }
                    }
                }
            }
            return t;
        };
        var a = function(e) {
            var t = {
                words: 0,
                characters: 0,
                charactersWithSpace: 0,
                sentences: 0
            };
            var n = gingerModule.get("widget.contentManager").getVal(o);
            if (n && !n.match(/^\s+$/)) {
                var r = n.replace(/\d+/g, "").replace(/(^\s*|\s*$)/g, "").match(/([^\x00-\x7F]|\w)+/g);
                if (!r) r = [];
                if (r.length === 1 && r[0] == "") r = [];
                var i = n.replace(/\s+/g, "");
                t.words = r.length;
                t.characters = i.length;
                t.charactersWithSpace = n.length;
            }
            if (e && e.length) {
                t.sentences = e.length;
                if (e[e.length - 1].text.match(/^\s*$/)) {
                    t.sentences--;
                }
            }
            return t;
        };
        var t = function(e) {
            if (!e) return;
            try {
                var t = {};
                t.mistakes = i(e);
                t.count = a(e);
                r = t;
                n.trigger("changed", r);
            } catch (e) {
                console.error(e);
            }
        };
        var g = function() {
            return r;
        };
        var s = function(e) {
            o = e;
            t();
        };
        return {
            listen: n,
            update: t,
            init: s,
            get: g
        };
    }, [ "widget.utils" ]);
})();

(function() {
    var e = gingerModule.load("widget.licenseLimits", function() {
        var r = null;
        var t = $gingerWidgetJquery({});
        var i = function(e) {
            var t = r;
            r = e;
            o(t);
        };
        var n = function(t) {
            var n = $gingerWidgetJquery.Deferred();
            var e = gingerModule.get("widget.session").get();
            if (!gingerModule.get("widget.session").isLoggedIn()) {
                n.reject();
            } else {
                $gingerWidgetJquery.ajax({
                    url: "https://data.gingersoftware.com/clientdata/jsonSecured/GetApprovalCount",
                    data: {
                        apiKey: gingerModule.get("widget.config").get("apiKey"),
                        lang: gingerModule.get("widget.config").get("dialect"),
                        clientVersion: gingerModule.get("widget.config").get("clientVersion"),
                        userIdentifier: e.userId,
                        authToken: e.token
                    },
                    dataType: "json",
                    success: function(e) {
                        if (t) {
                            r = e.WeeklyApprovalsLeft;
                        } else {
                            i(e.WeeklyApprovalsLeft);
                        }
                        n.resolve(e.WeeklyApprovalsLeft);
                    }
                });
            }
            return n.promise();
        };
        var o = function(e) {
            if (e === null) return;
            if (r === -1) return;
            if (e >= 5 && r < 5 && r >= 1) {
                t.trigger("triggered.approaching");
            } else if (r < 1) {
                if (e > 0) {
                    t.trigger("triggered.exceeded");
                } else {
                    t.trigger("triggered.onbubble");
                }
            }
        };
        var e = function(e) {
            if (!e) {
                i(r);
                return;
            }
            var t = gingerModule.get("widget.session").get();
            if (gingerModule.get("widget.session").isLoggedIn()) {
                $gingerWidgetJquery.ajax({
                    url: "https://data.gingersoftware.com/clientdata/jsonSecured/UserApprovedCorrection",
                    data: {
                        numberOfApprovals: e,
                        userIdentifier: t.userId,
                        authToken: t.token,
                        apiKey: gingerModule.get("widget.config").get("apiKey"),
                        lang: gingerModule.get("widget.config").get("dialect"),
                        clientVersion: gingerModule.get("widget.config").get("clientVersion")
                    },
                    dataType: "json",
                    success: function(e) {
                        try {
                            i(e.WeeklyApprovalsLeft);
                        } catch (e) {
                            console.error(e);
                        }
                    }
                });
            } else {
                var n = r - e;
                if (n < 0) n = 0;
                i(n);
            }
        };
        var a = function() {
            return r === 0;
        };
        var g = function() {
            gingerModule.get("widget.session").listen.on("change", function(e, t) {
                if (!gingerModule.get("widget.session").isLoggedIn()) {
                    r = 10;
                } else {
                    r = null;
                    n(true);
                }
            });
            if (gingerModule.get("widget.session").isLoggedIn()) {
                n(true);
            } else {
                r = 10;
            }
        };
        g();
        return {
            approvalsUsed: e,
            isCapacityLimited: a,
            retrieveApprovalsLeft: n,
            listen: t
        };
    }, [ "widget.session", "widget.config" ]);
})();

(function() {
    var e = gingerModule.load("widget.mutationDetectorService", function(i) {
        var o = function(e) {
            if (e.tagName === "IFRAME") {
                e = e.contentWindow.document.body;
                var t = false;
                var n = e.ownerDocument.defaultView.getMatchedCSSRules(e, "");
                if (n && $gingerWidgetJquery.isArray(n)) {
                    for (var r = 0; r < n.length; r++) {
                        if (n[r].style.height) {
                            t = true;
                        }
                    }
                }
                if (t) return {
                    vertical: e.clientHeight + i.scrollbarWidth < e.scrollHeight,
                    horizontal: e.clientWidth < e.scrollWidth
                }; else return {
                    vertical: e.clientHeight + i.scrollbarWidth > e.scrollHeight,
                    horizontal: e.clientWidth < e.scrollWidth
                };
            } else {
                return {
                    vertical: e.clientHeight < e.scrollHeight,
                    horizontal: e.clientWidth < e.scrollWidth
                };
            }
        };
        var e = function(e) {
            var t = {
                height: 0,
                width: 0,
                top: 0,
                left: 0,
                node: e
            }, n = $gingerWidgetJquery(e);
            var r = n.hasClass("LW-avf");
            if (r) {
                try {
                    t.node = n.closest("table").closest("td").get(0);
                    var i = $gingerWidgetJquery(e.firstElementChild || e.firstChild);
                    if (i.length > 0) {
                        var o = getComputedStyle(i.get(0));
                        if (o) t.direction = o.direction;
                    }
                } catch (e) {}
            }
            return t;
        };
        var t = function(e) {
            if (!e) return;
            var t = {
                height: 0,
                width: 0,
                top: 0,
                left: 0,
                node: e
            };
            var n = $gingerWidgetJquery(t.node).offset();
            var r = o(t.node);
            return {
                height: $gingerWidgetJquery(t.node).outerHeight() + t.height,
                width: $gingerWidgetJquery(t.node).outerWidth() + t.width,
                direction: t.direction || $gingerWidgetJquery(t.node).css("direction"),
                top: (n ? n.top : 0) + t.top,
                left: (n ? n.left : 0) + t.left,
                hasVerticalScrollbar: r.vertical || $gingerWidgetJquery(t.node).css("overflow") == "scroll" || $gingerWidgetJquery(t.node).css("overflow-y") == "scroll" ? true : false,
                scrollTop: $gingerWidgetJquery(t.node).scrollTop(),
                scrollLeft: $gingerWidgetJquery(t.node).scrollLeft(),
                hasHorizontalScrollbar: r.horizontal || $gingerWidgetJquery(t.node).css("overflow") == "scroll" || $gingerWidgetJquery(t.node).css("overflow-x") == "scroll" ? true : false,
                isVisible: $gingerWidgetJquery(e).is(":visible"),
                fontSize: $gingerWidgetJquery(t.node).css("font-size")
            };
        };
        var n = function(e, t) {
            if (!t) {
                return true;
            }
            for (var n in e) {
                if (e[n] !== t[n]) {
                    return true;
                }
            }
            return false;
        };
        return {
            compareLayouts: n,
            getLayout: t
        };
    }, []);
})();

(function() {
    var e = gingerModule.load("widget.onlinestatus", function() {
        var t = $gingerWidgetJquery({});
        var n = true;
        var e = function() {
            window.addEventListener("online", function(e) {
                if (!n) {
                    t.trigger("online");
                }
                n = true;
            });
            window.addEventListener("offline", function(e) {
                if (n) {
                    t.trigger("offline");
                }
                n = false;
            });
            n = !!window.navigator.onLine;
        };
        var r = function() {
            return n;
        };
        e();
        return {
            listen: t,
            isOnline: r
        };
    }, [ "widget.report" ]);
})();

(function() {
    var e = gingerModule.load("widget.phraseService", function() {
        var f = /[\x1F]*[\s]*(([^.^!^?^\n^\x1F]|[.!?]+(?=\S)|(?=\x1F))+)([.!?\x1F]+(\n*(?=$))?|.*(?=[\n])|$|(?=\x1F))/gi;
        var v = /[^\x1F]+/g;
        var p = /\x1F/g;
        var e = /^\W+$/;
        var i = function(e) {
            if (!e) return [];
            var t = gingerModule.get("widget.utils").trimAndMatch(e);
            var n = t.text.match(f);
            if (!n) return [];
            n[0] = t.pre + n[0];
            n[n.length - 1] = n[n.length - 1] + t.post;
            var r = [];
            var i = 0;
            for (var o = 0; o < n.length; o++) {
                var a = n[o].match(/^[\x1F]+/);
                var g = n[o].match(/[\x1F]+$/);
                var s = a ? a.toString().replace(v, "").length : 0;
                var l = g ? g.toString().replace(v, "").length : 0;
                n[o] = n[o].replace(p, "");
                var c = i;
                var u = c + n[o].length;
                var d = {
                    text: n[o],
                    startsAt: c,
                    endsAt: u,
                    activeSentence: false,
                    id: gingerModule.get("widget.utils").generateUID(),
                    preLineBreakCount: s,
                    postLineBreakCount: l
                };
                d.words = m(d);
                r.push(d);
                i += n[o].length;
            }
            return r;
        };
        var o = function(e, t) {
            if (document.activeElement !== e) {
                return null;
            }
            if (!t) t = i($gingerWidgetJquery(e).val());
            try {
                var n = gingerModule.get("widget.caret").get(e);
            } catch (e) {
                return null;
            }
            for (var r = 0; r < t.length; r++) {
                if (t[r].startsAt <= n && t[r].endsAt >= n) {
                    return r;
                }
            }
            return null;
        };
        var t = function(e, t, n) {
            var r = [];
            if (!t) t = 0;
            if (typeof n === "undefined") n = e.text.length;
            var i = e.correction.Corrections;
            var o = 0;
            for (var a = 0; a < i.length; a++) {
                if (t <= i[a].From && n >= i[a].To) {
                    var g = t >= o ? t : o;
                    var s = t >= o ? t : o;
                    var l = e.text.substring(g, i[a].From);
                    var c = e.text.substring(i[a].From, i[a].To + 1);
                    r.push({
                        text: l
                    });
                    r.push({
                        text: c,
                        correction: i[a]
                    });
                }
                o = i[a].To + 1;
            }
            if (i[i.length - 1].To + 1 <= n) {
                var u = e.text.substring(i[i.length - 1].To + 1, n + 1);
                r.push({
                    text: u
                });
            }
            return r;
        };
        var m = function(e) {
            if (e.text.match(/^\s+$/)) return [];
            var t = e.text.match(/(^\s+)?\S+(\s*[.?!])?(\s+|$)/g);
            if (!t) return [];
            var n = [];
            for (var r = 0; r < t.length; r++) {
                var i = r == 0 ? e.startsAt : e.startsAt + t.slice(0, r).join("").length;
                var o = i + t[r].length;
                var a = {
                    text: t[r],
                    startsAt: i,
                    endsAt: o
                };
                n.push(a);
            }
            return n;
        };
        var n = function(e) {
            var t = gingerModule.get("widget.contentManager").getVal(e);
            var n = i(t);
            var r = o(e, n);
            if (r !== null) n[r].activeSentence = true;
            return n;
        };
        return {
            getSentences: i,
            getActiveSentence: o,
            getRepresentation: n,
            getSentenceFragments: t,
            getWordsOfSentence: m
        };
    }, [ "widget.contentManager", "widget.caret", "widget.utils" ]);
})();

(function() {
    var e = gingerModule.load("widget.preFlightProbe", function() {
        var r = function(e) {
            var t = $gingerWidgetJquery.Deferred();
            var n = $gingerWidgetJquery(e).closest("[data-reactroot], [data-reactid]");
            if (n.length) {
                t.reject("reactRTETest failed");
            } else {
                t.resolve();
            }
            return t.promise();
        };
        var i = function(t) {
            var n = $gingerWidgetJquery.Deferred();
            var e = $gingerWidgetJquery(t).contents().filter(function() {
                return this.nodeType == Node.TEXT_NODE;
            });
            var r = t;
            if (e.length) {
                r = e[0].parentNode;
            } else if ($gingerWidgetJquery(t).find("p").length) {
                r = $gingerWidgetJquery(t).find("p").eq(0);
            } else if ($gingerWidgetJquery(t).find("br").length) {
                r = $gingerWidgetJquery(t).find("br").eq(0).parent();
            }
            $gingerWidgetJquery("<gwmw style='display:none;'></gwmw>").appendTo(r);
            var i = document.createEvent("CustomEvent");
            i.initCustomEvent("input", true, true, null);
            t.dispatchEvent(i);
            setTimeout(function() {
                var e = $gingerWidgetJquery(t).find("gwmw");
                if (e.length) {
                    n.resolve();
                } else {
                    n.reject("injectionTest failed");
                }
                e.remove();
            }, 50);
            return n.promise();
        };
        var e = function(t) {
            var e = gingerModule.get("widget.siteSettings").get(window.location.href, t);
            if (e.highlighter === "widget.highlighters.inline") {
                return i(t).then(function() {
                    return r(t);
                }).catch(function(e) {
                    gingerModule.get("widget.report").report({
                        type: "ChromeExtPreFlightTestFail",
                        reason: e,
                        pageDomain: window.location.hostname,
                        areaFootprint: $gingerWidgetJquery(t).clone().html("").prop("outerHTML"),
                        application: "Chrome"
                    });
                    throw e;
                });
            } else {
                var n = $gingerWidgetJquery.Deferred();
                n.resolve();
                return n.promise();
            }
        };
        return {
            run: e
        };
    }, [ "widget.utils", "widget.report" ]);
})();

(function() {
    var e = gingerModule.load("widget.report", function() {
        var r = $gingerWidgetJquery({});
        var i = function() {
            return {
                widgetUid: gingerModule.get("widget.config").get("widgetUid"),
                type: "",
                ClientVersion: gingerModule.get("widget.config").get("version"),
                GingerUserName: "",
                affId: 1001,
                application: gingerModule.get("widget.config").get("platform")
            };
        };
        var o = {};
        var a = function(e) {
            var t = $gingerWidgetJquery.extend(i(), e);
            var n = {
                url: "https://tr.gingersoftware.com/trackingEP.php",
                method: "GET",
                timeout: 2e3,
                data: {
                    cmd: "reportEvents",
                    events: JSON.stringify([ {
                        payload: t,
                        source: gingerModule.get("widget.config").get("source")
                    } ])
                },
                cache: false,
                dataType: "text",
                contentType: "application/json",
                success: function(e) {
                    r.trigger("report.done", e);
                },
                error: function(e) {
                    r.trigger("report.fail", e);
                }
            };
            $gingerWidgetJquery.ajax(n);
            r.trigger("report.sent", n);
        };
        var e = function(e, t) {
            if (e.correction.Corrections && e.correction.Corrections.length) {
                for (var n = 0; n < e.correction.Corrections.length; n++) {
                    var r = e.correction.Corrections[n];
                    if (r.id === t) {
                        return r;
                    }
                }
            }
            return {};
        };
        var g = [ "", "Spelling", "Misused", "Grammar", "Synonym" ];
        var s = function(e) {
            var t = [];
            if (!e || !e.correction || !e.correction.Corrections) {
                return {};
            }
            for (var n = 0; n < e.correction.Corrections.length; n++) {
                var r = e.correction.Corrections[n];
                var i = r.Suggestions.length ? r.Suggestions[0] : null;
                t.push({
                    original: e.text.substring(r.From, r.To + 1),
                    suggestion: i ? i.Text : null,
                    confidenceLevel: r ? r.Confidence : null,
                    correctionType: g[r.Type],
                    learningCategory: r.TopLrnCatId
                });
            }
            return {
                sentence: e.text,
                corrections: e.correction.Corrections.length,
                correctionsDetails: t
            };
        };
        var l = function(e, t) {
            return {
                correctionType: g[t.Type],
                learningCategory: t.TopLrnCatId,
                token: e.text.substring(t.From, t.To + 1),
                suggestion: t.Suggestions.length ? t.Suggestions[0].Text : null,
                sentence: e.text
            };
        };
        var t = function(e) {
            a = e;
            gingerModule.get("widget.report").report = a;
        };
        var n = function() {
            gingerModule.get("widget.correctionBubble").listen.on("show", function(e, t) {
                var n = s(t.sentence);
                n.type = "bubbleOpen";
                n.pageUrl = window.location.href;
                a(n);
                if (!o[t.sentence.id]) {
                    o[t.sentence.id] = true;
                    n.type = "bubbleOpenUnique";
                    a(n);
                }
            });
            gingerModule.get("widget.correctionBubble").listen.on("hide", function(e, t) {
                var n = s(t.sentence);
                n.type = "bubbleClose";
                n.pageUrl = window.location.href;
                a(n);
            });
            gingerModule.get("widget.correctionBubble").listen.on("ignore.all", function(e, t) {
                var n = l(t.sentence, t.correction);
                n.type = "IgnoreCorrectionEvent";
                a(n);
            });
            gingerModule.get("widget.correctionBubble").listen.on("approve.all", function(e, t) {
                var n = s(t.sentence);
                n.type = "approveFragment";
                a(n);
            });
            gingerModule.get("widget.correctionBubble").listen.on("approved.mistake", function(e, t) {
                var n = l(t.sentence, t.correction);
                n.type = "ApproveSingleTokenInBubble";
                a(n);
            });
            gingerModule.get("widget.correctionBubble").listen.on("ignored.mistake", function(e, t) {
                var n = l(t.sentence, t.correction);
                n.type = "IgnoreSingleCorrection";
                a(n);
            });
            gingerModule.get("widget.api").listen.on("grammarcheck.sent", function() {
                a({
                    type: "GingerTheTextRTEvent"
                });
            });
            gingerModule.get("widget.api").listen.on("dictionary.added", function(e, t) {
                a({
                    word: t,
                    modification: "WordAddition",
                    type: "PersonalDictionaryModification"
                });
            });
        };
        n();
        return {
            listen: r,
            report: a,
            setReporter: t
        };
    }, [ "widget.correctionBubble", "widget.config", "widget.correctionService" ]);
})();

(function() {
    var e = gingerModule.load("widget.rewriters.common", function() {
        var r = 10;
        var i = null;
        var o = [];
        var a = function(e) {
            if (e) o.push(e);
            var t = !!i;
            if (t) {
                return;
            }
            var n = o.shift();
            n();
            if (o.length) {
                i = setTimeout(a, r);
            } else {
                i = null;
            }
            return n;
        };
        var e = function(e, t, n) {
            var r = $gingerWidgetJquery(t).closest(e);
            if ($gingerWidgetJquery(r).find(n)) {
                return r;
            } else {
                return null;
            }
        };
        var v = function(e) {
            var t, n = [], r = document.createTreeWalker(e, NodeFilter.SHOW_TEXT, null, false);
            while (t = r.nextNode()) {
                n.push(t);
            }
            return n;
        };
        var t = function(e) {
            var t = document;
            var n = e;
            var r, i;
            if (t.body.createTextRange) {
                r = document.body.createTextRange();
                r.moveToElementText(n);
                r.select();
            } else if (window.getSelection) {
                i = window.getSelection();
                r = document.createRange();
                r.selectNodeContents(n);
                i.removeAllRanges();
                i.addRange(r);
            }
            return r;
        };
        var n = function(e, t, n, r, i, o) {
            $gingerWidgetJquery(e).focus();
            var a = v(e);
            if (!a.length) {
                var g;
                g = e.appendChild(document.createTextNode(""));
                o(e, g, t);
                return;
            }
            var s = gingerModule.get("widget.utils").getNodeOffsetOfIndex(e, n, r);
            var l = false;
            for (var c = 0; c < a.length; c++) {
                var u = a[c].nodeValue;
                var d = a[c] == s.startNode;
                var f = a[c] == s.endNode;
                if (d) {
                    l = true;
                }
                if (l) {
                    if (d && f) {
                        o(e, a[c], u.substring(0, s.startNodeOffset) + t + u.substring(s.endNodeOffset));
                    } else if (d) {
                        o(e, a[c], u.substring(0, s.startNodeOffset) + t);
                    } else if (f) {
                        o(e, a[c], u.substring(s.endNodeOffset));
                    } else {
                        o(e, a[c], "");
                    }
                }
                if (f) {
                    break;
                }
            }
            return;
        };
        return {
            executeInQueue: a,
            selectText: t,
            contentEditableReplacer: n
        };
    });
})();

(function() {
    var e = gingerModule.load("widget.rewriters.contentEditable", function() {
        var e = function(e, t, n, r) {
            var i = "p,h1, h2, h3, h4, h5, h6,li,pre,address,blockquote,dl,div";
            if (document.activeElement !== e) e.focus();
            gingerModule.get("widget.selectionManager").saveSelection(e);
            var o = function(e, t, n) {
                $gingerWidgetJquery(t).replaceWith(n);
            };
            var a = gingerModule.get("widget.rewriters.common").contentEditableReplacer(e, t, n, r, i, o);
            gingerModule.get("widget.selectionManager").restoreSelection(e);
        };
        return {
            rewrite: e
        };
    }, [ "widget.rewriters.common" ]);
})();

(function() {
    var e = gingerModule.load("widget.rewriters.draft.ce", function() {
        return gingerModule.get("widget.rewriters.facebook.ce");
    }, [ "widget.rewriters.common", "widget.rewriters.facebook.ce" ]);
})();

(function() {
    var e = gingerModule.load("widget.rewriters.draft.textarea", function() {
        var e = function(e, t, n, r) {
            var i = $gingerWidgetJquery(e);
            i.get(0).select();
            var o = i.val().length;
            var a = i.val().substring(n, r);
            var g = i.val().substring(0, n) + t + i.val().substring(r, o);
            i.val(g);
            gingerModule.get("widget.rewriters.common").executeInQueue(function() {
                var e = new CustomEvent("gingerModule-eventEmitter-react-fire", {
                    detail: {
                        prop: "value",
                        value: g
                    }
                });
                document.dispatchEvent(e);
            });
            gingerModule.get("widget.rewriters.common").executeInQueue(function() {
                var e = new CustomEvent("gingerModule-eventEmitter-react-fire", {
                    detail: {
                        event: "onChange",
                        params: {
                            target: {
                                value: g
                            }
                        }
                    }
                });
                document.dispatchEvent(e);
            });
        };
        return {
            rewrite: e
        };
    }, [ "widget.rewriters.common" ]);
})();

(function() {
    var e = gingerModule.load("widget.rewriters.facebook.ce", function() {
        var e = {};
        var t = function(e, t, n, r) {
            var i = "[data-block='true']";
            var o = function(e, t, n) {
                var r = document.activeElement;
                gingerModule.get("widget.rewriters.common").executeInQueue(function() {
                    var e = new CustomEvent("gingerModule-eventEmitter-react-fire", {
                        detail: {
                            event: "onSelect"
                        }
                    });
                    gingerModule.get("widget.rewriters.common").selectText(t);
                    document.dispatchEvent(e);
                });
                gingerModule.get("widget.rewriters.common").executeInQueue(function() {
                    if (!n) {
                        var e = new CustomEvent("gingerModule-eventEmitter-onkeydown", {
                            detail: {
                                keyCode: 8,
                                which: 8,
                                charCode: 0,
                                type: "keydown"
                            }
                        });
                        document.dispatchEvent(e);
                    } else {
                        var t = new CustomEvent("gingerModule-eventEmitter-onpaste", {
                            detail: n
                        });
                        document.dispatchEvent(t);
                    }
                });
            };
            gingerModule.get("widget.rewriters.common").contentEditableReplacer(e, t, n, r, i, o);
        };
        return {
            rewrite: t
        };
    }, [ "widget.rewriters.common" ]);
})();

(function() {
    var e = gingerModule.load("widget.rewriters.plainTextContentEditable", function() {
        var e = function(e, t, n, r) {
            var i = "div, p";
            var o = function(e, t, n) {
                t.nodeValue = n;
            };
            var a = gingerModule.get("widget.rewriters.common").contentEditableReplacer(e, t, n, r, i, o);
        };
        return {
            rewrite: e
        };
    }, [ "widget.rewriters.common" ]);
})();

(function() {
    var e = gingerModule.load("widget.rewriters.textarea", function() {
        var e = function(e, t, n, r) {
            var i = $gingerWidgetJquery(e);
            var o = i.val().length;
            var a = i.val().substring(n, r);
            var g = i.val().substring(0, n) + t + i.val().substring(r, o);
            i.val(g);
        };
        return {
            rewrite: e
        };
    }, [ "widget.rewriters.common" ]);
})();

(function() {
    var e = gingerModule.load("widget.rewriters.whatsapp.ce", function() {
        var e = function(e, t, n, r) {
            var i = function(e, t, n) {
                t.nodeValue = n;
                var r = new CustomEvent("gingerModule-eventEmitter-react-fire", {
                    detail: {
                        event: "onInput"
                    }
                });
                document.dispatchEvent(r);
                var r = new CustomEvent("gingerModule-eventEmitter-react-fire", {
                    detail: {
                        event: "onFocus"
                    }
                });
                document.dispatchEvent(r);
                $gingerWidgetJquery(e).focus();
            };
            var o = gingerModule.get("widget.rewriters.common").contentEditableReplacer(e, t, n, r, null, i);
        };
        return {
            rewrite: e
        };
    }, [ "widget.rewriters.common" ]);
})();

(function() {
    var e = gingerModule.load("widget.selectionManager", function() {
        var e = function(e) {
            var t = gingerModule.get("widget.utils").isRichTextElement(e);
            if (t) {
                return n(e);
            } else {
                return r(e);
            }
        };
        var n = function(e) {
            $gingerWidgetJquery("gwcphb").remove();
            $gingerWidgetJquery("gwcphe").remove();
            var t = window.getSelection();
            if (t.rangeCount > 0) {
                var n = t.getRangeAt(0);
                var r = n.cloneRange();
                r.collapse(true);
                var i = document.createElement("gwcphb");
                r.insertNode(i);
                r.detach();
                if (!n.collapsed) {
                    var o = n.cloneRange();
                    o.collapse();
                    var a = document.createElement("gwcphe");
                    o.insertNode(a);
                    o.detach();
                }
            }
            return null;
        };
        var r = function() {};
        var t = function(e) {
            var t = gingerModule.get("widget.utils").isRichTextElement(e);
            if (t) {
                return i(e);
            } else {
                return o(e);
            }
        };
        var i = function(e) {
            var t = e.querySelector("gwcphb");
            var n = e.querySelector("gwcphe");
            if (!t && !n) return null;
            var r = document.createRange();
            r.setStartAfter(t);
            if (n) {
                r.setEndAfter(n);
            } else {
                r.collapse(true);
            }
            if (t) t.parentNode.removeChild(t);
            if (n) n.parentNode.removeChild(n);
            r.commonAncestorContainer.normalize();
            var i = window.getSelection();
            i.removeAllRanges();
            i.addRange(r);
            return r;
        };
        var o = function() {};
        return {
            saveSelection: e,
            restoreSelection: t
        };
    }, [ "widget.utils" ]);
})();

gingerModule.load("widget.session", function() {
    var n = $gingerWidgetJquery("<eventScope>");
    var r = null;
    var e = function(e) {
        return r && e ? r[e] : r;
    };
    var t = function(e) {
        var t = JSON.stringify(r) !== JSON.stringify(e);
        r = e ? e : null;
        if (t) {
            n.trigger("change", e);
        }
    };
    var i = function() {
        return r && !r.isAnonym;
    };
    return {
        get: e,
        set: t,
        isLoggedIn: i,
        listen: n
    };
});

(function() {
    var e = gingerModule.load("widget.siteSettings", function() {
        var u = {
            kdfieneakcjfaiglcfcgkidlkmlijjnh: {
                pages: {
                    "*": {
                        rewriter: {
                            richText: "widget.rewriters.contentEditable"
                        },
                        highlighter: {
                            richText: "widget.highlighters.inline"
                        }
                    }
                }
            },
            "web.whatsapp.com": {
                pages: {
                    "*": {
                        rewriter: {
                            richText: "widget.rewriters.whatsapp.ce"
                        },
                        highlighter: {
                            richText: "widget.highlighters.ghost"
                        }
                    }
                },
                injection: "widget.injector.draft"
            },
            "gingersoftware.com": {
                pages: {
                    "ginger-writer": {
                        disabled: true
                    }
                }
            },
            "twitter.com": {
                pages: {
                    "*": {
                        rewriter: {
                            richText: "widget.rewriters.plainTextContentEditable"
                        },
                        highlighter: {
                            richText: "widget.highlighters.ghost"
                        }
                    }
                }
            },
            "linkedin.com": {
                pages: {
                    "/messaging": {
                        postRewriteEvents: [ "input" ]
                    }
                }
            },
            "salesforce.com": {
                pages: {
                    "/messaging": {
                        postRewriteEvents: [ "input" ]
                    },
                    "layout=EmailTemplate": {
                        disabled: true
                    }
                },
                injection: "widget.injector.quill"
            },
            "lightning.force.com": {
                pages: {
                    "/messaging": {
                        postRewriteEvents: [ "input" ]
                    }
                },
                injection: "widget.injector.quill"
            },
            "mail.yahoo.com": {
                pages: {
                    "/d/compose": {
                        rewriter: {
                            richText: "widget.rewriters.contentEditable"
                        },
                        highlighter: {
                            richText: "widget.highlighters.inline"
                        }
                    }
                },
                injection: "widget.injector.quill"
            },
            "facebook.com": {
                pages: {
                    "*": {
                        rewriter: {
                            richText: "widget.rewriters.facebook.ce"
                        },
                        highlighter: {
                            richText: "widget.highlighters.ghost"
                        }
                    },
                    "/notes": {
                        disabled: true
                    }
                },
                injection: "widget.injector.draft"
            },
            "messenger.com": {
                pages: {
                    "*": {
                        rewriter: {
                            richText: "widget.rewriters.plainTextContentEditable"
                        },
                        highlighter: {
                            richText: "widget.highlighters.ghost"
                        }
                    }
                }
            },
            "work.fb.com": {
                pages: {
                    "*": {
                        rewriter: {
                            richText: "widget.rewriters.plainTextContentEditable"
                        },
                        highlighter: {
                            richText: "widget.highlighters.ghost"
                        }
                    }
                }
            },
            localhost: {
                pages: {
                    "/ginger-widget/quill-injector.html": {
                        injection: "widget.injector.quill"
                    }
                },
                selectors: {
                    "[ginger-debug-ghostarea]": {
                        rewriter: {
                            richText: "widget.rewriters.contentEditable"
                        },
                        highlighter: {
                            richText: "widget.highlighters.ghost"
                        }
                    },
                    "[unittest-area]": {
                        postRewriteEvents: [ "input" ]
                    }
                }
            },
            "business.facebook.com": {
                pages: {
                    "*": {
                        rewriter: {
                            richText: "widget.rewriters.plainTextContentEditable"
                        },
                        highlighter: {
                            richText: "widget.highlighters.ghost"
                        }
                    }
                }
            },
            "instagram.com": {
                pages: {
                    "*": {
                        rewriter: {
                            richText: "widget.rewriters.draft.textarea"
                        },
                        highlighter: {
                            richText: "widget.highlighters.ghost"
                        }
                    }
                },
                injection: "widget.injector.draft"
            },
            "*": {
                selectors: {
                    "#advanced-search": {
                        disabled: true
                    },
                    ".cke_editable": {
                        postRewriteEvents: [ "input" ]
                    }
                }
            },
            "airbnb.com": {
                disabled: true,
                name: "AirBnB"
            },
            "evernote.com": {
                disabled: true,
                name: "Evernote"
            },
            "slack.com": {
                disabled: true,
                name: "Slack"
            },
            "quora.com": {
                disabled: true,
                name: "Quora"
            },
            "paper.dropbox.com": {
                disabled: true,
                name: "Dropbox Paper"
            },
            "docs.google.com": {
                disabled: true,
                name: "Google Docs"
            },
            "hangouts.google.com": {
                disabled: true,
                name: "Google Hangouts"
            },
            "pinterest.com": {
                disabled: true,
                name: "Pinterest"
            },
            "drive.google.com": {
                disabled: true,
                name: "Google Drive"
            },
            "hootsuite.com": {
                disabled: true,
                name: "Hoot Suite"
            },
            "facebook.com/notes": {
                disabled: true,
                name: "Facebook Notes"
            },
            "onedrive.live.com": {
                disabled: true,
                name: "OneDrive"
            },
            "docs.com": {
                disabled: true,
                name: "Docs.com"
            },
            "sp.docs.com": {
                disabled: true,
                name: "Docs.com"
            },
            "texteditor.nsspot.net": {
                disabled: true,
                name: "Text Editor for Google Drive"
            },
            "jsbin.com": {
                disabled: true,
                name: "JSBin"
            },
            "jsfiddle.net": {
                disabled: true,
                name: "JsFiddle"
            },
            "mail.live.com": {
                disabled: true,
                name: "Live"
            },
            "messenger.yahoo.com": {
                disabled: true,
                name: "Yahoo Messenger"
            },
            "revealyourgift.com": {
                disabled: true,
                name: "Reveal Your Gift"
            },
            "imperavi.com": {
                disabled: true,
                name: "Imperavi"
            }
        };
        var d = function(e) {
            var t = e.match(/^([^:]+\:)\/\/(([^:\/?#]*)(?:\:([0-9]+))?)([\/]{0,1}[^?#]*)(\?[^#]*|)(#.*|)$/);
            return t && {
                href: e,
                protocol: t[1],
                host: t[2],
                hostname: t[3].replace(/^www\./, ""),
                port: t[4],
                pathname: t[5],
                search: t[6],
                hash: t[7]
            };
        };
        var f = function(e) {
            var t = $gingerWidgetJquery(e).closest("[data-reactroot]");
            if (t.length) {
                return true;
            }
            return false;
        };
        var v = function(e, t) {
            return e.indexOf(t, e.length - t.length) !== -1;
        };
        var e = function(e, t) {
            if (!e && !t) {
                return u;
            }
            if (!e) e = window.location.href;
            var n = d(e);
            var r = {
                rewriter: {
                    richText: "widget.rewriters.contentEditable",
                    plainText: "widget.rewriters.textarea"
                },
                highlighter: {
                    richText: "widget.highlighters.inline",
                    plainText: "widget.highlighters.ghost"
                }
            };
            if (!n) return r;
            if (t) {
                var i = gingerModule.get("widget.utils").isRichTextElement(t);
                var o = f(t);
                var a, g;
                if (o) {
                    if (i) {
                        r.rewriter.richText = "widget.rewriters.draft.ce";
                        r.highlighter.richText = "widget.highlighters.ghost";
                    } else {
                        r.rewriter.plainText = "widget.rewriters.draft.textarea";
                        r.highlighter.plainText = "widget.highlighters.ghost";
                    }
                    if (!r.injection) r.injection = "widget.injector.draft";
                }
            }
            if (/about:blank/i.test(e)) return r;
            for (var s in u) {
                if (s === "*" || v(n.hostname, s)) {
                    if (u[s].disabled) {
                        return $gingerWidgetJquery.extend(u[s], {
                            domainDisabled: true
                        });
                    }
                    if (u[s].injection) {
                        $gingerWidgetJquery.extend(r, {
                            injection: u[s].injection
                        });
                    }
                    if (u[s].pages) {
                        for (var l in u[s].pages) {
                            if (l === "*" || n.href.indexOf(l) >= 0) {
                                $gingerWidgetJquery.extend(r, u[s].pages[l]);
                            }
                        }
                    }
                    if (t && u[s].selectors) {
                        for (var c in u[s].selectors) {
                            if ($gingerWidgetJquery(t).is(c)) {
                                $gingerWidgetJquery.extend(r, u[s].selectors[c]);
                            }
                        }
                    }
                }
            }
            if (t) {
                if (gingerModule.get("widget.utils").isRichTextElement(t)) {
                    r.highlighter = r.highlighter.richText;
                    r.rewriter = r.rewriter.richText;
                } else {
                    r.highlighter = r.highlighter.plainText;
                    r.rewriter = r.rewriter.plainText;
                }
            }
            return r;
        };
        return {
            get: e
        };
    }, []);
})();

(function() {
    var e = gingerModule.load("widget.utils", function() {
        var e = function() {
            var e = new Date().valueOf().toString() + Math.random().toString().substr(2, 10);
            return e;
        };
        var t = function(e, t) {
            return JSON.stringify(e) === JSON.stringify(t);
        };
        var n = function(e) {
            var t = e;
            var n;
            var r = {};
            if (window.getComputedStyle) {
                var i = function(e, t) {
                    return t.toUpperCase();
                };
                n = window.getComputedStyle(t, null);
                for (var o = 0, a = n.length; o < a; o++) {
                    var g = n[o];
                    var s = g.replace(/\-([a-z])/g, i);
                    var l = n.getPropertyValue(g);
                    r[s] = l;
                }
                return r;
            }
            if (n = t.currentStyle) {
                for (var g in n) {
                    r[g] = n[g];
                }
                return r;
            }
            return e.css();
        };
        var r = function(e) {
            var t = window.document.defaultView.getComputedStyle(e).getPropertyValue("z-index");
            if (isNaN(t)) return window.getZIndex(e.parentNode);
            return t;
        };
        var i = function(e, t) {
            t = $gingerWidgetJquery(t);
            var n = t.offset();
            var r = t.width();
            var i = t.height();
            return e.pageX >= n.left && e.pageX <= n.left + r && e.pageY >= n.top && e.pageY <= n.top + i;
        };
        var o = function(e) {
            if ($gingerWidgetJquery(e).attr("contenteditable")) {
                return true;
            } else {
                return false;
            }
        };
        var a = function(e, t) {
            if (!e) e = {};
            for (var n in t) {
                e[n] = t[n];
            }
            return e;
        };
        var g = function(e) {
            return JSON.parse(JSON.stringify(e));
        };
        var s = /(^[\s\W]+)/;
        var l = /([\s\W]+$)/;
        var c = /(^[\s\W]+|[\s\W]+$)/g;
        var u = function(e) {
            var t = e.match(s) || [ "" ];
            var n = e.match(l) || [ "" ];
            return {
                text: e.replace(c, ""),
                post: n[0],
                pre: t[0]
            };
        };
        var d = function(e, t) {
            var n = 0;
            var r;
            for (var i = 0; i < t.length && i < e.length; i++) {
                if (e.substring(0, i) === t.substring(0, i)) {
                    n = i;
                } else {
                    break;
                }
            }
            for (var i = 0; i < t.length && i < e.length; i++) {
                if (e.substring(e.length - i, e.length) === t.substring(t.length - i, t.length)) {
                    r = i;
                } else {
                    break;
                }
            }
            return {
                preCommon: n,
                postCommon: r,
                diff: t.length - e.length,
                from: n,
                to: e.length - r
            };
        };
        var f = function(e) {
            var t, n = [], r = document.createTreeWalker(e, NodeFilter.SHOW_TEXT, null, false);
            while (t = r.nextNode()) {
                n.push(t);
            }
            return n;
        };
        var v = function(e, t, n) {
            if (typeof n == "undefined") n = t;
            var r = 0;
            var i = {
                startNode: null,
                startNodeOffset: 0,
                endNode: null,
                endNodeOffset: 0
            };
            var o = gingerModule.get("widget.utils").getTextNodesUnder(e);
            if (t === 0) {
                i.startNode = o[0];
                i.startNodeOffset = 0;
            }
            for (var a = 0; a < o.length; a++) {
                var g = o[a].nodeValue;
                if (t >= r && t <= r + g.length) {
                    if (g.length === t - r && o[a + 1]) {
                        tniOffset = 1;
                        while (o.length > a + tniOffset && o[a + tniOffset].nodeValue.length == 0) {
                            tniOffset++;
                        }
                        i.startNode = o[a + tniOffset];
                        i.startNodeOffset = 0;
                    } else {
                        i.startNode = o[a];
                        i.startNodeOffset = t - r;
                    }
                }
                if (n > r && n <= r + g.length) {
                    i.endNode = o[a];
                    i.endNodeOffset = n - r;
                }
                r = r + g.length;
            }
            return i;
        };
        var p = function(e) {
            if (!e || !e.length) return e;
            var t = [];
            for (var n = 0; n < e.length; n++) {
                t.push({
                    text: e[n].text,
                    startsAt: e[n].startsAt,
                    endsAt: e[n].endsAt,
                    activeSentence: e[n].activeSentence,
                    id: e[n].id,
                    preLineBreakCount: e[n].preLineBreakCount,
                    postLineBreakCount: e[n].postLineBreakCount,
                    words: e[n].words,
                    correction: e[n].correction
                });
            }
            return t;
        };
        return {
            merge: a,
            getNodeOffsetOfIndex: v,
            generateUID: e,
            isMouseEventOverElement: i,
            clone: g,
            cloneRepresentation: p,
            compareObjects: t,
            trimAndMatch: u,
            diffString: d,
            isRichTextElement: o,
            getTextNodesUnder: f,
            getStyleOfObject: n
        };
    });
})();

(function() {
    var e = gingerModule.load("widget", function() {
        var e;
        var r = $gingerWidgetJquery({});
        var i = [];
        var t = [];
        var n = [];
        var o = true;
        var a = [];
        var g = function(e) {
            var t = new gingerModule.get("widget.inputHandler", true);
            var n = t().init(e);
            i.push(n);
            r.trigger("input.added", n);
        };
        var s = function() {
            return i;
        };
        var l = function(e) {
            if (e.apiKey) gingerModule.get("widget.config").set("apiKey", e.apiKey);
            if (e.userId) gingerModule.get("widget.config").set("userId", e.userId);
            if (e.widgetUid) gingerModule.get("widget.config").set("widgetUid", e.widgetUid);
            if (e.apiKey) gingerModule.get("widget.config").set("apiKey", e.apiKey);
            if (e.affId) gingerModule.get("widget.config").set("affId", e.affId);
            if (e.dialect) gingerModule.get("widget.config").set("dialect", e.dialect);
            if (e.version) gingerModule.get("widget.config").set("version", e.version);
            if (e.source) gingerModule.get("widget.config").set("source", e.source);
            if (e.charLimit) gingerModule.get("widget.config").set("charLimit", e.charLimit);
            if (e.disableAddToDictionary) gingerModule.get("widget.config").set("disableAddToDictionary", e.disableAddToDictionary);
            gingerModule.get("widget.inputFinder").listen.on("new", function(e, t) {
                g(t);
            });
            $gingerWidgetJquery(document).ready(function() {
                gingerModule.get("widget.inputFinder").init(e.inputFinder);
            });
            if (console && console.log) console.log("Running Ginger Widget v" + gingerModule.get("widget.config").get("version"));
        };
        var c = function(e) {
            for (var t = 0; t < i.length; t++) {
                if (i[t].id === e) {
                    return t;
                }
            }
            return null;
        };
        var u = function(e) {
            var t = c(e);
            var n = i[t];
            if (t !== null) {
                n.destroy();
                i.splice(t, 1);
            }
            r.trigger("input.removed", n);
        };
        var d = function() {
            o = false;
            while (i.length) {
                u(i[0].id);
            }
        };
        var f = function() {
            o = true;
            gingerModule.get("widget.inputFinder").refresh();
        };
        var v = function() {
            return o;
        };
        return {
            getInputs: s,
            listen: r,
            disable: d,
            enable: f,
            remove: u,
            isEnabled: v,
            init: l
        };
    }, [ "widget.inputFinder", "widget.inputHandler", "widget.phraseService", "widget.api", "widget.config", "widget.report", "widget.licenseLimits" ]);
})();

gingerModule.load("gingerchromeext.browser", function() {
    return window.chrome;
});

angular.module("app.backgroundConnector", []);

angular.module("app.banner", []);

(function(e) {
    e.module("app.dictionary", []);
})(window.angular);

angular.module("app.favicon", []);

(function(e) {
    e.module("app.main", []);
})(window.angular);

angular.module("app.onlinestatus", []);

(function(e) {
    e.module("app.pd", []);
})(window.angular);

(function(e) {
    e.module("app.postmessage", []);
})(window.angular);

(function(e) {
    e.module("app.rephrase", []);
})(window.angular);

angular.module("app.report", []);

angular.module("app.session", []);

angular.module("app.storage", []);

(function(e) {
    e.module("app.synonyms", []);
})(window.angular);

(function(e) {
    e.module("app.translate", []);
})(window.angular);

(function(e) {
    e.module("app.writer", []);
})(window.angular);

Raven.config("https://124ddc57eb2740cc985d1e128a3ac476@sentry.io/128330", {
    release: "@@gitRevision"
}).addPlugin(Raven.Plugins.Angular).install();

var modules = [ "ngRaven", "app.config", "app.router", "app.rephrase", "app.translate", "app.synonyms", "app.dictionary", "app.postmessage", "app.writer", "app.templates", "app.favicon", "app.pd", "app.session", "app.storage", "app.main", "app.backgroundConnector", "app.report", "app.onlinestatus", "app.banner" ];

angular.module("app", modules).config([ "$httpProvider", function(e) {
    e.defaults.withCredentials = false;
    e.interceptors.push("requestInterceptor");
} ]).config([ "$compileProvider", function(e) {
    e.imgSrcSanitizationWhitelist(/^\s*((https?|ftp|file|blob|safari-extension|chrome-extension):|data:image\/)/);
} ]).config([ "$sceDelegateProvider", function(e) {
    e.resourceUrlWhitelist([ "https://**gingersoftware.com/**" ]);
} ]).factory("requestInterceptor", [ "$q", "$rootScope", function(t, n) {
    n.pendingRequests = 0;
    var r = function(e) {
        n.pendingRequests = e;
        n.$emit("pendingChange", e);
    };
    return {
        request: function(e) {
            r(n.pendingRequests + 1);
            return e || t.when(e);
        },
        requestError: function(e) {
            r(n.pendingRequests - 1);
            return t.reject(e);
        },
        response: function(e) {
            r(n.pendingRequests - 1);
            return e || t.when(e);
        },
        responseError: function(e) {
            r(n.pendingRequests - 1);
            return t.reject(e);
        }
    };
} ]);

angular.module("app.config", []).factory("configFactory", [ "backgroundConnectorFactory", "$rootScope", "$q", function(e, n, r) {
    var i = {
        apiKey: "BrowserStandalone",
        affId: "chromeExt"
    };
    n.config = i;
    var t = function() {
        var t = r.defer();
        e.call({
            module: "gingerchromeext.background.config",
            callFunction: "get"
        }, function(e) {
            if (e) {
                o(e);
            }
            t.resolve(i);
        });
        return t.promise;
    };
    var o = function(e, t) {
        if (angular.isUndefined(t)) {
            i = e;
        } else {
            i[e] = t;
        }
        n.config = i;
        return i;
    };
    var a = function(e) {
        return angular.isDefined(e) ? i[e] : i;
    };
    return {
        get: a,
        set: o,
        retrieve: t
    };
} ]);

(function(e) {
    e.module("app.backgroundConnector").factory("backgroundConnectorFactory", [ "$q", function(n) {
        var r = function(e, t) {
            try {
                gingerModule.get("gingerchromeext.browser").runtime.sendMessage(e, function(e) {
                    if (t) t(e);
                });
            } catch (e) {
                console.log(e);
            }
        };
        var i = function(e) {
            var t = n.defer();
            e.promise = true;
            r(e, function(e) {
                if (e.rejected) {
                    t.reject(e.result);
                } else {
                    t.resolve(e.result);
                }
            });
            return t.promise;
        };
        var e = function(n) {
            var e = function(e, t) {
                n.callArgs = e;
                if (n.promise) {
                    return i(n);
                } else {
                    return r(n, t);
                }
            };
            return e;
        };
        return {
            call: r,
            callPromise: i,
            proxy: e
        };
    } ]);
})(window.angular);

angular.module("app.banner").directive("gingerBanner", [ "gingerBannerService", "$sce", "$timeout", function(i, o, a) {
    function e(t, e, n) {
        t.banner = {};
        var r = function() {
            i.getBanner(t.placement).then(function(e) {
                e.url = o.trustAsResourceUrl(e.url);
                a(function() {
                    t.banner = e;
                });
            }, function() {
                t.banner = {};
            });
        };
        i.listen.$on("refresh", r);
        r();
    }
    return {
        link: e,
        scope: {
            placement: "@gingerBanner"
        },
        template: '<iframe class="ginger-banner-frame" style="width:{{banner.width}}px;height:{{banner.height}}px;" ng-src="{{banner.url}}"></iframe>'
    };
} ]).factory("gingerBannerService", [ "$rootScope", "backgroundConnectorFactory", function(e, t) {
    var n = e.$new(true);
    var r = function() {
        n.$emit("refresh");
    };
    return {
        listen: n,
        refresh: r,
        getBanner: t.proxy({
            module: "gingerchromeext.background.banners",
            callFunction: "getBanner",
            promise: true
        })
    };
} ]);

(function(i) {
    i.module("app.dictionary").controller("dictionaryController", [ "$scope", "reportingFactory", "dictionaryService", "$timeout", function(n, e, r, t) {
        n.dictionary = {
            phrase: "",
            error: null,
            seeAlso: []
        };
        n.dictionary.go = function() {
            e.reporter({
                type: "AppToolsUsage",
                location: "WriterPopup",
                tool: "WordDefinitions"
            });
            e.reporter({
                type: "WordDefinitionRequest"
            });
            r.define(n.dictionary.phrase).then(function(e) {
                for (var t = 0; t < e.DefsByWord.length; t++) {
                    n.dictionary.seeAlso = n.dictionary.seeAlso.concat(e.DefsByWord[t].SeeAlso);
                }
                n.dictionary.error = null;
                n.dictionary.result = e;
                if (!n.dictionary.result.DefsByWord.length) {
                    r.review(n.dictionary.phrase).then(function(e) {
                        try {
                            if (e.data.Corrections.length && i.isDefined(e.data.Corrections[0].Suggestions[0].Text)) {
                                n.didYouMean = e.data.Corrections[0].Suggestions[0].Text;
                            }
                        } catch (e) {}
                    }, function() {
                        n.didYouMean = "";
                    });
                }
            }, function(e) {
                n.dictionary.error = "Service is not available. Please Check your internet connection.";
                n.dictionary.result = [];
                if (console && console.error) console.error("Corrupt server response", e);
            });
        };
        if (n.main.sideMenuInitValue) {
            n.dictionary.phrase = n.main.sideMenuInitValue;
            n.main.sideMenuInitValue = null;
            n.dictionary.go();
        }
    } ]);
})(window.angular);

(function(c) {
    "use strict";
    c.module("app.dictionary").factory("dictionaryService", [ "$rootScope", "$http", "$q", "configFactory", "sessionFactory", function(e, r, a, g, s) {
        var l = e.$new(true);
        var t = function(e, t, n) {
            var o = a.defer();
            t = typeof t !== "undefined" ? t : false;
            n = typeof n !== "undefined" ? n : false;
            r({
                url: "https://services.gingersoftware.com/Ginger/correct/jsonSecured/GingerTheUserTextFull",
                params: {
                    text: e,
                    isOnTheFly: t,
                    apiKey: g.get("apiKey"),
                    userIdentifier: s.get("userId"),
                    clientVersion: g.get("clientVersion"),
                    lang: "US",
                    generateSynonyms: n
                },
                cache: true
            }).then(function e(t, n, r, i) {
                if (c.isUndefined(t.ExceptionType)) {
                    o.resolve({
                        success: true,
                        data: t
                    });
                } else {
                    o.reject();
                }
                l.$emit("get.completed", t);
            }, function e(t, n, r, i) {
                o.reject();
            });
            return o.promise;
        };
        var n = function(e) {
            l.$emit("get.sent");
            var i = a.defer();
            r({
                url: "https://services.gingersoftware.com/dictionary/jsonSecured/GetDefinitions",
                params: {
                    apiKey: g.get("apiKey"),
                    userIdentifier: s.get("userId"),
                    clientVersion: g.get("clientVersion"),
                    lang: "US",
                    word: e
                },
                cache: true
            }).then(function(e, t, n, r) {
                if (c.isUndefined(e.data.ExceptionType)) {
                    i.resolve(e.data);
                } else {
                    i.reject();
                }
                l.$emit("get.completed");
            }, function(e, t, n, r) {
                i.reject(e.data);
            });
            return i.promise;
        };
        return {
            define: n,
            review: t,
            listen: l
        };
    } ]);
})(window.angular);

(function(e) {
    e.module("app.favicon").factory("faviconFactory", [ "$q", "$sce", "$window", function(e, n, t) {
        var r = null;
        var i = null;
        var o = function() {
            return i;
        };
        var a = function() {
            return r;
        };
        var g = function() {
            return n.trustAsResourceUrl(gingerModule.get("gingerchromeext.browser").extension.getURL("assets/logo.png"));
        };
        var s = function() {
            var t = e.defer();
            if (r) {
                t.resolve(r);
                return t.promise;
            }
            try {
                gingerModule.get("gingerchromeext.browser").tabs.query({
                    active: true,
                    currentWindow: true
                }, function(e) {
                    if (e.length && e[0].url) {
                        i = e[0].url.match(/\/\/([^\/^?^#^:]+)/)[1];
                        if (e[0].favIconUrl && e[0].favIconUrl.match(/^https?/i)) {
                            r = n.trustAsResourceUrl(e[0].favIconUrl);
                        } else {
                            r = g();
                        }
                    } else {
                        r = g();
                    }
                    t.resolve(r);
                });
            } catch (e) {
                console.warn("chrome.tabs.query is not supported", e);
                r = g();
                t.resolve(r);
            }
            return t.promise;
        };
        return {
            getDefaultFaviconUrl: g,
            getFaviconUrl: a,
            getFaviconDomain: o,
            retrieveCurrentFaviconUrl: s
        };
    } ]);
})(window.angular);

(function(e) {
    e.module("app.main").controller("mainController", [ "$scope", "$transitions", "writerService", "rephraseService", "onlineStatusService", "$state", "faviconFactory", "sessionFactory", "postmessageFactory", "$timeout", "$window", "reportingFactory", "gingerBannerService", function(n, e, r, t, i, o, a, g, s, l, c, u, d) {
        n.stats = {};
        n.currentState = o.current.name;
        n.main = {};
        n.main.writer = "";
        n.main.favicon = a.getDefaultFaviconUrl();
        n.main.faviconDomain = a.getFaviconDomain();
        n.main.sidebar = {
            backDisabled: false
        };
        n.main.sideMenu = "translate";
        n.main.session = g.get();
        n.main.returnText = function() {
            if (n.main.sidebar.backDisabled) return;
            if (n.currentState === "main.rephrase") {
                t.passContentToWriter();
            }
            r.returnText();
        };
        r.listen.$on("stats.changed", function(e, t) {
            f(t);
        });
        t.listen.$on("stats.changed", function(e, t) {
            f(t);
        });
        r.listen.$on("text.set", function(e, t) {
            a.retrieveCurrentFaviconUrl().then(function(e) {
                n.main.favicon = e;
            });
            n.main.sideMenu = "translate";
        });
        var f = function(e) {
            l(function() {
                n.stats = e;
            });
        };
        var v = function() {
            gingerModule.get("gingerchromeext.browser").tabs.query({
                active: true,
                currentWindow: true
            }, function(e) {
                if (/gingersoftware\.com\/ginger-writer/.test(e[0].url)) {
                    l(function() {
                        n.main.sidebar.backDisabled = true;
                    });
                }
            });
        };
        g.listen.$on("change", function() {
            n.main.session = g.get();
        });
        e.onStart({}, function(e) {
            if (e.$to().name === "main.rephrase") {
                var t = r.getContents();
                if (t.replace(/<[^>]+>/g, "").replace(/&nbsp;/, " ").replace(/\s+/g, "").length === 0) {
                    return false;
                }
            }
            n.currentState = e.$to().name;
        });
        v();
        n.main.onlinestatus = i.isOnline() ? "online" : "offline";
        i.listen.$on("online", function() {
            l(function() {
                n.main.onlinestatus = "online";
            });
        });
        i.listen.$on("offline", function() {
            l(function() {
                n.main.onlinestatus = "offline";
            });
        });
        s.listen.$on("message.received/ginger.extension.translate", function(e, t) {
            l(function() {
                n.main.sideMenuInitValue = t.text;
                o.go("main.writer");
                r.empty();
                l(function() {
                    n.main.sideMenu = null;
                    l(function() {
                        n.main.sideMenu = "translate";
                    }, 100);
                });
            });
        });
        s.listen.$on("message.received/ginger.extension.synonyms", function(e, t) {
            n.main.sideMenuInitValue = t.text;
            o.go("main.writer");
            r.empty();
            l(function() {
                n.main.sideMenu = null;
                l(function() {
                    n.main.sideMenu = "synonyms";
                }, 100);
            });
        });
        s.listen.$on("message.received/ginger.extension.dictionary", function(e, t) {
            n.main.sideMenuInitValue = t.text;
            o.go("main.writer");
            r.empty();
            l(function() {
                n.main.sideMenu = null;
                l(function() {
                    n.main.sideMenu = "dictionary";
                }, 100);
            });
        });
    } ]);
})(window.angular);

(function(e) {
    e.module("app.main").directive("gingerSwitch", [ "postmessageFactory", function(e) {
        function t(e, t, n) {
            e.switch = {
                value: false
            };
            e.switch.toggle = function() {
                e.switch.value = !e.switch.value;
            };
        }
        return {
            link: t,
            scope: {
                switch: "=ngValue"
            },
            template: '<span ng-class="{active:switch.value}" ng-click="switch.toggle()" class="form-control-switch"><span class="form-control-switch-label">{{switch.value?"ON":"OFF"}} </span> <span class="form-control-switch-knob"></span></span>'
        };
    } ]);
})(window.angular);

(function(e) {
    e.module("app.main").filter("capitalize", function() {
        return function(e) {
            return !!e ? e.charAt(0).toUpperCase() + e.substr(1).toLowerCase() : "";
        };
    });
})(window.angular);

(function(e) {
    e.module("app.onlinestatus").factory("onlineStatusService", [ "$rootScope", "$timeout", function(e, t) {
        var n = e.$new(true);
        var r = true;
        gingerModule.get("widget.onlinestatus").listen.on("online", function(e) {
            n.$emit("online");
            r = true;
        });
        gingerModule.get("widget.onlinestatus").listen.on("offline", function(e) {
            n.$emit("offline");
            r = false;
        });
        return {
            listen: n,
            isOnline: function() {
                return r;
            }
        };
    } ]);
})(window.angular);

(function(e) {
    e.module("app.pd").controller("pdController", [ "$scope", "$state", "sessionFactory", "reportingFactory", "configFactory", "$sce", "$timeout", "postmessageFactory", function(r, e, i, t, o, a, n, g) {
        r.pd = {};
        var s = function() {
            var e = i.get();
            var t = [ "media=standalone-extv2", "widgetuid=" + o.get("widgetUid") ];
            var n = "https://www.gingersoftware.com/PersonalDictionary/" + e.token + "?" + t.join("&");
            r.pd.iframeSrc = a.trustAsResourceUrl(n);
        };
        var l = function() {
            i.isLoggedIn().then(function() {
                s();
                t.reporter({
                    type: "AppToolsUsage",
                    location: "WriterPopup",
                    tool: "PersonalDictionary"
                });
            }, function() {
                g.send({
                    cmd: "ginger.extension.inlineAuth.open"
                });
                i.listen.$on("login", function() {
                    n(function() {
                        l();
                    });
                });
            });
        };
        i.listen.$on("logout", function() {
            e.go("main.writer");
        });
        l();
    } ]);
})(window.angular);

(function(o) {
    o.module("app.postmessage").factory("postmessageFactory", [ "$window", "$rootScope", function(t, e) {
        var r = e.$new(true);
        var n = function(e) {
            r.$emit("message.recieved", e);
        };
        var i = function(e) {
            t.top.postMessage(o.toJson(e), "*");
        };
        t.addEventListener("message", function(t) {
            var n = "";
            try {
                n = o.fromJson(t.data);
            } catch (e) {
                n = t.data;
            }
            r.$emit("message.received", n);
            if (t.data && t.data.cmd) r.$emit("message.received/" + t.data.cmd, t.data.data);
        });
        i({
            cmd: "ginger.extension.writer.loaded"
        });
        return {
            listen: r,
            send: i,
            mock: n
        };
    } ]);
})(window.angular);

(function(e) {
    e.module("app.rephrase").controller("rephraseAreaController", [ "$scope", "rephraseService", function(e, t) {
        e.$on("$destroy", function() {
            t.passContentToWriter();
        });
    } ]).controller("rephraseController", [ "$scope", "$state", "$stateParams", "rephraseService", "sessionFactory", "postmessageFactory", "reportingFactory", function(n, r, e, i, t, o, a) {
        n.rephrase = {
            selectedIndex: null,
            result: null
        };
        var g = function() {
            n.rephrase.result = null;
            i.rephrase(i.getActiveSentence().text).then(function(e) {
                n.rephrase.result = e;
            });
        };
        o.listen.$on("message.received/ginger.inlineAuth.cancelled", function(e, t) {
            r.go("main.writer");
        });
        t.listen.$on("login", function() {
            g();
        });
        i.listen.$on("sentence.clicked", function() {
            g();
        });
        n.rephrase.step = function(e) {
            var t = i.stepRephraseActiveSentence(e === "backward" ? "backward" : "forward");
            n.rephrase.selectedIndex = t.activeRephrase;
            g();
        };
        n.rephrase.use = function(e) {
            n.rephrase.selectedIndex = e;
            i.applyRephrase(e);
        };
        n.rephrase.undo = function() {
            n.rephrase.selectedIndex = null;
            i.undo();
        };
        i.setContentFromWriter();
        t.isLoggedIn().then(function() {
            g();
        }, function() {
            o.send({
                cmd: "ginger.extension.inlineAuth.open"
            });
        });
    } ]);
})(window.angular);

(function(J) {
    J.module("app.rephrase").factory("rephraseService", [ "$rootScope", "$http", "$q", "$sce", "sessionFactory", "configFactory", "writerService", "reportingFactory", function(e, r, a, t, i, g, n, s) {
        var l = e.$new(true);
        var c = [];
        var o = function() {
            var e = gingerModule.get("widget.phraseService").getSentences(gingerModule.get("widget.contentManager").getVal(document.querySelector("#rephraser")));
            for (var t = 0; t < e.length; t++) {
                if (/^\s+$/.test(e[t].text)) {
                    e.splice(t, 1);
                }
            }
            return e;
        };
        var u = function() {
            c = o();
            console.log("rephraseRepresentation", c);
            for (var e = 0; e < c.length; e++) {
                var t = m(document.querySelector("#rephraser"), c[e]);
                c[e].master = t.innerHTML;
                c[e].activeRephrase = null;
                t.id = "gwsi-" + e;
                t.addEventListener("click", function() {
                    var e = parseInt(this.id.split("-")[1]);
                    f(e);
                    l.$emit("sentence.clicked", e);
                });
            }
            f(0);
        };
        var d = 0;
        var f = function(e) {
            J.element("#gwsi-" + d).removeClass("active");
            d = e;
            J.element("#gwsi-" + d).addClass("active");
            J.element("#gwsi-" + d).get(0).scrollIntoView(false);
            return c[e];
        };
        var v = function() {
            return c[d];
        };
        var p = function(e) {
            if (c.length) {
                if (e === "forward" && d < c.length - 1) {
                    return f(d + 1);
                } else if (e === "backward" && d > 0) {
                    return f(d - 1);
                } else {
                    return c[d];
                }
            }
        };
        var m = function(e, t) {
            var n = t.text.match(/^\s+/);
            var r = n ? n[0].length : 0;
            var i = t.text.match(/\s+$/);
            var o = i ? i[0].length : 0;
            var a = t.startsAt + r;
            var g = t.endsAt - o;
            var s = gingerModule.get("widget.utils").getNodeOffsetOfIndex(e, a, g);
            if (!s.startNode || !s.endNode) {
                return;
            }
            var l = h("gwrw", s.startNode, s.startNodeOffset, s.endNode, s.endNodeOffset);
            return l;
        };
        var h = function(e, t, n, r, i) {
            var o = document.createRange();
            try {
                o.setStart(t, n);
                o.setEnd(r, i);
            } catch (e) {
                console.error(e);
            }
            var a = document.createElement(e);
            a.appendChild(o.extractContents());
            o.insertNode(a);
            return a;
        };
        var w = function(s) {
            var l = a.defer();
            var c = [];
            r({
                url: "https://services.gingersoftware.com/rephrase/secured/rephrase",
                params: {
                    apiKey: g.get("apiKey"),
                    userIdentifier: i.get("userId"),
                    clientVersion: g.get("clientVersion"),
                    lang: g.get("dialect"),
                    s: s
                },
                cache: true
            }).then(function e(t, n, r, i, o) {
                var a = t.data.Sentences;
                for (var g = 0; g < a.length; g++) {
                    c.push({
                        from: 0,
                        to: s.length,
                        text: a[g].Sentence,
                        rephrase: a[g].Sentence
                    });
                }
                l.resolve(c);
            }, function e(t, n, r, i) {
                l.resolve(c);
            });
            return l.promise;
        };
        var y = function(e, t) {
            var n = e;
            var r = 0;
            console.log(t);
            for (var i = 0; i < t.length; i++) {
                if (t[i].Suggestions.length && t[i].Type !== 4) {
                    var o = t[i].Suggestions[0].Text;
                    n = n.slice(0, t[i].From + r) + t[i].Suggestions[0].Text + n.slice(t[i].To + 1 + r);
                    r += o.length - (t[i].To + 1 - t[i].From);
                }
            }
            return n;
        };
        var b = function(c) {
            var u = a.defer();
            x(c, false, true).then(function(e) {
                var t = [];
                if (e.success && e.data.Corrections) {
                    var n = e.data.Corrections;
                    var r = [];
                    var i = y(c, n);
                    var o = 0;
                    for (var a = 0; a < n.length; a++) {
                        if (n[a].Type === 4) {
                            for (var g = 0; g < n[a].Suggestions.length; g++) {
                                var s = n[a].Suggestions[g].Text;
                                var l = i.slice(0, n[a].From + o) + s + i.slice(n[a].To + 1 + o);
                                r.push({
                                    from: 0,
                                    to: c.length,
                                    text: l,
                                    rephrase: l
                                });
                            }
                        } else if (n[a].Suggestions.length) {
                            var s = n[a].Suggestions[0].Text;
                            o += s.length - (n[a].To + 1 - n[a].From);
                        }
                    }
                    u.resolve(r);
                } else {
                    u.resolve([]);
                }
            });
            return u.promise;
        };
        var $ = function(t) {
            var n = t.match(/^\s+/);
            if (n) t = t.slice(n[0].length);
            var r = t.match(/^\s+/);
            if (r) t = t.slice(0, r[0].length);
            var i = a.defer();
            var o = [];
            w(t).then(function(e) {
                o = e;
                return b(t);
            }).then(function(e) {
                o = o.concat(e);
                for (var t = 0; t < o.length; t++) {
                    if (n) o[t].text = n[0] + o[t].text;
                    if (r) o[t].text = o[t].text + r[0];
                }
                c[d].rephrases = o;
                i.resolve(o);
                l.$emit("get.completed", o);
                s.reporter({
                    type: "RephraseTheTextRTEvent"
                });
            });
            l.$emit("get.sent", {
                phrase: t
            });
            return i.promise;
        };
        var x = function(e, t, n) {
            var o = a.defer();
            t = typeof t !== "undefined" ? t : false;
            n = n || false;
            r.jsonp("https://services.gingersoftware.com/Ginger/correct/jsonSecured/GingerTheUserTextFull?" + [ "text=" + e, "isOnTheFly=" + t, "apiKey=" + g.get("apiKey"), "userIdentifier=" + i.get("userId"), "clientVersion=" + g.get("clientVersion"), "lang=US", "generateSynonyms=" + n ].join("&"), {
                cache: true
            }).then(function e(t, n, r, i) {
                if (J.isUndefined(t.data.ExceptionType)) {
                    o.resolve({
                        success: true,
                        data: t.data
                    });
                } else {
                    o.resolve({
                        success: false
                    });
                }
                l.$emit("get.completed", t.data);
            }, function e(t, n, r, i) {
                o.resolve({
                    success: false
                });
            });
            return o.promise;
        };
        var C = function(e) {
            c[d].activeRephrase = e;
            J.element("#gwsi-" + d).html(c[d].rephrases[e].text);
            S();
            s.reporter({
                type: "SubmitRephrase"
            });
            return c[d];
        };
        var M = function() {
            c[d].activeRephrase = null;
            J.element("#gwsi-" + d).html(c[d].master);
            S();
            return c[d];
        };
        var W = function() {
            var e = J.element("#rephraser");
            console.log("setContentFromWriter", n.getContents().replace(/<\/?gwmw[^>]*>/g, "").replace(/(&nbsp;)+$/, ""));
            e.html(n.getContents().replace(/<\/?gwmw[^>]*>/g, "").replace(/(&nbsp;)+$/, ""));
            u();
        };
        var T = function() {
            var e = J.element("#rephraser").html();
            e = e.replace(/<\/?gwrw[^>]*>/g, "");
            n.setContents(e);
        };
        var q = new gingerModule.get("widget.inputHandler.stats", true)();
        q.listen.on("changed", function(e, t) {
            l.$emit("stats.changed", t);
        });
        var S = function() {
            q.init(document.querySelector("#rephraser"));
            q.update(c);
        };
        return {
            setContentFromWriter: W,
            passContentToWriter: T,
            rephrase: $,
            stepRephraseActiveSentence: p,
            getActiveSentence: v,
            applyRephrase: C,
            undo: M,
            setActiveSentence: f,
            listen: l
        };
    } ]);
})(window.angular);

(function(e) {
    e.module("app.report").factory("reportingFactory", [ "backgroundConnectorFactory", function(e) {
        var t = e.proxy({
            module: "gingerchromeext.background.report",
            callFunction: "reporter"
        });
        var n = {};
        var r = function(e, t) {
            if (typeof t === "undefined") {
                return n[e];
            }
            n[e] = t;
            return n;
        };
        return {
            reporter: t,
            semafor: r
        };
    } ]);
})(window.angular);

(function(e) {
    e.module("app.session").factory("sessionFactory", [ "storageFactory", "configFactory", "backgroundConnectorFactory", "$rootScope", function(e, t, n, r) {
        var i = r.$new(true);
        var o = null;
        var a = function(e) {
            return o && e ? o[e] : o;
        };
        var g = n.proxy({
            module: "gingerchromeext.background.session",
            callFunction: "set",
            promise: true
        });
        var s = n.proxy({
            module: "gingerchromeext.background.session",
            callFunction: "isLoggedIn",
            promise: true
        });
        var l = n.proxy({
            module: "gingerchromeext.background.session",
            callFunction: "refresh",
            promise: true
        });
        var c = function() {
            n.callPromise({
                module: "gingerchromeext.background.session",
                callFunction: "refresh"
            }).then(function(e) {
                o = e;
                i.$emit("change");
            });
            e.listen.$on("change", function(e, t) {
                if ("session" in t) {
                    var n = t.session.newValue;
                    if (n && n.token) {
                        o = n;
                        i.$emit("login", n);
                    } else {
                        o = n;
                        i.$emit("logout");
                    }
                    i.$emit("change");
                }
            });
        };
        c();
        return {
            get: a,
            refresh: l,
            isLoggedIn: s,
            listen: i
        };
    } ]);
})(window.angular);

(function(e) {
    e.module("app.storage").factory("storageFactory", [ "$q", "$rootScope", "$window", function(i, e, t) {
        var n = e.$new(true);
        var r = function(e, t) {
            if (!e) return;
            var n = i.defer();
            var r = {};
            r[e] = t;
            gingerModule.get("gingerchromeext.browser").storage.sync.set(r, function() {
                n.resolve();
            });
            return n.promise;
        };
        var o = function(t) {
            var n = i.defer();
            gingerModule.get("gingerchromeext.browser").storage.sync.get(t, function(e) {
                n.resolve(e[t]);
            });
            return n.promise;
        };
        var a = function() {
            gingerModule.get("gingerchromeext.browser").storage.onChanged.addListener(function(e, t) {
                n.$emit("change", e);
            });
        };
        a();
        return {
            get: o,
            set: r,
            listen: n
        };
    } ]);
})(window.angular);

(function(e) {
    e.module("app.synonyms").controller("synonymsController", [ "$scope", "reportingFactory", "synonymsService", "configFactory", "$timeout", "backgroundConnectorFactory", function(t, e, n, r, i, o) {
        t.synonyms = {};
        t.synonyms.query = "";
        t.synonyms.didYouMean = {};
        t.synonyms.formDisabled = function() {
            return !t.synonyms.query;
        };
        t.synonyms.go = function() {
            e.reporter({
                type: "AppToolsUsage",
                location: "WriterPopup",
                tool: "Synonyms"
            });
            e.reporter({
                type: "SynonymsRequest"
            });
            t.synonyms.result = null;
            n.findSynonyms(t.synonyms.query).then(function(e) {
                n.listen.$emit("get.returned");
                t.synonyms.result = e.synonyms;
                t.synonyms.didYouMean = e.didYouMean;
                t.synonyms.error = null;
            }, function(e) {
                t.synonyms.result = null;
                t.synonyms.error = "Service is not available. Please Check your internet connection";
            });
        };
        if (t.main.sideMenuInitValue) {
            t.synonyms.query = t.main.sideMenuInitValue;
            t.main.sideMenuInitValue = null;
            t.synonyms.go();
        }
    } ]);
})(window.angular);

(function(a) {
    a.module("app.synonyms").factory("synonymsService", [ "$rootScope", "$http", "$q", "configFactory", "sessionFactory", function(e, r, o, s, l) {
        var c = e.$new(true);
        var t = function(a) {
            c.$emit("get.sent");
            var g = o.defer();
            r({
                url: "https://services.gingersoftware.com/dictionary/jsonSecured/GetSynonyms",
                params: {
                    apiKey: s.get("apiKey"),
                    userIdentifier: l.get("userId"),
                    clientVersion: s.get("clientVersion"),
                    lang: "US",
                    word: a
                }
            }).then(function e(t, n, r, i) {
                var o = t.data;
                if (!o.SynsByPos.length) {
                    u(a).then(function e(t) {
                        var n = "";
                        if (t.success && t.data.Corrections[0] && t.data.Corrections[0].Suggestions.length > 0) {
                            n = t.data.Corrections[0].Suggestions[0].Text;
                        }
                        g.resolve({
                            didYouMean: n,
                            synonyms: o
                        });
                    }, function e(t) {
                        g.reject({
                            success: false
                        });
                    });
                } else {
                    g.resolve({
                        synonyms: o
                    });
                }
                c.$emit("get.completed", o);
            }, function e(t, n, r, i) {
                g.reject({
                    success: false
                });
            });
            return g.promise;
        };
        var u = function(e, t, n) {
            var i = o.defer();
            t = typeof t !== "undefined" ? t : false;
            n = typeof n !== "undefined" ? n : false;
            r({
                url: "https://services.gingersoftware.com/Ginger/correct/jsonSecured/GingerTheUserTextFull",
                method: "GET",
                params: {
                    apiKey: s.get("apiKey"),
                    userIdentifier: l.get("userId"),
                    clientVersion: s.get("clientVersion"),
                    lang: "US",
                    text: e,
                    isOnTheFly: t,
                    generateSynonyms: n
                }
            }).then(function(e, t, n, r) {
                if (a.isUndefined(e.ExceptionType)) {
                    i.resolve(e);
                } else {
                    i.reject({
                        success: false
                    });
                }
                c.$emit("get.completed", e);
            }, function(e, t, n, r) {
                i.reject({
                    success: false
                });
            });
            return i.promise;
        };
        return {
            findSynonyms: t,
            listen: c
        };
    } ]);
})(window.angular);

(function(e) {
    e.module("app.translate").controller("translateController", [ "$scope", "$state", "translateService", "postmessageFactory", "$timeout", "reportingFactory", function(r, e, i, t, n, o) {
        var a = null;
        var g = {
            languageCode: "auto",
            languageName: "Detect Language"
        };
        r.translate = {
            auto: g,
            from: g,
            phrase: "",
            result: "",
            to: {
                languageCode: "en",
                languageName: "English"
            },
            supportedLanguages: [],
            ui: {
                openList: null
            }
        };
        r.$watch("translate.phrase", function(e, t) {
            if (e === "") {
                r.translate.result = "";
            }
        });
        r.translate.closeDropDown = function() {
            var e = r.translate.ui.openList;
            n(function() {
                if (r.translate.ui.openList == e) r.translate.ui.openList = null;
            }, 100);
        };
        i.getSupportedLanguages().then(function e(t) {
            r.translate.supportedLanguages = t;
        }, function e() {});
        r.translate.setTranslateLang = function(e, t) {
            n(function() {
                if (e == "from") {
                    r.translate.from = t;
                } else {
                    r.translate.to = t;
                }
                r.translate.closeDropDown();
            });
        };
        r.translate.go = function() {
            o.reporter({
                type: "AppToolsUsage",
                location: "WriterPopup",
                tool: "Translation"
            });
            if (r.translate.phrase.length > 1e3) {
                r.translate.phrase = r.translate.phrase.substring(0, 999);
            }
            if (r.translate.from.languageCode === "auto") {
                i.detect(r.translate.phrase).then(function(t) {
                    r.translate.detectedLanguage = {
                        languageCode: t,
                        languageName: i.getLanguageNameByCode(t)
                    };
                    i.translate(t, r.translate.to.languageCode, r.translate.phrase).then(function(e) {
                        n(function() {
                            r.translate.result = e.translatedText;
                        });
                    }, function(e) {
                        r.translate.result = t;
                    });
                }, function(e) {
                    r.translate.result = e;
                });
            } else {
                i.translate(r.translate.from.languageCode, r.translate.to.languageCode, r.translate.phrase).then(function(e) {
                    n(function() {
                        r.translate.result = e.translatedText;
                    });
                });
            }
        };
        r.translate.switch = function() {
            if (r.translate.from.languageCode == "auto") {
                if (r.translate.phrase.match(/^\s*$/)) {
                    return;
                }
                i.detect(r.translate.phrase).then(function(e) {
                    var t = {
                        languageCode: e,
                        languageName: i.getLanguageNameByCode(e)
                    };
                    r.translate.from = r.translate.to;
                    r.translate.to = t;
                    var n = r.translate.phrase;
                    r.translate.phrase = r.translate.result;
                    r.translate.result = n;
                }, function(e) {
                    r.translate.result = e;
                });
            } else {
                var e = r.translate.from;
                r.translate.from = r.translate.to;
                r.translate.to = e;
                e = r.translate.phrase;
                r.translate.phrase = r.translate.result;
                r.translate.result = e;
            }
        };
        if (r.main.sideMenuInitValue) {
            r.translate.phrase = r.main.sideMenuInitValue;
            r.main.sideMenuInitValue = null;
        }
    } ]);
})(window.angular);

(function(e) {
    "use strict";
    e.module("app.translate").factory("translateService", [ "$rootScope", "$http", "$q", "configFactory", "sessionFactory", "reportingFactory", function(e, i, o, a, g, s) {
        var t = e.$new();
        var l = "https://servicesht.gingersoftware.com/Translation/jsonsecured/";
        var n = [ {
            languageCode: "af",
            languageName: "Afrikaans"
        }, {
            languageCode: "sq",
            languageName: "Albanian"
        }, {
            languageCode: "ar",
            languageName: "Arabic"
        }, {
            languageCode: "az",
            languageName: "Azerbaijani"
        }, {
            languageCode: "eu",
            languageName: "Basque"
        }, {
            languageCode: "be",
            languageName: "Belarusian"
        }, {
            languageCode: "bn",
            languageName: "Bengali"
        }, {
            languageCode: "bg",
            languageName: "Bulgarian"
        }, {
            languageCode: "ca",
            languageName: "Catalan"
        }, {
            languageCode: "zh-CHS",
            languageName: "Chinese Simplified"
        }, {
            languageCode: "zh-CHT",
            languageName: "Chinese Traditional"
        }, {
            languageCode: "hr",
            languageName: "Croatian"
        }, {
            languageCode: "cs",
            languageName: "Czech"
        }, {
            languageCode: "da",
            languageName: "Danish"
        }, {
            languageCode: "nl",
            languageName: "Dutch"
        }, {
            languageCode: "en",
            languageName: "English"
        }, {
            languageCode: "eo",
            languageName: "Esperanto"
        }, {
            languageCode: "et",
            languageName: "Estonian"
        }, {
            languageCode: "tl",
            languageName: "Filipino"
        }, {
            languageCode: "fi",
            languageName: "Finnish"
        }, {
            languageCode: "fr",
            languageName: "French"
        }, {
            languageCode: "gl",
            languageName: "Galician"
        }, {
            languageCode: "ka",
            languageName: "Georgian"
        }, {
            languageCode: "de",
            languageName: "German"
        }, {
            languageCode: "el",
            languageName: "Greek"
        }, {
            languageCode: "gu",
            languageName: "Gujarati"
        }, {
            languageCode: "ht",
            languageName: "Haitian Creole"
        }, {
            languageCode: "he",
            languageName: "Hebrew"
        }, {
            languageCode: "hi",
            languageName: "Hindi"
        }, {
            languageCode: "hu",
            languageName: "Hungarian"
        }, {
            languageCode: "is",
            languageName: "Icelandic"
        }, {
            languageCode: "id",
            languageName: "Indonesian"
        }, {
            languageCode: "ga",
            languageName: "Irish"
        }, {
            languageCode: "it",
            languageName: "Italian"
        }, {
            languageCode: "ja",
            languageName: "Japanese"
        }, {
            languageCode: "kn",
            languageName: "Kannada"
        }, {
            languageCode: "ko",
            languageName: "Korean"
        }, {
            languageCode: "la",
            languageName: "Latin"
        }, {
            languageCode: "lv",
            languageName: "Latvian"
        }, {
            languageCode: "lt",
            languageName: "Lithuanian"
        }, {
            languageCode: "mk",
            languageName: "Macedonian"
        }, {
            languageCode: "ms",
            languageName: "Malay"
        }, {
            languageCode: "mt",
            languageName: "Maltese"
        }, {
            languageCode: "no",
            languageName: "Norwegian"
        }, {
            languageCode: "fa",
            languageName: "Persian"
        }, {
            languageCode: "pl",
            languageName: "Polish"
        }, {
            languageCode: "pt",
            languageName: "Portuguese"
        }, {
            languageCode: "ro",
            languageName: "Romanian"
        }, {
            languageCode: "ru",
            languageName: "Russian"
        }, {
            languageCode: "sr",
            languageName: "Serbian"
        }, {
            languageCode: "sk",
            languageName: "Slovak"
        }, {
            languageCode: "sl",
            languageName: "Slovenian"
        }, {
            languageCode: "es",
            languageName: "Spanish"
        }, {
            languageCode: "sw",
            languageName: "Swahili"
        }, {
            languageCode: "sv",
            languageName: "Swedish"
        }, {
            languageCode: "ta",
            languageName: "Tamil"
        }, {
            languageCode: "te",
            languageName: "Telugu"
        }, {
            languageCode: "th",
            languageName: "Thai"
        }, {
            languageCode: "tr",
            languageName: "Turkish"
        }, {
            languageCode: "uk",
            languageName: "Ukrainian"
        }, {
            languageCode: "ur",
            languageName: "Urdu"
        }, {
            languageCode: "vi",
            languageName: "Vietnamese"
        }, {
            languageCode: "cy",
            languageName: "Welsh"
        }, {
            languageCode: "yi",
            languageName: "Yiddish"
        } ];
        var r = function() {
            var t = o.defer();
            var e = l + "GetSupportedLanguageList";
            i({
                url: e,
                method: "GET",
                params: {
                    apiKey: a.get("apiKey"),
                    clientVersion: a.get("clientVersion")
                }
            }).then(function(e) {
                n = e.data;
                t.resolve(e.data);
            }, function(e) {
                t.resolve();
            });
            return t.promise;
        };
        var c = function(e) {
            for (var t = 0; t < n.length; t++) {
                if (e === n[t].languageCode) {
                    return n[t].languageName;
                }
            }
            return null;
        };
        var u = function(e, t) {
            var r = o.defer();
            i({
                url: l + "DetectLanguage",
                method: "GET",
                params: {
                    apiKey: a.get("apiKey"),
                    clientVersion: a.get("clientVersion"),
                    userIdentifier: g.get("userId"),
                    text: e
                }
            }).then(function(e) {
                if (e.data.detectedLanguageCode === "Undefined") {
                    e.data.detectedLanguageCode = null;
                    return;
                }
                r.resolve(e.data.detectedLanguageCode);
            }, function(e, t, n) {
                r.reject("Service is not available. Please Check your internet connection");
            });
            return r.promise;
        };
        var d = function(t, n, e) {
            var r = o.defer();
            t = t || "en";
            n = n || "en";
            e = e || "";
            if (e.length > 1e3) {
                e = e.substr(0, 1e3);
            }
            if (!e) {
                r.reject("Please provide a phrase to translate.");
            } else {
                i({
                    url: l + "TranslateText",
                    method: "GET",
                    params: {
                        apiKey: a.get("apiKey"),
                        clientVersion: a.get("clientVersion"),
                        userIdentifier: g.get("userId"),
                        fromLanguage: t,
                        toLanguage: n,
                        textToTranslate: e
                    }
                }).then(function(e) {
                    if (e.ExceptionType) {
                        r.reject(e.Message.split("Exception: ")[1]);
                    } else {
                        s.reporter({
                            type: "TranslationRequest",
                            OriginalLanguage: t,
                            DestinationLanguage: n,
                            CharsNum: e.data.translatedText.length,
                            TokensNum: e.data.translatedText.split(/\s/).length,
                            ServiceProvider: e.data.translationEngine
                        });
                        r.resolve(e.data);
                    }
                }, function(e) {
                    r.reject("Service is not available. Please Check your internet connection");
                });
            }
            return r.promise;
        };
        var f = function(e) {
            if (!e) return false; else return /^(ar|he|fa)$/.test(e);
        };
        return {
            getSupportedLanguages: r,
            getLanguageNameByCode: c,
            detect: u,
            translate: d,
            isRTL: f,
            listen: t
        };
    } ]);
})(window.angular);

(function(e) {
    e.module("app.writer").controller("writerController", [ "$scope", "writerService", "reportingFactory", "$timeout", function(e, t, n, r) {
        gingerModule.get("widget.inputFinder").feed("#writer");
        e.writer = {
            mode: "writer",
            rephraseSentenceIndex: 0
        };
        e.$on("$destroy", function() {
            t.saveContents();
        });
        if (!n.semafor("skippedFirstEditorAppToolsUsage")) {
            n.semafor("skippedFirstEditorAppToolsUsage", true);
        } else {
            n.reporter({
                type: "AppToolsUsage",
                location: "WriterPopup",
                tool: "Editor"
            });
        }
        t.restoreContents();
    } ]);
})(window.angular);

(function(x) {
    x.module("app.writer").factory("writerService", [ "reportingFactory", "storageFactory", "configFactory", "sessionFactory", "gingerBannerService", "$state", "$http", "$q", "postmessageFactory", "$timeout", "$rootScope", "faviconFactory", function(r, e, t, n, i, o, a, g, s, l, c, u) {
        var d = c.$new(true);
        var f = "";
        var v = null;
        gingerModule.get("widget.report").setReporter(function(e) {
            r.reporter(e);
        });
        gingerModule.get("widget.session").set(n.get());
        gingerModule.get("widget").init({
            inputFinder: {
                selector: null
            },
            charLimit: null,
            version: t.get("clientVersion"),
            apiKey: t.get("apiKey"),
            source: t.get("source"),
            userId: n.get().userId,
            widgetUid: t.get("widgetUid"),
            dialect: t.get("dialect"),
            token: n.get().token
        });
        gingerModule.get("widget").listen.on("input.added", function() {
            v = gingerModule.get("widget").getInputs().pop();
            v.stats.listen.on("changed", function(e, t) {
                d.$emit("stats.changed", t);
            });
        });
        e.listen.$on("change", function(e, t) {
            if ("dialect" in t) {
                gingerModule.get("widget.config").set("dialect", t["dialect"].newValue);
            }
        });
        n.listen.$on("change", function() {
            gingerModule.get("widget.session").set(n.get());
            i.refresh();
        });
        s.listen.$on("message.received/ginger.extension.setText", function(e, n) {
            o.go("main.writer");
            r.reporter({
                type: "AppToolsUsage",
                location: "WriterPopup",
                tool: "Editor"
            });
            l(function() {
                var t;
                try {
                    t = JSON.parse(n.cache);
                } catch (e) {
                    t = [];
                }
                if (v) v.events.checkMutation();
                gingerModule.get("widget.api").restoreCorrectionCache(t);
                gingerModule.get("widget.correctionService").setIgnoredWords(n.ignoredWords);
                gingerModule.get("widget.licenseLimits").retrieveApprovalsLeft(true);
                y(n.text);
                d.$emit("text.set", n);
            });
        });
        gingerModule.get("widget.licenseLimits").listen.on("triggered.approaching", function() {
            p("approaching");
        });
        gingerModule.get("widget.licenseLimits").listen.on("triggered.exceeded", function() {
            p("exceeded");
        });
        gingerModule.get("widget.licenseLimits").listen.on("triggered.onbubble", function() {
            p("onbubble");
        });
        gingerModule.get("widget.correctionBubble").listen.on("limited.approve.all", function() {
            p("onbubble");
        });
        gingerModule.get("widget.correctionBubble").listen.on("limited.approve", function() {
            p("onbubble");
        });
        gingerModule.get("widget.correctionBubble").listen.on("approved.mistake", function() {
            s.send({
                cmd: "ginger.extension.pollMessage"
            });
        });
        gingerModule.get("widget.correctionBubble").listen.on("approve.all", function() {
            s.send({
                cmd: "ginger.extension.pollMessage"
            });
        });
        gingerModule.get("widget.correctionBubble").listen.on("unauthenticated.approve", function() {
            s.send({
                cmd: "ginger.extension.inlineAuth.open"
            });
        });
        gingerModule.get("widget.correctionBubble").listen.on("unauthenticated.approve.all", function() {
            s.send({
                cmd: "ginger.extension.inlineAuth.open"
            });
        });
        gingerModule.get("widget.correctionBubble").listen.on("unauthenticated.addToDictionary", function() {
            s.send({
                cmd: "ginger.extension.inlineAuth.open"
            });
        });
        var p = function(e) {
            s.send({
                cmd: "ginger.extension.licenseLimits",
                type: e
            });
        };
        var m = function() {
            f = x.element(v.element).html();
            v.destroy();
        };
        var h = function() {
            if (v) {
                return x.element(v.element).html();
            } else {
                return f;
            }
        };
        var w = function() {
            x.element(v.element).html("");
            v.setVal(f);
            if (v) v.focus();
        };
        var y = function(e) {
            f = e;
            if (v) {
                w();
            }
        };
        var b = function() {
            y("");
            v.empty();
        };
        var $ = function() {
            var e = String(h()).replace(/<(?:.|\n)*?>/gm, "");
            r.reporter({
                type: "ReturnTextFromPopup",
                Characters: e.length,
                Words: e.split(" ").length,
                Sentences: e.replace(/\w[.?!](\s|$)/g, "$1|").split("|").length - 1
            });
            var t = h();
            t = t.replace(/<\/?gwmw[^>]*>/g, "");
            s.send({
                cmd: "ginger.extension.returnText",
                text: t,
                cache: gingerModule.get("widget.api").dumpCorrectionCache(),
                ignoredWords: gingerModule.get("widget.correctionService").getIgnoredWords()
            });
            b();
        };
        return {
            getContents: h,
            restoreContents: w,
            setContents: y,
            saveContents: m,
            empty: b,
            returnText: $,
            listen: d
        };
    } ]);
})(window.angular);

angular.module("app.router", [ "ui.router" ]).config([ "$locationProvider", "$stateProvider", "$httpProvider", "$urlRouterProvider", function(e, t, n, r) {
    r.when("", "/writer");
    r.when("/", "/writer");
    t.state("main", {
        abstract: true,
        url: "/",
        templateUrl: "modules/main/partials/view.partial.html",
        controller: "mainController",
        resolve: {
            favicon: [ "faviconFactory", "$q", function(e, t) {
                var n = t.defer();
                e.retrieveCurrentFaviconUrl().then(function(e) {
                    n.resolve();
                }, function(e) {
                    n.reject();
                });
                return n.promise;
            } ],
            config: [ "configFactory", "$q", function(e, t) {
                var n = t.defer();
                e.retrieve().then(function() {
                    n.resolve();
                }, function() {
                    n.reject();
                });
                return n.promise;
            } ],
            session: [ "sessionFactory", "$q", function(e, t) {
                var n = t.defer();
                e.refresh().then(function() {
                    n.resolve();
                }, function() {
                    n.reject();
                });
                return n.promise;
            } ]
        },
        data: {}
    }).state("main.writer", {
        url: "^/writer",
        templateUrl: "modules/writer/partials/view.partial.html",
        controller: "writerController",
        data: {}
    }).state("main.rephrase", {
        url: "^/rephrase",
        templateUrl: "modules/rephrase/partials/view.partial.html",
        controller: "rephraseAreaController",
        data: {}
    }).state("main.pd", {
        url: "^/personaldictionary",
        controller: "pdController",
        templateUrl: "modules/personaldictionary/partials/view.partial.html",
        data: {}
    });
} ]);

angular.module("app.templates", [ "modules/main/partials/view.partial.html", "modules/personaldictionary/partials/view.partial.html", "modules/rephrase/partials/view.partial.html", "modules/translate/partials/view.partial.html", "modules/writer/partials/view.partial.html" ]);

angular.module("modules/main/partials/view.partial.html", []).run([ "$templateCache", function(e) {
    e.put("modules/main/partials/view.partial.html", '<div class="main">\n' + '    <div class="sidebar">\n' + '        <div class="sidebar-item" ng-class="{\'sidebar-item-disabled\':main.sidebar.backDisabled}">\n' + '            <div class="sidebar-item-content">\n' + '                <div class="sidebar-item-content-title">Back to {{::main.faviconDomain || "Website"}}</div>\n' + "            </div>\n" + '            <a class="sidebar-item-icon sidebar-item-close" ng-click="main.returnText()">\n' + '                <img ng-src="{{main.favicon}}" alt="">\n' + '                <div class="sidebar-item-menu">\n' + '                    <span class="gingericon-close"></span>\n' + "                </div>\n" + "            </a>\n" + "        </div>\n" + '        <div class="sidebar-item" ng-class="{activeState:(currentState === \'main.writer\')}">\n' + '            <div class="sidebar-item-content">\n' + '                <div class="sidebar-item-content-title">Write</div>\n' + "            </div>\n" + '            <a class="sidebar-item-icon"  ui-sref="main.writer">\n' + '                <span class="gingericon-writer"></span>\n' + "            </a>\n" + "        </div>\n" + '        <div class="sidebar-item" ng-class="{activeState:(currentState === \'main.rephrase\'),disabled:(stats.count.charactersWithSpace===0)}">\n' + '            <div class="sidebar-item-content">\n' + '                <div class="sidebar-item-content-title">Rephrase</div>\n' + "            </div>\n" + '            <a class="sidebar-item-icon" ui-sref="main.rephrase">\n' + '                <span class="gingericon-rephrase-o"></span>\n' + "            </a>\n" + "        </div>\n" + '        <div class="sidebar-item" ng-if="false">\n' + '            <div class="sidebar-item-content">\n' + '                <div class="sidebar-item-content-title">Settings</div>\n' + '                <div class="sidebar-item-content-panel sidebar-form">\n' + '                    <div class="sidebar-form-row">\n' + '                        <div class="sidebar-form-row-cell">Contextual spelling</div>\n' + '                        <div class="sidebar-form-row-cell">\n' + '                            <span ginger-switch ng-value="main.settings.contextualSpelling"></span>\n' + "                        </div>\n" + '                        <div class="sidebar-form-row-cell"></div>\n' + "                    </div>\n" + '                    <div class="sidebar-form-row">\n' + '                        <div class="sidebar-form-row-cell">Spelling</div>\n' + '                        <div class="sidebar-form-row-cell">\n' + '                            <span ginger-switch ng-value="main.settings.spelling"></span>\n' + "                        </div>\n" + '                        <div class="sidebar-form-row-cell"></div>\n' + "                    </div>\n" + '                    <div class="sidebar-form-row">\n' + '                        <div class="sidebar-form-row-cell">Grammar & Punctuation</div>\n' + '                        <div class="sidebar-form-row-cell"><span ginger-switch ng-value="main.settings.grammar"></span></div>\n' + '                        <div class="sidebar-form-row-cell sidebar-form-row-help">\n' + "                            <span>?</span>\n" + '                            <div class="sidebar-form-row-help-tooltip">\n' + "                                Check text for subject- verb\n" + "                                agreement, misused articals,\n" + "                                consistenet verb forms and tenses\n" + "                                and many more grammar rules\n" + "                            </div>\n" + "                        </div>\n" + "                    </div>\n" + "                </div>\n" + '                <div class="sidebar-item-content-cta" ng-if="main.session.license===0">\n' + '                    <a href="https://www.gingersoftware.com/online_store/ginger_upgrade?cp=GingerWriterPopup-Settings-{{config.platform|capitalize}}&autk={{main.session.token}}">Go Premium</a>\n' + "                </div>\n" + "            </div>\n" + '            <a class="sidebar-item-icon">\n' + '                <span class="gingericon-settings"></span>\n' + "            </a>\n" + "        </div>\n" + '        <div class="sidebar-item" ng-class="{activeState:(currentState === \'main.pd\')}">\n' + '            <div class="sidebar-item-content">\n' + '                <div class="sidebar-item-content-title">Personal Dictionary</div>\n' + "            </div>\n" + '            <a class="sidebar-item-icon" ui-sref="main.pd">\n' + '                <span class="gingericon-personaldictionary"></span>\n' + "            </a>\n" + "        </div>\n" + '        <div class="sidebar-item" ng-if="main.session.license===0">\n' + '            <div class="sidebar-item-content">\n' + '                <div class="sidebar-item-content-title">Go Premium</div>\n' + '                \x3c!--<div class="sidebar-item-content-cta">\n' + '                    <a href="https://www.gingersoftware.com/online_store/ginger_upgrade?cp=GingerWriterPopup-WriterLeftMenu-Chrome">Go Premium</a>\n' + "                </div>--\x3e\n" + "            </div>\n" + '            <a href="https://www.gingersoftware.com/online_store/ginger_upgrade?cp=GingerWriterPopup-WriterLeftMenu-{{config.platform|capitalize}}&autk={{main.session.token}}" class="sidebar-item-icon" target="_blank">\n' + '                <span class="gingericon-premium"></span>\n' + "            </a>\n" + "        </div>\n" + '        <div class="sidebar-item bottom">\n' + '            <div class="sidebar-item-content">\n' + '                <div class="sidebar-item-content-title">Send Feedback</div>\n' + "            </div>\n" + '            <a href="http://www.gingersoftware.com/contactus?email={{main.session.email}}" target="_blank" class="sidebar-item-icon">\n' + '                <span class="gingericon-send-feedback"></span>\n' + "            </a>\n" + "        </div>\n" + "    </div>\n" + '    <div class="content">\n' + '        <div class="content-body">\n' + "            <ui-view></ui-view>\n" + "\n" + '            <div class="content-body-tools">\n' + '                <div class="content-body-tools-list">\n' + '                    <div class="content-body-tools-list-item" name="translate" ng-class="{active:(main.sideMenu === \'translate\')}"><a href="" ng-click="main.sideMenu = \'translate\'"><i class="gingericon-translate"></i> Translate</a></div>\n' + '                    <div class="content-body-tools-list-item" name="dictionary" ng-class="{active:(main.sideMenu === \'dictionary\')}"><a href="" ng-click="main.sideMenu = \'dictionary\'"><i class="gingericon-dictionary"></i> Dictionary</a></div>\n' + '                    <div class="content-body-tools-list-item" name="synonyms" ng-class="{active:(main.sideMenu === \'synonyms\')}"><a href="" ng-click="main.sideMenu = \'synonyms\'"><i class="gingericon-synonyms"></i> Synonyms</a></div>\n' + "                </div>\n" + '                <div class="content-body-tools-content">\n' + '                    <div class="tool-rephrase" ng-if="(currentState === \'main.rephrase\')" ng-controller="rephraseController">\n' + '                        <div class="panel-flex">\n' + '                            <div class="panel-flex-row panel-flex-row-buttons">\n' + '                                <a class="btn" ng-click="rephrase.step(\'backward\')">Previous</a><a class="btn" ng-class="{\'btn-disabled\':(rephrase.selectedIndex===null)}" ng-click="rephrase.undo()">Undo</a><a class="btn" ng-click="rephrase.step(\'forward\')">Next</a>\n' + "                            </div>\n" + '                            <div class="panel-flex-row panel-flex-row-full">\n' + '                                <div class="tool-rephrase-list" ng-if="rephrase.result.length">\n' + '                                    <div class="tool-rephrase-list-item" ng-repeat="result in rephrase.result" ng-click="rephrase.use($index)" ng-class="{active:($index===rephrase.selectedIndex)}">{{result.rephrase}}</div>\n' + "                                </div>\n" + '                                <div class="tool-nonefound" ng-if="rephrase.result && !rephrase.result.length">\n' + "                                    No rephrase suggestions found.\n" + "                                </div>\n" + "                            </div>\n" + "                        </div>\n" + "                    </div>\n" + '                    <form ng-submit="translate.go()" class="tool-translate" ng-if="main.sideMenu == \'translate\'" ng-controller="translateController">\n' + '                        <div class="tool-translate-panel">\n' + '                            <div class="tool-translate-panel-head">\n' + "                                <div class=\"tool-translate-dd\" ng-class=\"{'tool-translate-dd-open':(translate.ui.openList == 'from')}\">\n" + '                                    <a href="" ng-blur="translate.closeDropDown()" ng-click="translate.ui.openList = \'from\'">{{translate.from.languageName}} <span ng-if="translate.from.languageCode==\'auto\' && translate.detectedLanguage">({{translate.detectedLanguage.languageName}})</span> <i class="gingericon-arrow-down"></i></a>\n' + '                                    <ul class="tool-translate-dd-list">\n' + '                                        <li class="tool-translate-dd-list-item"><a ng-click="translate.setTranslateLang(\'from\',translate.auto)" href="">{{::translate.auto.languageName}}</a></li>\n' + '                                        <li class="tool-translate-dd-list-item" ng-repeat="lang in translate.supportedLanguages track by lang.languageCode"><a ng-mousedown="translate.setTranslateLang(\'from\',lang)" href="">{{::lang.languageName}}</a></li>\n' + "                                    </ul>\n" + "                                </div>\n" + "                            </div>\n" + '                            <textarea ng-model="translate.phrase"></textarea>\n' + "\n" + '                            <div class="tool-translate-panel-actions">\n' + '                                <a class="tool-translate-panel-actions-switch" href="" ng-click="translate.switch()"><span><i class="gingericon-switch"></i></span></a>\n' + '                                <a class="tool-translate-panel-actions-go" href="" ng-click="translate.go()"><span>Translate</span></a>\n' + "                            </div>\n" + '                            <div class="tool-translate-panel-head">\n' + "                                <div class=\"tool-translate-dd tool-translate-dd-to\" ng-class=\"{'tool-translate-dd-open':(translate.ui.openList == 'to')}\">\n" + '                                    <a href="" ng-blur="translate.closeDropDown()" ng-click="translate.ui.openList = \'to\'">{{translate.to.languageName}} <i class="gingericon-arrow-down"></i></a>\n' + '                                    <ul class="tool-translate-dd-list">\n' + '                                        <li class="tool-translate-dd-list-item" ng-repeat="lang in translate.supportedLanguages track by lang.languageCode"><a ng-mousedown="translate.setTranslateLang(\'to\',lang)" href="">{{::lang.languageName}}</a></li>\n' + "                                    </ul>\n" + "                                </div>\n" + "                            </div>\n" + '                            <textarea readonly="" ng-model="translate.result"></textarea>\n' + "\n" + "                        </div>\n" + "                    </form>\n" + "\n" + '                    <div class="tool-synonyms" ng-if="main.sideMenu == \'synonyms\'" ng-controller="synonymsController">\n' + '                        <div class="panel-flex">\n' + '                            <div class="panel-flex-row">\n' + '                                <form ng-submit="synonyms.go()">\n' + '                                    <div class="tool-search">\n' + '                                        <input type="search" ng-model="synonyms.query"><button type="submit"><i class="gingericon-search"></i></button>\n' + "                                    </div>\n" + "                                </form>\n" + "                            </div>\n" + "\n" + '                            <div class="panel-flex-row panel-flex-row-full">\n' + '                                <div class="tool-nonefound" ng-if="synonyms.result.SynsByPos && !synonyms.result.SynsByPos.length">\n' + "                                    no synonym found for {{::synonyms.query}}\n" + "                                </div>\n" + "\n" + '                                <div ng-if="synonyms.result.SynsByPos && synonyms.result.SynsByPos.length">\n' + '                                    <h3 class="tool-dictionary-definitions-word">{{synonyms.result.OrigWord}} <i class="gingericon-synonyms"></i></h3>\n' + '                                    <div ng-repeat="sg in synonyms.result.SynsByPos track by $index">\n' + "                                        \x3c!--{{sg.Pos}}--\x3e\n" + '                                        <div ng-repeat="sgw in sg.Syns track by $index" class="tool-synonyms-item">{{::sgw.Word}}</div>\n' + "                                    </div>\n" + "                                </div>\n" + "                            </div>\n" + "\n" + "                        </div>\n" + "                    </div>\n" + "\n" + '                    <div class="tool-dictionary" ng-if="main.sideMenu == \'dictionary\'" ng-controller="dictionaryController">\n' + '                        <div class="panel-flex">\n' + '                            <div class="panel-flex-row">\n' + '                                <form ng-submit="dictionary.go()">\n' + '                                    <div class="tool-search">\n' + '                                        <input type="search" ng-model="dictionary.phrase">\n' + '                                        <button type="submit"><i class="gingericon-search"></i></button>\n' + "                                    </div>\n" + "                                </form>\n" + "                            </div>\n" + '                            <div class="panel-flex-row panel-flex-row-full">\n' + '                                <p class="tool-dictionary-nonefound"  ng-show="dictionary.result.DefsByWord.length==0">\n' + "                                    <br>  No definition found for '{{dictionary.result.OrigWord}}'\n" + "                                </p>\n" + '                                <p class="tool-dictionary-nonefound"  ng-if="dictionary.error">\n' + "                                    <br>  {{dictionary.error}}\n" + "                                </p>\n" + '                                <div class="tool-dictionary-definitions" ng-repeat="definitionWord in dictionary.result.DefsByWord">\n' + '                                    <h3 class="tool-dictionary-definitions-word">{{definitionWord.DefinedWord}} <i class="gingericon-dictionary"></i></h3>\n' + '                                    <ul class="tool-dictionary-definitions-category">\n' + '                                        <li ng-repeat="definitionPos in definitionWord.DefsByPos">\n' + "                                            <span>{{definitionPos.Pos}}</span>\n" + "                                            <ol>\n" + '                                                <li ng-repeat="definitionDesc in definitionPos.Defs">\n' + "                                                    {{definitionDesc.Def}}\n" + "                                                </li>\n" + "                                            </ol>\n" + "                                        </li>\n" + "                                    </ul>\n" + '                                    <hr ng-if="seeAlso.length > 0">\n' + "                                </div>\n" + '                                <div ng-show="seeAlso.length > 0" class="ginger-definition-seealso">\n' + "                                    <h4>See also</h4>\n" + '                                    <ul class="list-inline">\n' + '                                        <li ng-repeat="seeAlsoItem in seeAlso">\n' + '                                            <a ui-sref="definition.word({word: seeAlsoItem.Word})">{{seeAlsoItem.Word}}</a>\n' + "                                        </li>\n" + "                                    </ul>\n" + "                                </div>\n" + "                            </div>\n" + "                        </div>\n" + "                    </div>\n" + "                </div>\n" + "            </div>\n" + '            <div class="content-body-ad" ginger-banner="writer.underTools"></div>\n' + "        </div>\n" + '        <div class="content-foot">\n' + '            <div class="content-foot-stat">Characters <em>{{stats.count.charactersWithSpace}}</em></div>\n' + '            <div class="content-foot-stat">Words <em>{{stats.count.words}}</em></div>\n' + '            <div class="content-foot-stat">Sentence <em>{{stats.count.sentences}}</em></div>\n' + '            <div class="content-foot-stat content-foot-stat-grammar" ng-if="currentState !== \'main.rephrase\'">Grammar <em>{{stats.mistakes.grammar}}</em></div>\n' + '            <div class="content-foot-stat content-foot-stat-spelling" ng-if="currentState !== \'main.rephrase\'">Spelling <em>{{stats.mistakes.spelling}}</em>\n' + "            </div>\n" + '            <div class="content-foot-offline"><span class="content-foot-offline-rephrase" ng-if="currentState===\'main.rephrase\'">To edit your text, go back to the editor</span> <span ng-if="main.onlinestatus==\'offline\'"><i class="gingericon-offline"></i><div class="content-foot-offline-tooltip"><em>Slow or no internet connection.</em>Please check your internet settings and try again.</div></span></div>\n' + "        </div>\n" + "\n" + "    </div>\n" + "\n" + "</div>");
} ]);

angular.module("modules/personaldictionary/partials/view.partial.html", []).run([ "$templateCache", function(e) {
    e.put("modules/personaldictionary/partials/view.partial.html", '<div class="content-body-container content-body-pd">\n' + "    <h2>Personal Dictionary</h2>\n" + '    <div class="content-body-pd-frame">\n' + '        \x3c!--<iframe src="http://nomo.hu" height="100%" width="100%" frameborder="0"></iframe>--\x3e\n' + '        <iframe ng-src="{{pd.iframeSrc}}" height="100%" width="100%" frameborder="0"></iframe>\n' + "    </div>\n" + "</div>");
} ]);

angular.module("modules/rephrase/partials/view.partial.html", []).run([ "$templateCache", function(e) {
    e.put("modules/rephrase/partials/view.partial.html", '<div class="content-body-container content-body-writer">\n' + '    <div ng-show="main.onlinestatus === \'online\'"  class="content-body-writer-area" contenteditable="false" ng-model="main.writer" id="rephraser" spellcheck="false" placeholder="No sentences to rephrase..."></div>\n' + '    <div ng-if="main.onlinestatus === \'offline\'" class="content-body-writer-offline">No internet connection. Check your network and try again.</div>\n' + "</div>");
} ]);

angular.module("modules/translate/partials/view.partial.html", []).run([ "$templateCache", function(e) {
    e.put("modules/translate/partials/view.partial.html", '<form ng-submit="translate.go()" class="tool-translate">\n' + '    <div class="tool-translate-panel">\n' + '        <div class="tool-translate-panel-head">\n' + "            <div class=\"tool-translate-dd\" ng-class=\"{'tool-translate-dd-open':(translate.ui.openList == 'from')}\">\n" + '                <a href="" ng-blur="translate.closeDropDown()" ng-click="translate.ui.openList = \'from\'">{{translate.from.languageName}} <span ng-if="translate.from.languageCode==\'auto\' && translate.detectedLanguage">({{translate.detectedLanguage.languageName}})</span> <i class="gingericon-arrow-down"></i></a>\n' + '                <ul class="tool-translate-dd-list">\n' + '                    <li class="tool-translate-dd-list-item"><a ng-click="translate.setTranslateLang(\'from\',translate.auto)" href="">{{::translate.auto.languageName}}</a></li>\n' + '                    <li class="tool-translate-dd-list-item" ng-repeat="lang in translate.supportedLanguages track by lang.languageCode"><a ng-click="translate.setTranslateLang(\'from\',lang)" href="">{{::lang.languageName}}</a></li>\n' + "                </ul>\n" + "            </div>\n" + "        </div>\n" + '        <textarea ng-model="translate.phrase"></textarea>\n' + "\n" + '        <div class="tool-translate-panel-actions">\n' + '            <a class="tool-translate-panel-actions-switch" href="" ng-click="translate.switch()"><span><i class="gingericon-switch"></i></span></a>\n' + '            <a class="tool-translate-panel-actions-go" href="" ng-click="translate.go()"><span>Translate</span></a>\n' + "        </div>\n" + '        <div class="tool-translate-panel-head">\n' + "            <div class=\"tool-translate-dd tool-translate-dd-to\" ng-class=\"{'tool-translate-dd-open':(translate.ui.openList == 'to')}\">\n" + '                <a href="" ng-blur="translate.closeDropDown()" ng-click="translate.ui.openList = \'to\'">{{translate.to.languageName}} <i class="gingericon-arrow-down"></i></a>\n' + '                <ul class="tool-translate-dd-list">\n' + '                    <li class="tool-translate-dd-list-item" ng-repeat="lang in translate.supportedLanguages track by lang.languageCode"><a ng-click="translate.setTranslateLang(\'to\',lang)" href="">{{::lang.languageName}}</a></li>\n' + "                </ul>\n" + "            </div>\n" + "        </div>\n" + '        <textarea readonly="" ng-model="translate.result"></textarea>\n' + "\n" + "    </div>\n" + "</form>\n" + "\n" + "");
} ]);

angular.module("modules/writer/partials/view.partial.html", []).run([ "$templateCache", function(e) {
    e.put("modules/writer/partials/view.partial.html", '<div class="content-body-container content-body-writer">\n' + '    \x3c!--<textarea ng-model="main.writer" id="writer" spellcheck="false" placeholder="Please start typing..."></textarea>--\x3e\n' + '    <div ginger-widget-mode="contenteditable" ng-model="main.writer" class="content-body-writer-area" id="writer" contenteditable="true" spellcheck="false" placeholder="Please start typing..."></div>\n' + "</div>");
} ]);
//# sourceMappingURL=writer.min.js.map