/*
Code architecture and implementation by kristof.mihaly@nomo.hu
For Ginger Software Ltd.
Ginger Grammar Checker Chrome Extension
*/

if (!gingerModule) {
    var gingerModule = function(e, r) {
        var g = {};
        var n = function(e) {
            var r = g[e];
            r.module = r.classCache();
            r.isInited = true;
        };
        var t = function(e, r, n) {
            if (g[e]) {
                if (console && console.log) console.log("Module already loaded: " + e, "...overwriting module");
            }
            g[e] = {
                classCache: r,
                isInited: false,
                deps: n
            };
            return g[e];
        };
        var o = function(e) {
            if (e && e.length) {
                var r = true;
                for (var n = 0; n < e.length; n++) {
                    if (!o(e[n])) {
                        r = false;
                        break;
                    }
                }
                return r;
            } else {
                return true;
            }
        };
        var i = function(e, r) {
            if (typeof g[e] === "undefined") {
                throw "Module '" + e + "' is not loaded. Check dependency in the end of your module definition.";
            }
            if (!o(e.deps)) {
                throw "Module '" + e + "' doesn't have all dependencies loaded.";
            }
            if (!g[e].isInited) {
                n(e);
            }
            if (r) return g[e].classCache; else return g[e].module;
        };
        var a = function(e) {
            if (!g[e]) {
                console.log(e, "not added to project or has not been loaded");
                return false;
            } else if (!g[e].isInited) {
                console.log("module ", e, "not loaded, because");
                var r = g[e].deps;
                if (r.length) {
                    var n = true;
                    for (var t = 0; t < r.length; t++) {
                        var o = r[t];
                        n = n && a(o);
                    }
                    return n;
                } else {
                    return true;
                }
            } else {
                return true;
            }
        };
        return {
            load: t,
            get: i,
            debug: a
        };
    }();
}

gingerModule.load("gingerchromeext.browser", function() {
    return window.chrome;
});

gingerModule.load("gingerchromeext.background.ajax", function() {
    var e = function(e) {
        return $.ajax(e);
    };
    return {
        execute: e
    };
}, []);

gingerModule.load("gingerchromeext.background.banners", function() {
    var o = "https://clientmessages.gingersoftware.com/banner";
    var e = function(e) {
        var r = $.Deferred();
        var n = gingerModule.get("gingerchromeext.background.session").get();
        if (!n) {
            r.reject();
            return r.promise();
        }
        var t = o + "/" + n.userId + "/" + e + "/chromeextension?affId=A";
        $.ajax({
            url: t,
            data: {},
            withCredentials: false,
            cache: false,
            success: function(e) {
                r.resolve(e);
            },
            error: function(e) {
                console.error("Cant get banner for user", e);
                r.reject();
            }
        });
        return r.promise();
    };
    return {
        getBanner: e
    };
}, []);

gingerModule.load("gingerchromeext.background.browserInterface", function() {
    var e = function() {
        var r = $.Deferred();
        gingerModule.get("gingerchromeext.browser").tabs.query({
            currentWindow: true,
            active: true
        }, function(e) {
            r.resolve(e[0]);
        });
        return r.promise();
    };
    return {
        getActiveTab: e
    };
}, []);

gingerModule.load("gingerchromeext.background.config", function() {
    var n = {
        apiKey: "BrowserStandalone",
        affId: "chromeExt",
        clientVersion: gingerModule.get("gingerchromeext.browser").runtime.getManifest().version,
        widgetUid: "f882d471-53f2-431f-8fe7-ad08beb3370c",
        trackingSource: "extensionStandaloneApp",
        source: "webWidgetChromeStoreExtension",
        dialect: "US",
        env: "production",
        platform: "chrome"
    };
    return {
        get: function(e) {
            return e ? n[e] : n;
        },
        set: function(e, r) {
            n[e] = r;
            return n;
        }
    };
}, [ "gingerchromeext.browser" ]);

gingerModule.load("gingerchromeext.background.contentConnector", function() {
    var e = function(r, e, n) {
        try {
            var t = r.callArgs;
            if (!t) {
                t = null;
            } else if (!$.isArray(t)) {
                t = [ t ];
            }
            if (r.includeSender) {
                if (!t) t = [];
                t.push({
                    sender: e
                });
            }
            if (r.promise) {
                gingerModule.get(r.module)[r.callFunction].apply(this, t).then(function(e) {
                    if (!e) e = false;
                    n({
                        resolved: true,
                        result: e
                    });
                }, function(e) {
                    if (!e) e = false;
                    n({
                        rejected: true,
                        result: e
                    });
                });
            } else {
                var o = gingerModule.get(r.module)[r.callFunction].apply(this, t);
                n(o);
                return false;
            }
        } catch (e) {
            console.error("background failed to call function requested from content", r, e);
        }
        return true;
    };
    gingerModule.get("gingerchromeext.browser").runtime.onMessage.addListener(e);
    var r = function(e) {
        gingerModule.get("gingerchromeext.browser").runtime.sendMessage(e, function(e) {});
    };
    return {
        send: r,
        handleMessage: e
    };
}, [ "gingerchromeext.background.session", "gingerchromeext.background.config" ]);

gingerModule.load("gingerchromeext.background.iconSwitcher", function() {
    var n = {
        normal: "assets/icon-16.png",
        nosupport: "assets/icon-16-nosupport.png",
        off: "assets/icon-16-off.png"
    };
    var t = function(e) {
        return e.replace(/^[^/]*\/\/(www\.)?/g, "").replace(/[:\/].*$/g, "");
    };
    var o = function(r) {
        if (!gingerModule.get("gingerchromeext.background.session").isLoggedIn(true)) {
            gingerModule.get("gingerchromeext.browser").browserAction.setIcon({
                path: n.normal
            });
        } else if (!gingerModule.get("gingerchromeext.background.nonSupportedSites").isUrlEnabled(r)) {
            gingerModule.get("gingerchromeext.browser").browserAction.setIcon({
                path: n.nosupport
            });
        } else {
            gingerModule.get("gingerchromeext.background.storage").get("domainBlackList").then(function(e) {
                if (!e) e = [];
                if (e.indexOf(t(r)) !== -1) {
                    gingerModule.get("gingerchromeext.browser").browserAction.setIcon({
                        path: n.off
                    });
                } else {
                    gingerModule.get("gingerchromeext.browser").browserAction.setIcon({
                        path: n.normal
                    });
                }
            });
        }
    };
    var e = function() {
        gingerModule.get("gingerchromeext.browser").tabs.query({
            currentWindow: true,
            active: true
        }, function(e) {
            var r = e[0];
            if (r && r.url) {
                o(r.url);
            }
        });
    };
    var r = function(e) {
        n = e;
    };
    return {
        refresh: e,
        setIcons: r,
        get: function() {
            return n;
        }
    };
}, [ "gingerchromeext.background.session", "gingerchromeext.background.storage", "gingerchromeext.background.nonSupportedSites" ]);

gingerModule.load("gingerchromeext.background.init", function() {
    var e = $("<eventScope>");
    gingerModule.get("gingerchromeext.browser").runtime.onInstalled.addListener(function() {
        if (gingerModule.get("gingerchromeext.background.config").get("platform") === "chrome") {
            g();
        } else {
            gingerModule.get("gingerchromeext.browser").tabs.create({
                url: "https://cdn.gingersoftware.com/extensions/postinstall/index.html?ext=" + gingerModule.get("gingerchromeext.background.config").get("platform")
            }, function() {});
        }
        gingerModule.get("gingerchromeext.background.storage").get("alreadyInstalled").then(function(e) {
            if (!e) {
                gingerModule.get("gingerchromeext.background.storage").set("alreadyInstalled", true);
                gingerModule.get("gingerchromeext.browser").cookies.get({
                    url: "https://gingersoftware.com",
                    name: "gOfflineTr"
                }, function(e) {
                    console.log("GETTING COOKIE", e);
                    var r;
                    try {
                        r = JSON.parse(e.value);
                    } catch (e) {
                        r = {};
                    }
                    r.type = "InstallEvent";
                    gingerModule.get("gingerchromeext.background.report").reporter(r);
                });
            } else {}
        });
    });
    gingerModule.get("gingerchromeext.browser").runtime.onMessageExternal.addListener(function(e, r, n) {
        if (e) {
            if (e.message) {
                if (e.message === "installed") {
                    n({
                        installed: true
                    });
                }
            }
        }
        return true;
    });
    var r = function(r, n) {
        gingerModule.get("gingerchromeext.background.storage").get(r).then(function(e) {
            if (!e) {
                e = n;
                gingerModule.get("gingerchromeext.background.storage").set(r, n);
            }
            gingerModule.get("gingerchromeext.background.config").set(r, e);
        });
    };
    var t = function() {
        gingerModule.get("gingerchromeext.background.iconSwitcher").refresh();
    };
    var n = function() {
        gingerModule.get("gingerchromeext.browser").tabs.onActivated.addListener(function(e, r) {
            t();
        });
        gingerModule.get("gingerchromeext.browser").tabs.onUpdated.addListener(function(e, r, n) {
            if (r && r.status) {
                t();
            }
        });
        gingerModule.get("gingerchromeext.browser").browserAction.onClicked.addListener(function(e) {});
        gingerModule.get("gingerchromeext.background.storage").listen.on("change", function(e, r) {
            t();
        });
    };
    var o = function() {
        var r = gingerModule.get("gingerchromeext.background.session").get();
        if (r && r.token) {
            gingerModule.get("gingerchromeext.background.storage").get("extensionAlreadyRegisteredAsInstalledApp").then(function(e) {
                if (!e) {
                    gingerModule.get("gingerchromeext.background.storage").set("extensionAlreadyRegisteredAsInstalledApp", true);
                    $.ajax({
                        url: "http://umservices.gingersoftware.com/UM_LoginBased/UMOperations/json/AddPlatformToUser",
                        method: "POST",
                        dataType: "json",
                        contentType: "application/json",
                        data: JSON.stringify({
                            apiKey: "GingerInnerDev",
                            userIdentifier: r.userId,
                            platform: "webwidgetchromestoreextension"
                        })
                    });
                }
            });
        }
    };
    var g = function() {
        var o;
        gingerModule.get("gingerchromeext.browser").windows.getAll({
            populate: true
        }, function(e) {
            for (var r = 0; r < e.length; r++) {
                for (var n = 0; n < e[r].tabs.length; n++) {
                    var t = e[r].tabs[n];
                    if (t.url === "https://www.gingersoftware.com/install") {
                        o = t.id;
                    } else if (/kdfieneakcjfaiglcfcgkidlkmlijjnh/.test(t.url)) {
                        gingerModule.get("gingerchromeext.browser").tabs.remove(t.id);
                    }
                }
            }
            if (o) {
                gingerModule.get("gingerchromeext.browser").tabs.update(o, {
                    url: "https://cdn.gingersoftware.com/extensions/postinstall/index.html?ext=" + gingerModule.get("gingerchromeext.background.config").get("platform")
                });
            } else {
                gingerModule.get("gingerchromeext.browser").tabs.create({
                    url: "https://cdn.gingersoftware.com/extensions/postinstall/index.html?ext=" + gingerModule.get("gingerchromeext.background.config").get("platform")
                }, function() {});
            }
        });
    };
    var i = function(e) {
        var r = [];
        for (var n in e) if (e.hasOwnProperty(n)) {
            r.push(encodeURIComponent(n) + "=" + encodeURIComponent(e[n]));
        }
        return r.join("&");
    };
    var a = function() {
        n();
        r("widgetUid", gingerModule.get("gingerchromeext.background.uuid").generate());
        r("dialect", "US");
        var e = {
            widgetUid: gingerModule.get("gingerchromeext.background.config").get("widgetUid"),
            clientVersion: gingerModule.get("gingerchromeext.background.config").get("clientVersion"),
            source: gingerModule.get("gingerchromeext.background.config").get("source")
        };
        gingerModule.get("gingerchromeext.browser").runtime.setUninstallURL("https://cdn.gingersoftware.com/extensions/chrome/uninstall/uninstall.html?" + i(e));
        gingerModule.get("gingerchromeext.background.session").listen.on("login", function(e, r) {
            if (r.signUp) {
                gingerModule.get("gingerchromeext.background.report").reportGoogleTag({
                    event: "auth.registration." + gingerModule.get("gingerchromeext.background.config").get("platform")
                });
            } else {
                gingerModule.get("gingerchromeext.background.report").reportGoogleTag({
                    event: "auth.login." + gingerModule.get("gingerchromeext.background.config").get("platform")
                });
            }
            o();
        });
        o();
    };
    if (gingerModule.get("gingerchromeext.background.config").get("env") === "production") {
        Raven.config("https://124ddc57eb2740cc985d1e128a3ac476@sentry.io/128330", {
            release: "@@gitRevision"
        }).install();
        Raven.context(function() {
            a();
        });
    } else {
        a();
    }
    return {
        listen: e
    };
}, [ "gingerchromeext.background.uuid", "gingerchromeext.background.legacyStateImporter", "gingerchromeext.background.contentConnector", "gingerchromeext.background.storage", "gingerchromeext.background.session", "gingerchromeext.background.report" ]);

gingerModule.load("gingerchromeext.background.legacyStateImporter", function() {
    var e = function() {
        var e = localStorage.getItem("gAnonymousUserId");
        var r = localStorage.getItem("user_dictionaryLanguage");
        var n = localStorage.getItem("widget_uid");
        var t = localStorage.getItem("msg_firstCorrectionMarkMsgDisplayed");
        var o = {};
        o.token = localStorage.getItem("gAuthToken");
        o.userId = localStorage.getItem("gGingerUserId");
        o.email = localStorage.getItem("user_email");
        o.name = localStorage.getItem("user_name");
        if (n) {
            gingerModule.get("gingerchromeext.background.storage").set("alreadyInstalled", true);
            gingerModule.get("gingerchromeext.background.storage").set("anonymUserId", e);
            gingerModule.get("gingerchromeext.background.storage").set("widgetUid", n);
            gingerModule.get("gingerchromeext.background.storage").set("dialect", r);
            gingerModule.get("gingerchromeext.background.storage").set("onboardingBubblesShown", t);
            if (o.token && o.userId) {
                gingerModule.get("gingerchromeext.background.session").set(o);
            }
            localStorage.clear();
        }
    };
    e();
}, [ "gingerchromeext.background.storage" ]);

gingerModule.load("gingerchromeext.background.nonSupportedSites", function() {
    var g = [ {
        url: "airbnb.com",
        enabled: false,
        name: "AirBnB"
    }, {
        url: "evernote.com",
        enabled: false,
        name: "Evernote"
    }, {
        url: ".*slack.com",
        enabled: false,
        name: "Slack"
    }, {
        url: "quora.com",
        enabled: false,
        name: "Quora"
    }, {
        url: "paper.dropbox.com",
        enabled: false,
        name: "Dropbox Paper"
    }, {
        url: "docs.google.com",
        enabled: false,
        name: "Google Docs"
    }, {
        url: ".*pinterest.com",
        enabled: false,
        name: "Pinterest"
    }, {
        url: "hangouts.google.com",
        enabled: false,
        name: "Google Hangouts"
    }, {
        url: "drive.google.com",
        enabled: false,
        name: "Google Drive"
    }, {
        url: "hootsuite.com",
        enabled: false,
        name: "Hoot Suite"
    }, {
        url: "facebook.com/notes",
        enabled: false,
        name: "Facebook Notes"
    }, {
        url: "onedrive.live.com",
        enabled: false,
        name: "OneDrive"
    }, {
        url: "docs.com",
        enabled: false,
        name: "Docs.com"
    }, {
        url: "sp.docs.com",
        enabled: false,
        name: "Docs.com"
    }, {
        url: "texteditor.nsspot.net",
        enabled: false,
        name: "Text Editor for Google Drive"
    }, {
        url: "jsbin.com",
        enabled: false,
        name: "JSBin"
    }, {
        url: "jsfiddle.net",
        enabled: false,
        name: "JsFiddle"
    }, {
        url: "mail.live.com",
        enabled: false,
        name: "Live"
    }, {
        url: "messenger.yahoo.com",
        enabled: false,
        name: "Yahoo Messenger"
    }, {
        url: ".*aribnb.com",
        enabled: false,
        name: "AirBnb"
    }, {
        url: "imperavi.com",
        enabled: false,
        name: "Imperavi"
    }, {
        url: ".*revealyourgift.com",
        enabled: false,
        name: "Reveal Your Gift"
    } ];
    var i = function(e) {
        return e.replace(/^[^/]*\/\/(www\.)?/g, "").replace(/[:\/].*$/g, "");
    };
    var e = function() {
        return g;
    };
    var n = function(e) {
        var r = i(e);
        for (var n = 0; n < g.length; n++) {
            var t = g[n];
            var o = new RegExp(t.url, "i");
            if (o.test(r)) {
                return t;
            }
        }
        return null;
    };
    var r = function(e) {
        var r = n(e);
        if (r) return r.enabled;
        return true;
    };
    return {
        isUrlEnabled: r,
        getNonSupportedItemByUrl: n,
        get: e
    };
}, [ "gingerchromeext.background.legacyStateImporter", "gingerchromeext.background.contentConnector", "gingerchromeext.background.storage", "gingerchromeext.background.session", "gingerchromeext.background.report" ]);

gingerModule.load("gingerchromeext.background.report", function() {
    var t = $("<eventScope/>");
    var o = function() {
        var e = new Date().getTime();
        n({
            type: "keepAlive"
        });
        gingerModule.get("gingerchromeext.background.storage").set("lastKeepAliveDate", e);
    };
    var e = function() {
        gingerModule.get("gingerchromeext.background.storage").get("lastKeepAliveDate").then(function(e) {
            var r = 12 * 60 * 1e3;
            var n = new Date().getTime();
            if (typeof e === "number") {
                setTimeout(function() {
                    o();
                    setInterval(o, r);
                }, e + r - n);
            } else {
                setTimeout(o, 500);
                setInterval(o, r);
            }
        });
    };
    var r = function() {
        var e = {
            type: null,
            apiKey: gingerModule.get("gingerchromeext.background.config").get("apiKey"),
            widgetUid: gingerModule.get("gingerchromeext.background.config").get("widgetUid"),
            affId: gingerModule.get("gingerchromeext.background.config").get("affId"),
            application: gingerModule.get("gingerchromeext.background.config").get("platform"),
            ClientVersion: gingerModule.get("gingerchromeext.background.config").get("clientVersion")
        };
        var r = gingerModule.get("gingerchromeext.background.session").get();
        if (r && !r.isAnonym) {
            e.GingerUserName = r.userId;
        }
        return e;
    };
    var g = function(n) {
        gingerModule.get("gingerchromeext.browser").tabs.query({
            currentWindow: true,
            active: true
        }, function(e) {
            var r = e[0];
            if (r && r.url) {
                n(r.url);
            } else {
                n(null);
            }
        });
    };
    var n = function(e) {
        var n = $.extend(r(), e);
        g(function(e) {
            if (e) {
                n.pageUrl = e;
            }
            var r = {
                url: "https://tr.gingersoftware.com/trackingEP.php",
                method: "GET",
                timeout: 2e3,
                data: {
                    cmd: "reportEvents",
                    events: JSON.stringify([ {
                        payload: n,
                        source: gingerModule.get("gingerchromeext.background.config").get("source")
                    } ])
                },
                cache: false,
                dataType: "text",
                contentType: "application/json",
                success: function(e) {
                    t.trigger("report.done", e);
                },
                error: function(e) {
                    t.trigger("report.fail", e);
                }
            };
            $.ajax(r);
            t.trigger("report.sent", r);
        });
    };
    var i = function(e) {
        var r = "https://cdn.gingersoftware.com/extensions/chrome/googleTagManagerPixel/googleTagManagerPixel.html?action=" + e.event;
        var n = gingerModule.get("gingerchromeext.browser").extension.getBackgroundPage();
        var t = n.document.body;
        $(t).find("#googleTagReporter").remove();
        $(t).append("<iframe id='googleTagReporter' src='" + r + "'></iframe>");
    };
    var a = function() {
        e();
    };
    a();
    return {
        listen: t,
        reporter: n,
        reportGoogleTag: i
    };
}, [ "gingerchromeext.background.config", "gingerchromeext.background.storage", "gingerchromeext.background.session" ]);

gingerModule.load("gingerchromeext.background.session", function() {
    var t = $("<eventScope>");
    var o = null;
    var g = null;
    var i = $.Deferred();
    var e = function() {
        return o;
    };
    var r = function(e) {
        if (e) {
            return o && !o.isAnonym;
        } else {
            var r = $.Deferred();
            gingerModule.get("gingerchromeext.background.storage").get("session").then(function(e) {
                e && !e.isAnonym ? r.resolve() : r.reject();
            });
            return r.promise();
        }
    };
    var a = function(e, r) {
        if (e === r) {
            return true;
        }
        if (!e || !r) {
            return false;
        }
        var n = [ "email", "license", "name", "token", "userId", "username" ];
        for (var t = 0; t < n.length; t++) {
            if (e[n[t]] !== r[n[t]]) {
                return false;
            }
        }
        return true;
    };
    var c = function(e) {
        var o = $.Deferred();
        $.ajax({
            url: "https://umservices.gingersoftware.com/UM_LoginBased/UMOperations/jsonSecured/GetUserDetails",
            data: {
                apiKey: gingerModule.get("gingerchromeext.background.config").get("apiKey"),
                userIdentifier: e
            },
            withCredentials: false,
            cache: false,
            success: function(e) {
                if (e.ExceptionType) {
                    o.reject();
                } else if (e.GetUserDetailsResult.UserIdentifier) {
                    var r = {};
                    r.raw = e.GetUserDetailsResult;
                    r.name = e.GetUserDetailsResult.UserData.Name;
                    r.email = e.GetUserDetailsResult.UserData.Email;
                    r.userId = e.GetUserDetailsResult.UserIdentifier;
                    var n = 0;
                    try {
                        var t = e.GetUserDetailsResult.LicenseInfo.LicensePolicy.Features.length;
                        if (t >= 3) n = 2; else if (t > 0) n = 1; else n = 0;
                    } catch (e) {}
                    r.license = n;
                    o.resolve(r);
                } else {
                    o.reject();
                }
            },
            error: function(e) {
                o.reject();
            }
        });
        return o.promise();
    };
    var s = function(r) {
        var n = $.Deferred();
        if (a(r, o)) {
            n.resolve(o);
            return n.promise();
        }
        if (r && r.token && r.userId) {
            c(r.userId).then(function(e) {
                e = $.extend(r, e);
                o = e;
                gingerModule.get("gingerchromeext.background.storage").set("session", o).then(function() {
                    t.trigger("login", o);
                    t.trigger("change", o);
                    n.resolve(o);
                });
            }, function(e) {
                r.license = 0;
                o = r;
                gingerModule.get("gingerchromeext.background.storage").set("session", o).then(function() {
                    t.trigger("login", o);
                    t.trigger("change", o);
                    n.resolve(o);
                });
            });
        } else {
            f().then(function(e) {
                var r = {
                    userId: e,
                    license: 0,
                    isAnonym: true
                };
                o = r;
                gingerModule.get("gingerchromeext.background.storage").set("session", r).then(function() {
                    t.trigger("logout", o);
                    t.trigger("change", o);
                    n.resolve(o);
                });
            });
        }
        return n.promise();
    };
    var n = function(e) {
        var r = $.Deferred();
        var n = "https://umservices.gingersoftware.com/UM_ApiRest/jsonSecured/CreateAnonymousUser";
        var t = {
            apiKey: gingerModule.get("gingerchromeext.background.config").get("apiKey"),
            clientVersion: gingerModule.get("gingerchromeext.background.config").get("clientVersion"),
            machineId: gingerModule.get("gingerchromeext.background.config").get("machineId")
        };
        $.ajax({
            url: n,
            data: t,
            success: function(e) {
                r.resolve(e.CreateAnonymousUserResult.UserName);
            },
            error: function(e) {
                console.error(e);
            }
        });
        return r.promise();
    };
    var u = function(e) {
        var r = $.Deferred();
        var n = e;
        if (!n) {
            r.reject();
        } else {
            $.ajax({
                url: "https://auth.gingersoftware.com/isValidToken/" + n
            }).then(function(e) {
                if (e.valid) {
                    return r.resolve(e.userId);
                } else {
                    return r.reject(null);
                }
            });
        }
        return r.promise();
    };
    var l = function() {
        var n = $.Deferred();
        gingerModule.get("gingerchromeext.background.storage").get("session").then(function(e) {
            if (!e) {
                var r = {
                    userId: g,
                    license: 0,
                    isAnonym: true
                };
                s(r).then(function(e) {
                    n.resolve(e);
                });
            } else {
                s(e).then(function(e) {
                    n.resolve(e);
                });
            }
        });
        return n.promise();
    };
    var d = function() {
        return i.promise().then(function() {
            return l();
        });
    };
    var f = function() {
        var r = $.Deferred();
        gingerModule.get("gingerchromeext.background.storage").get("anonymUserId").then(function(e) {
            if (!e) {
                n().then(function(e) {
                    gingerModule.get("gingerchromeext.background.storage").set("anonymUserId", e);
                    r.resolve(e);
                });
            } else {
                r.resolve(e);
            }
        });
        return r.promise();
    };
    var m = function() {
        f().then(function(e) {
            g = e;
            gingerModule.get("gingerchromeext.browser").cookies.get({
                url: "https://www.gingersoftware.com",
                name: "authToken"
            }, function(e) {
                if (e && e.value) {
                    var n = e.value;
                    u(n).then(function e(r) {
                        s({
                            token: n,
                            userId: r
                        }).then(function() {
                            i.resolve();
                        });
                    }, function e() {
                        l().then(function() {
                            i.resolve();
                        });
                    });
                } else {
                    l().then(function() {
                        i.resolve();
                    });
                }
            });
        });
    };
    m();
    return {
        get: e,
        set: s,
        refresh: d,
        isLoggedIn: r,
        listen: t
    };
}, [ "gingerchromeext.background.storage", "gingerchromeext.background.config", "gingerchromeext.background.legacyStateImporter" ]);

gingerModule.load("gingerchromeext.background.storage", function() {
    var r = $("<eventScope/>");
    var e = function(e, r) {
        if (!e) return;
        var n = $.Deferred();
        var t = {};
        t[e] = r;
        gingerModule.get("gingerchromeext.browser").storage.sync.set(t, function() {
            n.resolve();
        });
        return n.promise();
    };
    var n = function(r) {
        var n = $.Deferred();
        gingerModule.get("gingerchromeext.browser").storage.sync.get(r, function(e) {
            n.resolve(e[r]);
        });
        return n.promise();
    };
    var t = function() {
        var e = {};
        var r = Object.keys(localStorage);
        var n = r.length;
        while (n--) {
            e[r[n]] = localStorage.getItem(r[n]);
        }
        return e;
    };
    var o = function() {
        gingerModule.get("gingerchromeext.browser").storage.onChanged.addListener(function(e) {
            r.trigger("change", e);
            for (key in e) {}
        });
    };
    o();
    return {
        get: n,
        getAll: t,
        set: e,
        listen: r
    };
}, []);

var module = gingerModule.load("gingerchromeext.background.uuid", function() {
    var t = {
        3: /^[0-9A-F]{8}-[0-9A-F]{4}-3[0-9A-F]{3}-[0-9A-F]{4}-[0-9A-F]{12}$/i,
        4: /^[0-9A-F]{8}-[0-9A-F]{4}-4[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i,
        5: /^[0-9A-F]{8}-[0-9A-F]{4}-5[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i,
        all: /^[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}$/i
    };
    function e() {
        var e = "", r, n;
        for (r = 0; r < 32; r++) {
            n = Math.random() * 16 | 0;
            if (r === 8 || r === 12 || r === 16 || r === 20) e += "-";
            e += (r === 12 ? 4 : r === 16 ? n & 3 | 8 : n).toString(16);
        }
        return e;
    }
    function r(e, r) {
        var n = t[r || "all"];
        return n && n.test(e) || false;
    }
    return {
        generate: e,
        isUUID: r
    };
});

gingerModule.get("gingerchromeext.background.init");

gingerModule.get("gingerchromeext.background.contentConnector");
//# sourceMappingURL=background.min.js.map