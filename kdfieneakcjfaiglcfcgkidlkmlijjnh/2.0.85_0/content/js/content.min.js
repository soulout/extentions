/*
Code architecture and implementation by kristof.mihaly@nomo.hu
For Ginger Software Ltd.
Ginger Grammar Checker Chrome Extension
*/

var $gingerWidgetJquery = $.noConflict(true);

if (!gingerModule) {
    var gingerModule = function(e, t) {
        var o = {};
        var n = function(e) {
            var t = o[e];
            t.module = t.classCache();
            t.isInited = true;
        };
        var r = function(e, t, n) {
            if (o[e]) {}
            o[e] = {
                classCache: t,
                isInited: false,
                deps: n
            };
            return o[e];
        };
        var i = function(e) {
            if (e && e.length) {
                var t = true;
                for (var n = 0; n < e.length; n++) {
                    if (!i(e[n])) {
                        t = false;
                        break;
                    }
                }
                return t;
            } else {
                return true;
            }
        };
        var g = function(e, t) {
            if (typeof o[e] === "undefined") {
                throw "Module '" + e + "' is not loaded. Check dependency in the end of your module definition.";
            }
            if (!i(e.deps)) {
                throw "Module '" + e + "' doesn't have all dependencies loaded.";
            }
            if (!o[e].isInited) {
                n(e);
            }
            if (t) return o[e].classCache; else return o[e].module;
        };
        var a = function(e) {
            if (!o[e]) {
                console.log(e, "not added to project or has not been loaded");
                return false;
            } else if (!o[e].isInited) {
                console.log("module ", e, "not loaded, because");
                var t = o[e].deps;
                if (t.length) {
                    var n = true;
                    for (var r = 0; r < t.length; r++) {
                        var i = t[r];
                        n = n && a(i);
                    }
                    return n;
                } else {
                    return true;
                }
            } else {
                return true;
            }
        };
        return {
            load: r,
            get: g,
            debug: a
        };
    }();
}

(function() {
    var e = gingerModule.load("widget.ajaxQueue", function() {
        var c = $gingerWidgetJquery({});
        var e = function() {
            c.clearQueue();
        };
        $gingerWidgetJquery.ajaxQueue = function(r) {
            var i, o = $gingerWidgetJquery.Deferred(), g = o.promise();
            var e = c.queue(a);
            g.abort = function(e) {
                if (i && i.abort) {
                    return i.abort(e);
                }
                var t = c.queue(), n = $gingerWidgetJquery.inArray(a, t);
                if (n > -1) {
                    t.splice(n, 1);
                }
                o.rejectWith(r.context || r, [ g, e, "" ]);
                return g;
            };
            function a(e) {
                i = $gingerWidgetJquery.ajax(r).done(o.resolve).fail(o.reject);
            }
            return g;
        };
        return {
            flush: e
        };
    });
})();

(function() {
    var e = gingerModule.load("widget.api", function() {
        var o = $gingerWidgetJquery({});
        var e = {};
        var g = gingerModule.get("widget.cache");
        var a = {};
        var t = null;
        var n = 600;
        var r = [];
        var i = function() {
            if (r.length) r[0]();
        };
        var c = function(t) {
            var n = $gingerWidgetJquery.Deferred();
            if (t) {
                r.push(function() {
                    var e = this;
                    $gingerWidgetJquery.ajax(t).then(function(e) {
                        r.splice(0, 1);
                        i();
                        n.resolve(e);
                    }, function(e) {
                        r.splice(0, 1);
                        i();
                        n.reject(e);
                    });
                });
            }
            if (r.length === 1) {
                i();
            }
            return n.promise();
        };
        var l = function(t, n) {
            t = t.replace(/(^\s+|\s+$|\W+)/g, "");
            var e = g.get("api.wordSpell", t);
            if (e) {
                n(e);
            } else {
                f(true);
                var r = {
                    securedPage: false,
                    authToken: gingerModule.get("widget.config").get("token"),
                    userIdentifier: gingerModule.get("widget.session").get("userId"),
                    apiKey: gingerModule.get("widget.config").get("apiKey"),
                    lang: gingerModule.get("widget.config").get("dialect"),
                    clientVersion: gingerModule.get("widget.config").get("version"),
                    text: t,
                    isFirstInPhrase: false
                };
                c({
                    url: "https://servicesht.gingersoftware.com/Dictionary/jsonSecured/IsUserSpelledCorrectly",
                    data: r,
                    datatype: "jsonp",
                    jsonpCallback: "gingerModuleApi.checkWordSpell"
                }).then(function(e) {
                    f(false);
                    if (e.ExceptionType) {
                        return;
                    }
                    g.set("api.wordSpell", t, e);
                    n(e);
                }, function() {
                    f(false);
                });
            }
        };
        var d = function(e, t) {
            var i = e.text;
            var n = g.get("api.sentence", i);
            if (n) {
                if (n.response !== null) {
                    t(JSON.parse(JSON.stringify(n.response)));
                } else {
                    n.cb.push(t);
                }
            } else {
                g.set("api.sentence", i, {
                    response: null,
                    cb: [ t ]
                });
                if (e.id != null && a.sentenceId === e.id && a.abort) {
                    f(false);
                    a.abort();
                }
                var r = {
                    securedPage: false,
                    userIdentifier: gingerModule.get("widget.session").get("userId"),
                    lang: gingerModule.get("widget.config").get("dialect"),
                    apiKey: gingerModule.get("widget.config").get("apiKey"),
                    clientVersion: gingerModule.get("widget.config").get("version"),
                    text: e.text,
                    isOnTheFly: false
                };
                f(true);
                a = c({
                    url: "https://services.gingersoftware.com/Ginger/correct/jsonSecured/GingerTheUserTextFull",
                    data: r,
                    method: "GET"
                }).then(function(e) {
                    f(false);
                    o.trigger("grammarcheck.sent");
                    if (e.ExceptionType) {
                        g.remove("api.sentence", i);
                        return;
                    }
                    var t = g.get("api.sentence", i);
                    if (t && t.cb) {
                        for (var n = 0; n < t.cb.length; n++) {
                            var r = gingerModule.get("widget.utils").clone(e);
                            if (t.cb[n]) t.cb[n](r);
                        }
                    }
                    g.set("api.sentence", i, {
                        response: e
                    });
                }, function() {
                    f(false);
                    g.remove("api.sentence", i);
                });
                a.sentenceId = e.id;
            }
        };
        var s = function(e, t) {
            var n = {
                userIdentifier: gingerModule.get("widget.session").get("userId"),
                apiKey: gingerModule.get("widget.config").get("apiKey"),
                lang: gingerModule.get("widget.config").get("dialect"),
                authToken: gingerModule.get("widget.config").get("token"),
                clientVersion: gingerModule.get("widget.config").get("version")
            };
            n = gingerModule.get("widget.utils").merge(e, n);
            c({
                url: "https://data.gingersoftware.com/clientdata/jsonSecured/UserIgnoredCorrection",
                data: n,
                datatype: "jsonp",
                jsonpCallback: "gingerModuleApi.ignoreCorrection",
                success: function(e) {
                    if (t) t(e);
                },
                error: function() {
                    console.log("error");
                }
            });
        };
        var u = 0;
        var f = function(e) {
            if (t) t = clearTimeout(t);
            if (e) {
                u++;
                if (u == 1) o.trigger("ajax.start");
            } else {
                u--;
                if (u == 0) o.trigger("ajax.end");
            }
        };
        var v = function(t, n) {
            var e = {
                userIdentifier: gingerModule.get("widget.session").get("userId"),
                apiKey: gingerModule.get("widget.config").get("apiKey"),
                lang: gingerModule.get("widget.config").get("dialect"),
                authToken: gingerModule.get("widget.config").get("token"),
                clientVersion: gingerModule.get("widget.config").get("version"),
                word: t,
                securedPage: false
            };
            c({
                url: "https://services.gingersoftware.com/Ginger/correct/jsonSecured/AddToPersonalDictionary",
                data: e,
                datatype: "jsonp",
                jsonpCallback: "gingerModuleApi.addToPersonalDictionary",
                success: function(e) {
                    o.trigger("dictionary.added", t);
                    if (n) n(e);
                },
                error: function() {
                    console.log("error");
                }
            });
        };
        var h = function() {
            var e = {};
            var i = g.dump();
            var t = function(e) {
                if (!i[e]) return {};
                var t = {};
                for (var n in i[e]) {
                    var r = i[e][n];
                    if (r.response) t[n] = r;
                }
                return t;
            };
            e["api.wordSpell"] = t("api.wordSpell");
            e["api.sentence"] = t("api.sentence");
            return e;
        };
        var m = function(e) {
            for (var t in e) {
                for (var n in e[t]) {
                    g.set(t, n, e[t][n]);
                }
            }
        };
        var p = function() {};
        p();
        return {
            checkWordSpell: l,
            ignoreMistake: s,
            checkSentence: d,
            addToDictionary: v,
            dumpCorrectionCache: h,
            restoreCorrectionCache: m,
            listen: o
        };
    }, [ "widget.utils", "widget.cache", "widget.ajaxQueue", "widget.session" ]);
})();

(function() {
    var e = gingerModule.load("widget.cache", function() {
        var r = {};
        var e = function(e, t, n) {
            if (!e) e = "default";
            if (!r[e]) r[e] = {};
            r[e][t] = n;
            return n;
        };
        var t = function(e, t) {
            if (r[e] && r[e][t]) return r[e][t]; else return null;
        };
        var n = function() {
            return r;
        };
        var i = function(e) {
            r = e;
        };
        var o = function(e, t) {
            return delete r[e][t];
        };
        var g = function() {
            r = {};
        };
        return {
            set: e,
            get: t,
            remove: o,
            flush: g,
            dump: n,
            restore: i
        };
    });
})();

(function() {
    var e = gingerModule.load("widget.caret", function() {
        var e = function(e, t) {
            e = $gingerWidgetJquery(e).get(0);
            var n = e;
            var r = n && n.getAttribute("contenteditable");
            if (arguments.length === 1) {
                if (n) {
                    if (window.getSelection) {
                        if (r) {
                            var i = window.getSelection().getRangeAt(0), o = i.cloneRange();
                            o.selectNodeContents(n);
                            o.setEnd(i.endContainer, i.endOffset);
                            return o.toString().length;
                        }
                        return n.selectionStart;
                    }
                    if (n.selectionStart) return n.selectionStart;
                }
                return;
            }
            if (n) {
                if (t == -1) t = e[r ? "text" : "val"]().length;
                if (window.getSelection) {
                    if (r) {
                        n.focus();
                        window.getSelection().collapse(n.firstChild, t);
                    } else n.setSelectionRange(t, t);
                }
                if (!r) n.focus();
            }
        };
        return {
            get: e
        };
    }, []);
})();

(function() {
    var e = gingerModule.load("widget.config", function() {
        var n = {
            userId: null,
            apiKey: null,
            version: "0.0.136",
            widgetUid: null,
            charLimit: null,
            source: null,
            dialect: "US",
            platform: "chrome"
        };
        var e = function(e) {
            return e ? n[e] : n;
        };
        var t = function(e, t) {
            n[e] = t;
            return n;
        };
        var r = function(e) {
            n = gingerModule.get("widget.utils").merge(n, e);
        };
        return {
            get: e,
            set: t,
            merge: r
        };
    }, [ "widget.utils" ]);
})();

(function() {
    var e = gingerModule.load("widget.contentManager", function() {
        var c = function(e) {
            e = e.replace(/<style([\s\S]*?)<\/style>/gi, "");
            e = e.replace(/<script([\s\S]*?)<\/script>/gi, "");
            e = e.replace(/<\/div>/gi, "\n");
            e = e.replace(/<\/li>/gi, "\n");
            e = e.replace(/<li>/gi, "  *  ");
            e = e.replace(/<\/ul>/gi, "\n");
            e = e.replace(/<\/p>/gi, "\n");
            e = e.replace(/<br\s*[\/]?>/gi, "\n");
            e = e.replace(/<[^>]+>/gi, "");
            e = $gingerWidgetJquery("<textarea />").html(e).text();
            return e;
        };
        var l = function(e) {
            e = e.replace(/\[data-block='true'\]/, "~~~~~~~~~");
            e = e.replace(/<[^>]+>/gi, "");
            e = e.replace(/~~~~~~~~~/, "\n");
            e = $gingerWidgetJquery("<textarea />").html(e).text();
            e = e.replace(/\s+$/, "");
            return e;
        };
        var d = function(e, t) {
            if (!e) e = [];
            if (/textarea/i.test(t.nodeName)) {
                e.push("change");
            }
            for (var n = 0; n < e.length; n++) {
                var r = document.createEvent("CustomEvent");
                r.initCustomEvent(e[n], true, true, null);
                t.dispatchEvent(r);
            }
        };
        var e = function(e, t, n, r) {
            var i = gingerModule.get("widget.utils").isRichTextElement(e);
            var o = i && $gingerWidgetJquery(e).find("[data-block='true']").length > 0 || i && $gingerWidgetJquery(e).closest("[data-reactroot]").length;
            var g = gingerModule.get("widget.siteSettings").get(window.location.href, e);
            var a = e.getAttribute("ginger-widget-mode");
            if (a && a === "contenteditable") {
                o = false;
            }
            if (/<[^>]+>|&\w+;/.test(t)) {
                if (o && i) {
                    t = l(t);
                } else if (!i || o) {
                    t = c(t);
                }
            }
            if (typeof n === "undefined" && typeof r === "undefined") {
                if (i && !o) {
                    $gingerWidgetJquery(e).html(t);
                    d(g.postRewriteEvents, e);
                    return;
                } else if (!i && !o) {
                    $gingerWidgetJquery(e).val(t);
                    d(g.postRewriteEvents, e);
                    return;
                }
            }
            if (!n) n = 0;
            if (!r) r = u(e).length;
            gingerModule.get(g.rewriter).rewrite(e, t, n, r);
            d(g.postRewriteEvents, e);
            return t;
        };
        var g = function(e) {
            var t = $gingerWidgetJquery("<div></div>").html(e.innerHTML).get(0);
            $gingerWidgetJquery(t).find("[data-block='true']").prepend(String.fromCharCode(31));
            value = $gingerWidgetJquery(t).text().replace(/^\x1F/, "");
            return value;
        };
        var a = function(e) {
            var t = e.innerHTML;
            if (!t) return "";
            function n(e, t) {
                return (t ? "(" : "(?:") + e + ")";
            }
            if (e === document.body) {
                t = t.replace(/<div class="ginger-extension-writer".*$/i, "").replace(/<div class="ginger-module-correctionBubble".*$/i, "");
            }
            var r = "br|p|div|h\\d|table|ol|ul|li|tbody|de|dt|td|th|tr|sub|sup|caption|textarea|button|select|pre|address|body";
            var i = "[^>]*";
            var o = "/?";
            var g = {
                compactBlockTags: {
                    pattern: new RegExp("<" + n(o, true) + n(r) + i + ">", "gi"),
                    replace: "<+>"
                },
                aggregateConsecutiveOpeningBlockTags: {
                    pattern: new RegExp("(?:<" + n(r) + i + ">)+", "gi"),
                    replace: "<ginger-block-elem>"
                },
                aggregateConsecutiveClosingBlockTags: {
                    pattern: new RegExp("(?:</" + n(r) + i + ">)+", "gi"),
                    replace: "</ginger-block-elem>"
                },
                aggregateConsecutiveOpenClosingBlockTags: {
                    pattern: new RegExp("(?:</ginger-block-elem><ginger-block-elem>)", "gi"),
                    replace: "<ginger-block-break/>"
                },
                representBlockElemDifferencesWithNewLineRepresentation: {
                    pattern: new RegExp("(?:<(ginger-block-elem|/ginger-block-elem|ginger-block-break/)>)", "gi"),
                    replace: String.fromCharCode(31)
                },
                removeTrailingAndStartingNewLines: {
                    pattern: new RegExp("(^|$)"),
                    replace: ""
                },
                removeNewLines: {
                    pattern: /\n/gi,
                    replace: " "
                }
            };
            t = s(t, g.aggregateConsecutiveOpeningBlockTags);
            t = s(t, g.aggregateConsecutiveClosingBlockTags);
            t = s(t, g.compactBlockTags);
            t = s(t, g.aggregateConsecutiveOpenClosingBlockTags);
            t = s(t, g.representBlockElemDifferencesWithNewLineRepresentation);
            if ($gingerWidgetJquery(e).css("whiteSpace") !== "pre-wrap") {
                t = s(t, g.removeNewLines);
            }
            t = s(t, g.removeTrailingAndStartingNewLines);
            var a = document.createElement("div");
            a.innerHTML = t;
            $gingerWidgetJquery(a).find(".XjviVd").remove();
            t = a.textContent;
            return t;
        };
        var s = function(e, t) {
            return e.replace(t.pattern, t.replace);
        };
        var u = function(e) {
            var t;
            var n = gingerModule.get("widget.utils").isRichTextElement(e);
            var r = n && $gingerWidgetJquery(e).find("[data-block='true']").length > 0 || n && $gingerWidgetJquery(e).closest("[data-reactroot]").length;
            var i = e.getAttribute("ginger-widget-mode");
            if (i && i === "contenteditable") {
                r = false;
            }
            var o = n && /pluggable-input-body/.test(e.className);
            if (r || o) {
                t = g(e);
            } else if (n) {
                t = a(e);
            } else {
                t = $gingerWidgetJquery(e).val();
            }
            t = t.replace("^\n+", "");
            return t;
        };
        return {
            setVal: e,
            getVal: u
        };
    }, [ "widget.utils" ]);
})();

(function() {
    var e = gingerModule.load("widget.correctionBubble", function() {
        var M = $gingerWidgetJquery({});
        var e;
        var W;
        var $;
        var r;
        var q;
        var n;
        var t;
        var i;
        var J = 28;
        var C = 0;
        var T = null;
        var o = 600;
        var k = null;
        var E = {};
        var S = null;
        var L = null;
        var g = function(e, t, n) {
            if (!W || W.parent().length === 0) N();
            if ($gingerWidgetJquery(W).is(":hover") && $gingerWidgetJquery(W).is(":visible")) return;
            if (gingerModule.get("widget.licenseLimits").isCapacityLimited()) {
                A(true);
            } else {
                A(false);
            }
            I();
            if (T) T = clearTimeout(T);
            if (gingerModule.get("widget.session").isLoggedIn()) {
                B(false);
            } else {
                B(true);
            }
            var r = $gingerWidgetJquery("#gwmw-" + e.id);
            if (S && S.id === e.id) {
                return;
            }
            S = e;
            L = t;
            k = n;
            E = {
                sentenceId: t.id,
                correctionId: e.id,
                sentence: t,
                correction: e
            };
            $gingerWidgetJquery(q).empty();
            var i = [];
            var o = e.UXFrgFrom;
            var g = e.UXFrgTo;
            var a = o;
            var c = gingerModule.get("widget.phraseService").getSentenceFragments(t, o, g);
            for (var l = 0; l < c.length; l++) {
                var d;
                if (c[l].correction) {
                    var s = c[l].correction.Suggestions.length != 0;
                    d = document.createElement("gwbm");
                    d.id = "gwbm-" + c[l].correction.id;
                    d.className = "ginger-module-correctionBubbleService-mistake-type-" + c[l].correction.Type;
                    if (s) {
                        d.appendChild(document.createTextNode(c[l].correction.Suggestions[0].Text));
                    } else {
                        d.appendChild(document.createTextNode(c[l].text));
                        d.className += " ginger-module-correctionBubbleService-mistake-nosuggestion";
                    }
                    (function(t, e) {
                        var n = document.createElement("gwbmo");
                        if (m) {
                            n.className = "ginger-module-correctionBubbleService-mistake-bubble-under";
                        }
                        var r = document.createElement("ga");
                        var i = document.createElement("ga");
                        var o = document.createElement("ga");
                        r.className = "ginger-module-correctionBubbleService-mistake-bubble-approve";
                        i.className = "ginger-module-correctionBubbleService-mistake-bubble-ignore";
                        o.className = "ginger-module-correctionBubbleService-mistake-bubble-add";
                        r.title = "Approve the Suggestion";
                        i.title = "Ignore the Suggestion";
                        o.title = "Add to Personal Dictionary";
                        r.onmousedown = function(e) {
                            M.trigger("approved.mistake", E);
                            if (!gingerModule.get("widget.session").isLoggedIn()) {
                                M.trigger("unauthenticated.approve");
                            } else if (gingerModule.get("widget.licenseLimits").isCapacityLimited()) {
                                M.trigger("limited.approve");
                            } else {
                                F("approve", {
                                    correctionId: t.id
                                }, true);
                                $gingerWidgetJquery("#gwbm-" + t.id).replaceWith(document.createTextNode($gingerWidgetJquery("#gwbm-" + t.id).text()));
                                I();
                            }
                            e.stopPropagation();
                            e.preventDefault();
                            return false;
                        };
                        i.onmousedown = function(e) {
                            M.trigger("ignored.mistake", E);
                            F("ignore", {
                                correctionId: t.id
                            }, true);
                            $gingerWidgetJquery("#gwbm-" + t.id).replaceWith(document.createTextNode($gingerWidgetJquery("#gwbm-" + t.id).text()));
                            I();
                            e.stopPropagation();
                            e.preventDefault();
                            return false;
                        };
                        o.onmousedown = function(e) {
                            if (!gingerModule.get("widget.session").isLoggedIn()) {
                                M.trigger("unauthenticated.addToDictionary");
                            } else {
                                M.trigger("addedtodict.mistake", E);
                                F("addToDictionary", {
                                    correctionId: t.id
                                }, true);
                            }
                            I();
                            e.stopPropagation();
                            e.preventDefault();
                            return false;
                        };
                        if (s) {
                            n.appendChild(r);
                        }
                        if (c[l].correction.Type == 1 && c[l].correction.Mistakes[0].CanAddToDict && !gingerModule.get("widget.config").get("disableAddToDictionary")) {
                            n.appendChild(o);
                        } else {
                            n.appendChild(i);
                        }
                        e.appendChild(n);
                    })(c[l].correction, d);
                } else {
                    d = document.createTextNode(c[l].text);
                }
                $gingerWidgetJquery(q).get(0).appendChild(d);
            }
            W.show();
            var u = $gingerWidgetJquery(r).offset();
            var f = $gingerWidgetJquery(document.body).offset();
            if (f.left) {
                u.left -= f.left;
            }
            var v = $gingerWidgetJquery(r).height();
            var h = $gingerWidgetJquery(r).width();
            W.css("padding", C);
            var m;
            var p = 22;
            var w = u.top - J;
            if (w - p < 0) {
                m = true;
                w = u.top + J;
            } else if (w - p <= $gingerWidgetJquery("html,body").scrollTop()) {
                m = true;
                w = u.top + J;
            }
            W.css("top", w);
            var b = W.offset();
            var y = W.width();
            M.trigger("show", {
                correction: S,
                sentence: L
            });
            var x = $gingerWidgetJquery($).outerWidth();
            if (b.top === w && b.left <= u.left && b.left + y >= u.left + h) {} else {
                W.css("left", u.left);
            }
            if (u.left + x > $gingerWidgetJquery(window).width()) {
                W.css("left", $gingerWidgetJquery(window).width() - x - 10);
            }
            return;
        };
        var a = function(e, t) {
            if (W) {
                if ($gingerWidgetJquery(W).is(":visible")) {
                    M.trigger("hide", {
                        correction: S,
                        sentence: L
                    });
                }
                W.hide();
            }
            S = null;
            L = null;
        };
        var I = function() {
            if (T) T = clearTimeout(T);
        };
        var c = function(e, t) {
            I();
            T = setTimeout(function() {
                l();
            }, o);
        };
        var N = function() {
            var e = document.body.getAttribute("contenteditable") ? document.body.parentNode : document.body;
            W = $gingerWidgetJquery("<gdiv class='ginger-module-correctionBubble'></gdiv>").appendTo(e);
            r = $gingerWidgetJquery("<gdiv class='ginger-module-correctionBubble-container ginger-module-correctionBubble-container-loggedout'><gdiv class='ginger-module-correctionBubble-login'>Log in</gdiv><gdiv class='ginger-module-correctionBubble-body'>to use Ginger</gdiv></gdiv>").appendTo(W);
            $ = $gingerWidgetJquery("<gdiv class='ginger-module-correctionBubble-container ginger-module-correctionBubble-container-loggedin'></gdiv>").appendTo(W);
            n = $gingerWidgetJquery("<gdiv class='ginger-module-correctionBubble-limited'>Limited mode</gdiv>").appendTo($);
            n.on("click", function(e) {
                gingerModule.get("widget.licenseLimits").approvalsUsed(0);
                e.stopPropagation();
                e.preventDefault();
                return false;
            });
            r.on("click", function(e) {
                M.trigger("unauthenticated.approve.all");
                e.stopPropagation();
                e.preventDefault();
                return false;
            });
            q = $gingerWidgetJquery("<gdiv class='ginger-module-correctionBubble-body'></gdiv>").appendTo($);
            var t = $gingerWidgetJquery("<ga href='javascript:' class='ginger-module-correctionBubble-close' title='Ignore mistake'>&times;</ga>").appendTo($);
            t.on("mousedown", function(e) {
                e.stopPropagation();
                e.preventDefault();
                if (gingerModule.get("widget.licenseLimits").isCapacityLimited()) {
                    M.trigger("limited.approve");
                } else {
                    M.trigger("ignore.all", E);
                    F("ignoreAll");
                }
                return false;
            });
            q.on("mousedown", function(e) {
                e.stopImmediatePropagation();
                e.preventDefault();
                e.stopPropagation();
                if (!gingerModule.get("widget.session").isLoggedIn()) {
                    M.trigger("unauthenticated.approve.all");
                } else if (gingerModule.get("widget.licenseLimits").isCapacityLimited()) {
                    M.trigger("limited.approve.all");
                } else {
                    M.trigger("approve.all", E);
                    F("approveAll");
                    a();
                }
                return false;
            });
            if (W.closest("[contenteditable]").length) {
                W.attr("contenteditable", false);
            }
            W.hide();
            $gingerWidgetJquery(W).on("mouseleave", function e(t) {
                c();
            });
            $gingerWidgetJquery(W).on("mouseenter", function e(t) {
                setTimeout(I, 60);
            });
            A(false);
        };
        var F = function(e, t, n) {
            if (k) {
                k(e, t ? t : E);
            }
            if (!n) a();
        };
        var l = function() {
            k = null;
            a();
        };
        var B = function(e) {
            var t = $gingerWidgetJquery($);
            var n = $gingerWidgetJquery(r);
            if (e) {
                t.hide();
                n.show();
            } else {
                t.show();
                n.hide();
            }
        };
        var A = function(e) {
            if (e) {
                $gingerWidgetJquery(W).addClass("ginger-module-correctionBubble-limitedmode");
            } else {
                $gingerWidgetJquery(W).removeClass("ginger-module-correctionBubble-limitedmode");
            }
        };
        var d = function() {};
        return {
            show: g,
            hide: a,
            gracefulHide: c,
            listen: M,
            setLimitedVisibility: A,
            init: d
        };
    }, [ "widget.utils", "widget.inputFinder", "widget.licenseLimits", "widget.session" ]);
})();

(function() {
    var e = gingerModule.load("widget.correctionService", function(e) {
        var s = [];
        var a = function(a, c) {
            var l = a.words.length;
            var d = [];
            if (a.words.length === 0) {
                c(a);
            }
            for (var e = 0; e < a.words.length; e++) {
                if (s.indexOf(a.words[e]) === -1) (function(e) {
                    var o = a.words[e];
                    var g = gingerModule.get("widget.utils").trimAndMatch(o.text);
                    gingerModule.get("widget.api").checkWordSpell(g.text, function(e) {
                        o.correction = e.IsUserSpelledCorrectlyResult;
                        if (!o.correction.IsCorrect) {
                            var t = o.startsAt + g.pre.length - a.startsAt;
                            var n = t + g.text.length;
                            n = n - 1;
                            if (o.correction.IsCorrect !== true) {
                                var r = a.correction && a.correction.Corrections ? u(a.correction.Corrections, t, n) : null;
                                var i = {
                                    From: t,
                                    To: n,
                                    UXFrgFrom: t,
                                    UXFrgTo: n,
                                    Type: 1,
                                    Suggestions: [],
                                    Mistakes: [ {
                                        From: t,
                                        To: n,
                                        CanAddToDict: true
                                    } ],
                                    id: r ? r.id : gingerModule.get("widget.utils").generateUID()
                                };
                                d.push(i);
                            }
                        }
                        l--;
                        if (l == 0) {
                            if (!a.correction) {
                                a.correction = {
                                    checkType: "shallow"
                                };
                            }
                            a.correction.Corrections = d;
                            c(a);
                        }
                    });
                })(e);
            }
        };
        var c = function(n, r) {
            n = JSON.parse(JSON.stringify(n));
            if (n.words.length) {
                var i = n.words.length - 1;
                var e = n.words[i].text;
                var t = /[\s\n]+$/g;
                var o = e.match(t);
                if (o) {
                    n.text = n.text.replace(t, "");
                    n.words[i].text = e.replace(t, "");
                }
            }
            gingerModule.get("widget.api").checkSentence(n, function(e) {
                try {
                    n.correction = e;
                    if (o) {
                        n.words[i].text += o;
                        n.text += o;
                    }
                    for (var t = 0; t < n.correction.Corrections.length; t++) {
                        var e = n.correction.Corrections[t];
                        if (!e.id) {
                            e.id = gingerModule.get("widget.utils").generateUID();
                        }
                    }
                    r(n);
                } catch (e) {
                    if (window.Raven && window.Raven.setExtraContext) {
                        Raven.captureException(e);
                    } else {
                        if (console && console.error) console.error(e);
                        throw new Error(e);
                    }
                    r(n);
                }
            });
        };
        var t = function(e, t, n) {
            e.ignored = true;
            if (e.Type === 1) {
                var r = t.text;
                var i = r.substring(e.From, e.To + 1);
                var o = e.Suggestions.length ? e.Suggestions[0].Text : t.text.substring(e.From, e.To + 1);
                var g = r.substring(e.UXFrgFrom, e.UXFrgTo);
                var a = e.TopLrnCatId;
                var c = gingerModule.get("widget.config").get("dialect");
                gingerModule.get("widget.api").ignoreMistake({
                    ignoredWord: i,
                    suggestedCorrection: o,
                    uxFragment: g,
                    originalSentence: r,
                    categoryId: a,
                    dictionaryLanguage: c
                }, function(e) {
                    if (n) n(e);
                });
                s.push(i);
            }
            return e;
        };
        var l = function(e) {
            if (!e.correction.Corrections || !e.correction.Corrections.length) {
                return null;
            }
            var t = false;
            var n = [];
            for (var r = 0; r < e.correction.Corrections.length; r++) {
                var i = e.correction.Corrections[r];
                if (!i.id) {
                    i.id = gingerModule.get("widget.utils").generateUID();
                }
                var o = e.text.substring(i.From, i.To + 1);
                if (i.Type === 1 && s.indexOf(o) !== -1) {
                    i.ignored = true;
                    t = true;
                }
            }
            return t ? e : null;
        };
        var n = function(r, i, o) {
            if (!r) return;
            var g = r.length;
            for (var e = 0; e < r.length; e++) {
                (function(n) {
                    if (r[n].text.match(/^\s*$/)) {
                        g--;
                    } else {
                        var e = !!r[n].activeSentence;
                        if (e) {
                            a(r[n], function(e) {
                                r[n] = e;
                                e.correction.checkType = "shallow";
                                g--;
                                i(r);
                                if (g === 0 && o) {
                                    o(r);
                                }
                            });
                        } else {
                            if (!r[n].correction || r[n].correction.checkType !== "deep") {
                                c(r[n], function(e) {
                                    e.correction.checkType = "deep";
                                    var t = l(e);
                                    if (t) {
                                        r[n] = d(r[n], t);
                                    } else {
                                        r[n] = d(r[n], e);
                                    }
                                    g--;
                                    i(r);
                                    if (g === 0 && o) {
                                        o(r);
                                    }
                                });
                            } else {
                                var t = l(r[n]);
                                g--;
                                if (t) {
                                    r[n] = t;
                                    i(r);
                                }
                            }
                        }
                    }
                    if (g === 0 && o) {
                        i(r);
                        o(r);
                    }
                })(e);
            }
        };
        var r = function() {
            return s;
        };
        var i = function(e) {
            s = e;
        };
        var u = function(e, t, n) {
            for (var r = 0; r < e.length; r++) {
                var i = e[r];
                if (i.From === t && i.To === n) {
                    return i;
                }
            }
            return null;
        };
        var d = function(e, t) {
            try {
                for (var n = 0; n < e.correction.Corrections.length; n++) {
                    var r = e.correction.Corrections[n];
                    var i = u(t.correction.Corrections, r.From, r.To);
                    if (i && i.Type === r.Type) {
                        i.id = r.id;
                    }
                }
            } catch (e) {
                if (false && console && console.warn) {
                    console.warn("grammar check result merge catch", e);
                }
            }
            return t;
        };
        var f = function(e, t) {
            if (!t.correction || !t.correction.Corrections.length) {
                return e;
            }
            var n = gingerModule.get("widget.utils").diffString(t.text, e.text);
            if (n.preCommon == 0 && n.postCommon == 0) {
                return e;
            }
            for (var r = 0; r < t.correction.Corrections.length; r++) {
                var i = t.correction.Corrections[r];
                if (n.to <= i.From) {
                    i.UXFrgFrom += n.diff;
                    i.UXFrgTo += n.diff;
                    i.From += n.diff;
                    i.To += n.diff;
                } else if (n.from >= i.To + 1) {} else {
                    t.correction.Corrections.splice(r, 1);
                    r--;
                }
            }
            e.correction = t.correction;
            return e;
        };
        var o = function(e, t) {
            var n = 0;
            var r = 0;
            if (!t.length || !e.length) {
                return e;
            }
            var i;
            var o;
            for (var g = 0; g < e.length && g < t.length; g++) {
                if (t[g].text === e[g].text) {
                    n = g + 1;
                    e[g].correction = t[g].correction;
                    e[g].id = t[g].id;
                    t[g] = e[g];
                } else {
                    i = gingerModule.get("widget.utils").trimAndMatch(t[g].text);
                    o = gingerModule.get("widget.utils").trimAndMatch(e[g].text);
                    if (i.pre + i.text === o.pre + o.text) {
                        n = g + 1;
                        e[g].correction = t[g].correction;
                        e[g].id = t[g].id;
                        t[g] = e[g];
                    } else {
                        break;
                    }
                }
            }
            if (e.length <= n) {
                return e;
            }
            for (var g = 0; g < e.length && g < t.length; g++) {
                if (t.length - g - 1 <= n - 1) break;
                if (e.length - g - 1 <= n - 1) break;
                if (t[t.length - g - 1].text === e[e.length - g - 1].text) {
                    r = g + 1;
                    e[e.length - g - 1].correction = t[t.length - g - 1].correction;
                    e[e.length - g - 1].id = t[t.length - g - 1].id;
                } else {
                    i = gingerModule.get("widget.utils").trimAndMatch(t[t.length - g - 1].text);
                    o = gingerModule.get("widget.utils").trimAndMatch(e[e.length - g - 1].text);
                    if (i.pre + i.text === o.pre + o.text) {
                        r = g + 1;
                        e[e.length - g - 1].correction = t[t.length - g - 1].correction;
                        e[e.length - g - 1].id = t[t.length - g - 1].id;
                    } else {
                        break;
                    }
                }
            }
            for (var g = r; g < e.length - n && g < t.length - n; g++) {
                if (t.length - g - 1 < n) {
                    e[e.length - g - 1].id = gingerModule.get("widget.utils").generateUID();
                } else if (e.length - g - 1 < n) {} else {
                    if (t[t.length - g - 1].correction && t[t.length - g - 1].correction.Corrections.length) {
                        e[e.length - g - 1] = f(e[e.length - g - 1], t[t.length - g - 1]);
                        if (e[e.length - g - 1].correction) e[e.length - g - 1].correction.checkType = "shallow";
                    } else {}
                }
            }
            return e;
        };
        var g = function() {
            s = [];
        };
        return {
            correct: n,
            flush: g,
            correctSpellingOfSentence: a,
            mergeSentenceCorrections: f,
            mergeCorrections: o,
            ignoreMistake: t,
            getIgnoredWords: r,
            setIgnoredWords: i
        };
    }, [ "widget.phraseService", "widget.utils" ]);
})();

(function() {
    var e = gingerModule.load("widget.ghostModifiers", function() {
        var r = function(e) {
            if (!window.location) return null;
            var t = window.location.hostname.split(":")[0];
            return t.indexOf(e) != -1;
        };
        var i = {};
        i.faceBook = {
            domain: "facebook.com",
            modifier: function(e, t) {
                var n = $gingerWidgetJquery(e).closest("._2ihx._i-o").length;
                if (n) {
                    $gingerWidgetJquery(e).css("textAlign", "center");
                }
            }
        };
        i.unitTest = {
            domain: "localhost",
            modifier: function(e, t) {
                return;
            }
        };
        var e = function(e, t) {
            for (var n in i) {
                if (r(i[n].domain)) {
                    i[n].modifier(e, t);
                }
            }
        };
        return {
            process: e
        };
    });
})();

(function() {
    var e = gingerModule.load("widget.highlighters.ghost", function() {
        var g;
        var o;
        var d;
        var s = "gwsw";
        var u = "gwmw";
        var a = true;
        var c = false;
        var l = [];
        var t = function(e) {
            var t = document.styleSheets, n = [];
            if (!t) return;
            e.matches = e.matches || e.webkitMatchesSelector || e.mozMatchesSelector || e.msMatchesSelector || e.oMatchesSelector;
            try {
                for (var r in t) {
                    var i = t[r].rules || t[r].cssRules;
                    for (var o in i) {
                        if (e.matches(i[o].selectorText)) {
                            n.push(i[o].cssText);
                            if (/[+]/.test(i[o].selectorText)) {
                                return true;
                            }
                        }
                    }
                }
            } catch (e) {}
            return false;
        };
        var f = function() {
            if (!$gingerWidgetJquery(o).is(":visible")) {
                return;
            }
            var e = $gingerWidgetJquery(o).position();
            var t = window.devicePixelRatio || 1;
            if ($gingerWidgetJquery(d).css("box-sizing") === "border-box") {
                $gingerWidgetJquery(d).css("height", $gingerWidgetJquery(o).outerHeight() / t);
                $gingerWidgetJquery(d).css("width", $gingerWidgetJquery(o).outerWidth() / t);
            } else {
                $gingerWidgetJquery(d).css("height", $gingerWidgetJquery(o).height() / t);
                $gingerWidgetJquery(d).css("width", $gingerWidgetJquery(o).width() / t);
            }
            var n = parseInt($gingerWidgetJquery(o).css("z-index"));
            if (!n) n = 1;
            if (n < 2) n = 2;
            var r = $gingerWidgetJquery(o).data("gingerPositionCache");
            if (!r) {
                r = $gingerWidgetJquery(o).css("position");
                $gingerWidgetJquery(o).data("gingerPositionCache", r);
            }
            var i = r;
            if (i == "fixed") {
                $gingerWidgetJquery(d).css("position", "fixed");
                $gingerWidgetJquery(d).css("z-index", n - 1);
                $gingerWidgetJquery(o).css("z-index", n);
                $gingerWidgetJquery(d).css("top", e.top);
                $gingerWidgetJquery(d).css("left", e.left);
            } else if (i == "relative") {
                $gingerWidgetJquery(d).css("position", "absolute");
                $gingerWidgetJquery(d).css("top", e.top);
                $gingerWidgetJquery(d).css("left", e.left);
                if (c) {
                    $gingerWidgetJquery(d).css("top", e.top);
                    $gingerWidgetJquery(d).css("left", e.left);
                    $gingerWidgetJquery(d).css("z-index", n - 1);
                    $gingerWidgetJquery(o).css("z-index", n);
                }
            } else if (i == "absolute") {
                $gingerWidgetJquery(d).css("position", "absolute");
                $gingerWidgetJquery(d).css("z-index", n - 1);
                $gingerWidgetJquery(o).css("z-index", n);
                $gingerWidgetJquery(d).css("top", e.top);
                $gingerWidgetJquery(d).css("left", e.left);
            } else {
                $gingerWidgetJquery(o).css("position", "relative");
                $gingerWidgetJquery(d).css("position", "absolute");
                $gingerWidgetJquery(d).css("top", e.top);
                $gingerWidgetJquery(d).css("left", e.left);
                if (c) {
                    $gingerWidgetJquery(d).css("top", e.top);
                    $gingerWidgetJquery(d).css("left", e.left);
                    $gingerWidgetJquery(d).css("z-index", n - 1);
                    $gingerWidgetJquery(o).css("z-index", n);
                }
            }
        };
        var v = function(e) {
            return e.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#039;");
        };
        var h = function(e, t) {
            var n = $gingerWidgetJquery("<" + s + " />").get(0);
            n.id = "gws-" + e.id;
            var r = e.preLineBreakCount ? new Array(e.preLineBreakCount + 1).join("\n") : "";
            var i = e.postLineBreakCount ? new Array(e.postLineBreakCount + 1).join("\n") : "";
            if (!e.correction || !e.correction.Corrections.length) {
                n.innerHTML = r + v(e.text) + i;
                return n;
            }
            n.innerHTML += r;
            var o = gingerModule.get("widget.phraseService").getSentenceFragments(e);
            var g = "";
            for (var a = 0; a < o.length; a++) {
                var c;
                if (o[a].correction && !o[a].correction.ignored) {
                    var l = false;
                    if (t.indexOf(o[a].correction.id) === -1 && !$gingerWidgetJquery(d).find("#" + u + "-" + o[a].correction.id).length) {
                        l = true;
                    }
                    c = document.createElement(u);
                    c.className = "ginger-module-highlighter-mistake-type-" + o[a].correction.Type;
                    c.id = "gwmw-" + o[a].correction.id;
                    if (l) {
                        c.className += " ginger-module-highlighter-mistake-anim";
                    }
                    c.appendChild(document.createTextNode(o[a].text));
                } else {
                    c = document.createTextNode(o[a].text);
                }
                n.appendChild(c);
            }
            n.innerHTML += i;
            return n;
        };
        var m = function() {
            if (!g.isEnabled()) return;
            var e = $gingerWidgetJquery(o).css("background");
            var t = $gingerWidgetJquery(o).css("background-image");
            var n = $gingerWidgetJquery(o).css("background-color");
            var r = t == "none" && n == "rgba(0, 0, 0, 0)" ? true : false;
            if (!r) {
                $gingerWidgetJquery(o).get(0).style.setProperty("background", "none", "important");
                $gingerWidgetJquery(o).data("gingerBackgroundCache", e);
            }
            $gingerWidgetJquery(d).css("color", $gingerWidgetJquery(o).css("color"));
            $gingerWidgetJquery(d).css("border-radius", $gingerWidgetJquery(o).css("border-radius"));
            $gingerWidgetJquery(d).css("box-sizing", $gingerWidgetJquery(o).css("box-sizing"));
            $gingerWidgetJquery(d).css("height", $gingerWidgetJquery(o).css("height"));
            $gingerWidgetJquery(d).css("paddingTop", $gingerWidgetJquery(o).css("paddingTop"));
            $gingerWidgetJquery(d).css("paddingLeft", $gingerWidgetJquery(o).css("paddingLeft"));
            $gingerWidgetJquery(d).css("paddingRight", $gingerWidgetJquery(o).css("paddingRight"));
            $gingerWidgetJquery(d).css("paddingBottom", $gingerWidgetJquery(o).css("paddingBottom"));
            $gingerWidgetJquery(d).css("marginTop", $gingerWidgetJquery(o).css("marginTop"));
            $gingerWidgetJquery(d).css("marginLeft", $gingerWidgetJquery(o).css("marginLeft"));
            $gingerWidgetJquery(d).css("marginRight", $gingerWidgetJquery(o).css("marginRight"));
            $gingerWidgetJquery(d).css("marginBottom", $gingerWidgetJquery(o).css("marginBottom"));
            $gingerWidgetJquery(d).css("width", $gingerWidgetJquery(o).css("width"));
            $gingerWidgetJquery(d).css("font-family", $gingerWidgetJquery(o).css("font-family"));
            $gingerWidgetJquery(d).css("direction", $gingerWidgetJquery(o).css("direction"));
            $gingerWidgetJquery(d).css("font-size", $gingerWidgetJquery(o).css("font-size"));
            $gingerWidgetJquery(d).css("line-height", $gingerWidgetJquery(o).css("line-height"));
            $gingerWidgetJquery(d).css("text-align", $gingerWidgetJquery(o).css("text-align"));
            $gingerWidgetJquery(d).css("letter-spacing", $gingerWidgetJquery(o).css("letter-spacing"));
            $gingerWidgetJquery(d).css("font-weight", $gingerWidgetJquery(o).css("font-weight"));
            var i = $gingerWidgetJquery(o).data("gingerBackgroundCache");
            if (i) {
                $gingerWidgetJquery(d).css("background", i);
            }
            $gingerWidgetJquery(d).css({
                color: "rgba(0,0,0,0)"
            });
            $gingerWidgetJquery(d).css({
                display: "block"
            });
            if (gingerModule.get("widget.utils").isRichTextElement(o)) {
                $gingerWidgetJquery(d).css("white-space", "pre-wrap");
            } else {
                $gingerWidgetJquery(d).css("white-space", $gingerWidgetJquery(o).css("white-space"));
            }
            gingerModule.get("widget.ghostModifiers").process(o, d);
        };
        var e = function(e) {
            if (!g.isEnabled() || !gingerModule.get("widget").isEnabled()) return;
            if (!a) return;
            var t = gingerModule.get("widget.utils").clone(e);
            try {
                if (t[t.length - 1].text.match(/\n$/)) {
                    t[t.length - 1].text += "\n";
                }
            } catch (e) {}
            m();
            f();
            var n = $gingerWidgetJquery(d).find(u).map(function() {
                return this.id.substring((u + "-").length);
            }).get();
            var r = $gingerWidgetJquery(d).find(s);
            for (var i = 0; i < t.length || i < r.length; i++) {
                var o = !l[i] || JSON.stringify(t[i]) !== JSON.stringify(l[i]);
                if (!t[i]) {
                    $gingerWidgetJquery(r[i]).remove();
                } else if (!r[i]) {
                    $gingerWidgetJquery(d).append(h(t[i], n));
                } else if (o) {
                    $gingerWidgetJquery(r[i]).replaceWith(h(t[i], n));
                } else {}
            }
            l = t;
            p();
        };
        var p = function() {
            d.scrollTop($gingerWidgetJquery(o).scrollTop());
            d.scrollLeft($gingerWidgetJquery(o).scrollLeft());
        };
        var n = function() {
            var e = $gingerWidgetJquery(o).css("position");
            if (c) {
                d = $gingerWidgetJquery("<div class='ginger-module-highlighter ginger-module-highlighter-ghost'></div>").insertAfter($gingerWidgetJquery(o));
            } else if (e == "static" || e == "relative") {
                d = $gingerWidgetJquery("<div class='ginger-module-highlighter ginger-module-highlighter-ghost'></div>").insertBefore($gingerWidgetJquery(o));
            } else {
                d = $gingerWidgetJquery("<div class='ginger-module-highlighter ginger-module-highlighter-ghost'></div>").insertAfter($gingerWidgetJquery(o));
            }
        };
        var r = function() {
            return $gingerWidgetJquery(d).find(u);
        };
        var i = function(e) {
            if (e) {
                $gingerWidgetJquery(d).show();
            } else {
                $gingerWidgetJquery(d).hide();
            }
            a = !!e;
        };
        var w = function() {
            var e = $gingerWidgetJquery(o).data("gingerBackgroundCache");
            if (e) {
                $gingerWidgetJquery(o).css("background", e);
            }
            $gingerWidgetJquery(o).css("position", "");
            $gingerWidgetJquery(o).css("z-index", "");
            g.events.listen.off("mutation.ghostUpdate");
            $gingerWidgetJquery(o).off("blur", f);
            $gingerWidgetJquery(o).off("scroll", p);
            $gingerWidgetJquery(d).remove();
        };
        var b = function(e) {
            g = e;
            o = g.element;
            c = t(o);
            $gingerWidgetJquery(o).blur(f);
            o.addEventListener("scroll", p);
            g.events.listen.on("mutation.ghostUpdate", function() {
                if (!g.isEnabled() || !gingerModule.get("widget").isEnabled()) return;
                m();
                f();
            });
            n();
            f();
        };
        return {
            refresh: e,
            refreshPosition: f,
            init: b,
            setVisibility: i,
            scrollUpdate: p,
            getMistakeElements: r,
            destroy: w
        };
    }, [ "widget.utils", "widget.phraseService", "widget.ghostModifiers" ]);
})();

(function() {
    var e = gingerModule.load("widget.highlighters.inline", function() {
        var m;
        var p;
        var w = "gwmw";
        var b = true;
        var y = function() {
            var e = /emailauthorframe\.jsp\?email_type=html/.test(window.location.href);
            if (e) {
                w = "span";
            }
        };
        var e = function(e, t) {
            var n = "p,h1, h2, h3, h4, h5, h6,li,pre,address,blockquote,dl,div";
            if (e === t) return false;
            var r = $gingerWidgetJquery(e).parents().has(t).first();
            var i = $gingerWidgetJquery(e).parentsUntil(r, n).length;
            var o = $gingerWidgetJquery(t).parentsUntil(r, n).length;
            return i || o ? true : false;
        };
        var x = function(e, t, n) {
            var r = n.From + t.startsAt;
            var i = n.To + 1 + t.startsAt;
            var o = gingerModule.get("widget.utils").getNodeOffsetOfIndex(e, r, i);
            if (!o.startNode || !o.endNode) {
                return;
            }
            var g = a(w, o.startNode, o.startNodeOffset, o.endNode, o.endNodeOffset);
            $gingerWidgetJquery(e).find("b:empty,i:empty").remove();
            e.normalize();
            return g;
        };
        var M = function() {
            return gingerModule.get("widget.selectionManager").saveSelection(p);
        };
        var W = function() {
            return gingerModule.get("widget.selectionManager").restoreSelection(p);
        };
        var a = function(e, t, n, r, i) {
            var o = document.createRange();
            try {
                o.setStart(t, n);
                o.setEnd(r, i);
            } catch (e) {
                console.error(e);
            }
            var g = document.createElement(e);
            g.appendChild(o.extractContents());
            o.insertNode(g);
            return g;
        };
        var $ = function(e) {
            if (!e) return;
            $gingerWidgetJquery(e).html($gingerWidgetJquery(e).html().replace(/<[\/]?gwmw[^>]*>/gi, ""));
            e = $gingerWidgetJquery(e);
            var t = e.parent();
            if (e.contents().length) {
                e.contents().insertBefore(e);
                e.remove();
            } else {
                e.remove();
            }
            t.find("b:empty,i:empty").remove();
        };
        var q = function() {
            var e = $gingerWidgetJquery(p).find("span[style]");
            e.each(function(e, t) {
                var n = $gingerWidgetJquery(t).css("background-color");
                if (n) {
                    n = n.toLowerCase().replace(/ /g, "");
                    if (n === "rgba(255,115,115,0.3)" || n === "rgba(87,131,204,0.3)") {
                        $gingerWidgetJquery(t).css("background-color", "");
                    }
                }
            });
        };
        var J = function() {
            $gingerWidgetJquery(p).find(".XjviVd").slice(1).remove();
        };
        var t = function(e, t) {
            for (var n = 0; n < t.length; n++) {
                if (t[n].id === e) return t[n];
            }
            return null;
        };
        var C = function(e, t) {
            var n = document.getElementById("gwmw-" + e.id);
            if (!t || !e || n.innerText !== t.text.substring(e.From, e.To + 1) || n.querySelectorAll(w).length) {
                return false;
            }
            return true;
        };
        var T = function(e, t, n, r) {
            if (window.location.hostname.indexOf("lightning.force.com") != -1) {
                if (n.id === t[t.length - 1].id && r.id === n.correction.Corrections[n.correction.Corrections.length - 1].id) {
                    var i = n.words[n.words.length - 1];
                    if (i.startsAt - n.startsAt === r.From && i.endsAt - n.startsAt === r.To + 1) {
                        if (!$gingerWidgetJquery("gwcphb").next().length) {
                            return true;
                        }
                    }
                }
            }
            return false;
        };
        var n = null;
        var r = function(e) {
            if (n) clearTimeout(n);
            n = setTimeout(function() {
                console.log("anticoollision calling refresh");
                i(e);
            }, 20);
        };
        var i = function(e) {
            if (p !== document.activeElement) return;
            if (!m.isEnabled() || !gingerModule.get("widget").isEnabled()) return;
            y();
            q();
            if (!b) return;
            var t = gingerModule.get("widget.utils").cloneRepresentation(e);
            if (p.innerHTML == "") {
                $gingerWidgetJquery(p).html($gingerWidgetJquery(p).text());
            }
            var n = k(t);
            var r = false;
            var i = p.querySelectorAll(w);
            for (var o = 0; o < i.length; o++) {
                var g = i[o];
                var a = g.id.replace("gwmw-", "");
                if (!g.id || n.indexOf(a) === -1) {
                    if (!r) {
                        r = true;
                        M();
                    }
                    $(g);
                }
            }
            for (var c = 0; c < t.length; c++) {
                var l = t[c];
                if (l.correction && l.correction.Corrections.length) {
                    for (var d = 0; d < l.correction.Corrections.length; d++) {
                        var s = l.correction.Corrections[d];
                        var u = s && s.ignored;
                        var f = p.querySelector("#gwmw-" + s.id);
                        var v = T(p, e, l, s);
                        if (!f && !u && !v) {
                            if (!r) {
                                r = true;
                                M();
                            }
                            var h = x(p, l, s);
                            if (h) {
                                h.className = "ginger-module-highlighter-mistake-anim ginger-module-highlighter-mistake-type-" + s.Type;
                                h.id = "gwmw-" + s.id;
                                h.addEventListener("animationend", function(t) {
                                    return function(e) {
                                        $gingerWidgetJquery(t).removeClass("ginger-module-highlighter-mistake-anim");
                                    };
                                }(h), {
                                    once: true
                                }, true);
                            } else {
                                if (window.Raven && window.Raven && window.Raven.setExtraContext) {
                                    Raven.setExtraContext({
                                        innerHTML: p.innerHTML,
                                        sentence: l,
                                        correction: s
                                    });
                                    Raven.captureMessage("Couldn't wrap mistakeNode #1 (handled .className bug)", function(e, t) {});
                                }
                            }
                        } else if (v) {} else if (s.ignored) {
                            if (!r) {
                                r = true;
                                M();
                            }
                            $(f);
                        } else if (l.activeSentence && !C(s, l)) {
                            if (!r) {
                                r = true;
                                M();
                            }
                            $(f);
                            var h = x(p, l, s);
                            if (h) {
                                h.className = "ginger-module-highlighter-mistake-type-" + s.Type;
                                h.id = "gwmw-" + s.id;
                            } else {
                                if (window.Raven && window.Raven && window.Raven.setExtraContext) {
                                    Raven.setExtraContext({
                                        innerHTML: p.innerHTML,
                                        sentence: l,
                                        correction: s
                                    });
                                    Raven.captureMessage("Couldn't wrap mistakeNode #2 (handled .className bug)", function(e, t) {});
                                }
                            }
                        }
                    }
                }
            }
            p.normalize();
            if (r) W();
            setTimeout(J, 150);
        };
        var o = function() {
            return $gingerWidgetJquery(p).find(w);
        };
        var g = function(e) {
            if (!e) {
                c();
            }
            b = e;
        };
        var c = function() {
            setTimeout(function() {
                o().each(function(e, t, e) {
                    $(t);
                });
            });
        };
        var k = function(e) {
            var t = [];
            for (var n = 0; n < e.length; n++) {
                if (e[n].correction && e[n].correction.Corrections && e[n].correction.Corrections.length) {
                    for (var r = 0; r < e[n].correction.Corrections.length; r++) {
                        t.push(e[n].correction.Corrections[r].id);
                    }
                }
            }
            return t.sort();
        };
        var l = function(e) {
            m = e;
            p = m.element;
        };
        return {
            refresh: r,
            init: l,
            setVisibility: g,
            getMistakeElements: o,
            destroy: c,
            unit: {
                createMistakeTag: x,
                removeMistakeTag: $,
                saveSelection: M,
                restoreSelection: W,
                wrapSelection: a,
                isThereBlockElemDifference: e
            }
        };
    }, [ "widget.utils", "widget.selectionManager" ]);
})();

(function() {
    var e = gingerModule.load("widget.injector.draft", function() {
        var e = function() {
            var i = {};
            var o = function(e) {
                for (var t in e) {
                    if (t.indexOf("__reactInternalInstance") === 0) {
                        return e[t].memoizedProps || e[t]._currentElement.props;
                    }
                }
                return null;
            };
            var g = function(e) {
                e.defaultPrevented = false;
                e.target = document.activeElement;
                e.preventDefault = function() {};
                return e;
            };
            document.addEventListener("gingerModule-hasReactProp", function(e) {
                var t = e.detail;
                var n = !!o(t.element);
                t.cb(n);
            });
            document.addEventListener("gingerModule-eventEmitter-react-fire", function(e) {
                var t = o(document.activeElement);
                if (e.detail.event) {
                    var n = e.detail.event;
                    var r = e.detail.params ? g(e.detail.params) : {};
                    if (t && n && t[n]) {
                        t[n](r);
                    }
                } else if (e.detail.prop) {
                    if (t) {
                        t[e.detail.prop] = e.detail.value;
                    }
                }
            });
            document.addEventListener("gingerModule-eventEmitter-onpaste", function(e) {
                var t = o(document.activeElement);
                var n = g({
                    clipboardData: {
                        getData: function() {
                            return e.detail || "";
                        },
                        items: [ "text/plain" ]
                    }
                });
                if (t && t.onPaste) {
                    t.onPaste(n);
                }
            });
            document.addEventListener("gingerModule-eventEmitter-onkeydown", function(e) {
                var t = o(document.activeElement);
                var n = g(e.detail);
                if (t) {
                    t.onKeyDown(n);
                }
            });
            var e = function(e, t) {
                if (!i[e]) return;
                for (var n = 0; n < i[e].length; n++) {
                    var r = i[e][n];
                    r(new CustomEvent(e), t);
                }
            };
            var a = document.addEventListener.bind(document);
            document.addEventListener = function(e, t, n) {
                var r = i[e] || [];
                r.push(t);
                i[e] = r;
                a(e, t, n);
            };
        };
        return e;
    });
})();

(function() {
    var e = gingerModule.load("widget.injector", function() {
        var t = function(e, t, n) {
            if (!n) n = [];
            var r = e.createElement("script");
            var i = t.toString();
            r.innerHTML = "(function(){(" + i + ")(" + n.join(",") + ") })()";
            e.documentElement.appendChild(r);
        };
        var n = {};
        var e = function(e) {
            if (!n[e]) {
                n[e] = true;
                if (document.body) {
                    t(document, gingerModule.get(e), []);
                }
            }
        };
        return {
            injectOnce: e
        };
    }, [ "widget.rewriters.common" ]);
})();

(function() {
    var e = gingerModule.load("widget.injector.quill", function() {
        var e = function() {
            var a = function(e, t, n, r) {
                if (!n) n = 0;
                if (!r) r = [];
                if (n > 5) return null;
                for (var i in e) {
                    if (i === t) {
                        return e[i];
                    }
                    if (typeof e[i] === "object") {
                        var o = r.slice(0);
                        o.push(i);
                        var g = a(e[i], t, n + 1, o);
                        if (g) {
                            return g;
                        }
                    }
                }
                return null;
            };
            var r = function(t) {
                function n(e, t) {
                    if (typeof t !== "function" && t !== null) {
                        throw new TypeError("Super expression must either be null or a function, not " + typeof t);
                    }
                    e.prototype = Object.create(t && t.prototype, {
                        constructor: {
                            value: e,
                            enumerable: false,
                            writable: true,
                            configurable: true
                        }
                    });
                    if (t) Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t;
                }
                function r(e, t) {
                    if (!e) {
                        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    }
                    return t && (typeof t === "object" || typeof t === "function") ? t : e;
                }
                var i = function() {
                    n(e, t.imports["blots/inline"]);
                    function e() {
                        return r(this, (e.__proto__ || Object.getPrototypeOf(e)).apply(this, arguments));
                    }
                    return e;
                }();
                i.tagName = "GWMW";
                i.blotName = "ginger-inline";
                i.formats = function(e) {
                    return e.id;
                };
                t.register("formats/ginger-inline", i);
                var e = function() {
                    n(e, t.imports["blots/inline"]);
                    function e() {
                        return r(this, (i.__proto__ || Object.getPrototypeOf(e)).apply(this, arguments));
                    }
                    return e;
                }();
                e.tagName = "GWCPHB";
                e.blotName = "ginger-inline-ph";
                t.register("formats/ginger-inline-ph", e);
            };
            var i = false;
            var o = function() {
                if (i) return;
                try {
                    var e = a(window.Aura, "ComponentService.indexComponent");
                    var t = a(e, "lightning/quillLib");
                    var n = a(t, "Quill");
                    r(n);
                    i = true;
                    window.removeEventListener("click", o);
                } catch (e) {}
            };
            window.addEventListener("click", o);
            o();
        };
        return e;
    });
})();

(function() {
    var e = gingerModule.load("widget.inputFinder", function() {
        var t = {
            selector: "textarea, *[contenteditable]"
        };
        var n = $gingerWidgetJquery({});
        var r = [];
        var i = 5e3;
        var o = null;
        var g = function(e) {
            $field = $gingerWidgetJquery(e);
            var t = {};
            t.id = gingerModule.get("widget.utils").generateUID();
            $field.data("gingerWidgetFieldId", t.id);
            $field.gingerWidgetFieldId = t.id;
            r.push(e);
            n.trigger("new", $field.get(0));
        };
        var a = function(e) {
            var t = $gingerWidgetJquery(e);
            if (window.location.hostname === "www.linkedin.com") {
                if (t.attr("id") === "jobs-description") {
                    return true;
                } else if (t.hasClass("mentions-texteditor__contenteditable")) {
                    return true;
                }
            }
            if (window.location.hostname === "localhost") {
                if (t.attr("id") === "unittest-input-field-that-matches-override-criteria") {
                    return true;
                }
            }
            if (t.is(".cke_editable")) {
                return true;
            }
            return false;
        };
        var c = function() {
            if (gingerModule.get("widget").isEnabled()) {
                var n = $gingerWidgetJquery(document.activeElement);
                var e = gingerModule.get("widget.siteSettings").get(window.location.href, document.activeElement);
                if (n && !n.data("gingerWidgetFieldId") && n.attr("disableGinger") !== "true" && n.attr("data-ginger") !== "false" && (n.is(t.selector) || n.attr("contenteditable")) && !e.disabled) {
                    if (n.attr("spellcheck") !== "false" || a(document.activeElement)) {
                        gingerModule.get("widget.preFlightProbe").run(document.activeElement).then(function e() {
                            g(n);
                        }, function e(t) {
                            g(n);
                        });
                    }
                }
            } else {
                console.log("widget is disabled");
            }
        };
        var l = false;
        var e = function(e) {
            if (l) return;
            t = gingerModule.get("widget.utils").merge(t, e);
            c();
            o = setInterval(c, i);
            document.addEventListener("click", function() {
                setTimeout(c, 400);
            });
            l = true;
        };
        var d = function(e) {
            g(e);
            return e;
        };
        return {
            listen: n,
            refresh: c,
            feed: d,
            init: e
        };
    }, [ "widget.utils", "widget.siteSettings" ]);
})();

(function() {
    var e = gingerModule.load("widget.inputHandler", function() {
        var v;
        var h = [];
        var o = null;
        var t = null;
        var n = null;
        var r = 1500;
        var e = null;
        var i = 50;
        var g = null;
        var a = true;
        var c = null;
        var u = [];
        var m = function() {
            return gingerModule.get("widget.contentManager").getVal(v.element);
        };
        var l = function() {
            var e = gingerModule.get("widget.utils").isRichTextElement(v.element);
            if (e) {
                if ($gingerWidgetJquery(v.element).text() === $gingerWidgetJquery(v.element).attr("data-placeholder-default")) {
                    return "";
                } else {
                    return $gingerWidgetJquery(v.element).html().replace(/<[\/]?gwmw[^>]*>/gi, "");
                }
            } else {
                return $gingerWidgetJquery(v.element).val();
            }
        };
        var d = function(e) {
            gingerModule.get("widget.contentManager").setVal(v.element, e);
            setTimeout(function() {
                O();
                P(true);
            }, 200);
        };
        var f = function(e) {
            var t = p(e);
            return t !== null ? h[t] : null;
        };
        var p = function(e) {
            for (var t = 0; t < h.length; t++) {
                if (h[t].id === e) {
                    return t;
                }
            }
            return null;
        };
        var w = function(e) {
            for (var t = 0; t < h.length; t++) {
                if (h[t].correction && h[t].correction.Corrections) {
                    for (var n = 0; n < h[t].correction.Corrections.length; n++) {
                        var r = h[t].correction.Corrections[n];
                        if (r.id === e) {
                            return h[t];
                        }
                    }
                }
            }
            return null;
        };
        var b = function(e) {
            for (var t = 0; t < h.length; t++) {
                if (h[t].correction && h[t].correction.Corrections) {
                    for (var n = 0; n < h[t].correction.Corrections.length; n++) {
                        var r = h[t].correction.Corrections[n];
                        if (r.id === e) {
                            return r;
                        }
                    }
                }
            }
            return null;
        };
        var s = function(e) {
            return e.replace("gwmw-", "");
        };
        var y = function(e, t, n) {
            return gingerModule.get("widget.contentManager").setVal(v.element, e, t, n);
        };
        var x = function(e) {
            var t = w(e);
            var n = 0;
            for (var r = 0; r < t.correction.Corrections.length; r++) {
                if (t.correction.Corrections[r].id === e) {
                    t.correction.Corrections.splice(r, 1);
                    r--;
                }
            }
            return t;
        };
        var M = function(e) {
            gingerModule.get("widget.api").addToDictionary(e, function(e) {});
        };
        var W = function(e) {
            var t = w(e);
            var n = b(e);
            var r = t.startsAt;
            var i = I(t, n.From, n.To + 1);
            var o = i.length - (n.To + 1 - n.From);
            x(n.id);
            y(i, r + n.From, r + n.To + 1);
            var g = gingerModule.get("widget.phraseService").getSentences(m(v.element));
            var a = g.length > h.length;
            if (a) {
                var c = p(t.id) + 1;
                var l = g[c - 1];
                var d = g[c];
                d.id = gingerModule.get("widget.utils").generateUID();
                d.correction = {
                    Corrections: []
                };
                h.splice(c, 0, d);
                for (var s = 0; s < t.correction.Corrections.length; s++) {
                    var u = t.correction.Corrections[s].From - t.text.length;
                    if (a && u > 0) {
                        var f = t.correction.Corrections[s];
                        f.From -= t.text.length;
                        f.To -= t.text.length;
                        f.UXFrgFrom -= t.text.length;
                        f.UXFrgTo -= t.text.length;
                        if (f.UXFrgFrom < 0) f.UXFrgFrom = 0;
                        d.correction.Corrections.push(f);
                        x(t.correction.Corrections[s].id);
                        s--;
                    }
                }
            }
            for (var s = 0; s < t.correction.Corrections.length; s++) {
                if (t.correction.Corrections[s].From > n.From) {
                    t.correction.Corrections[s].From += o;
                    t.correction.Corrections[s].To += o;
                    t.correction.Corrections[s].UXFrgFrom += o;
                    t.correction.Corrections[s].UXFrgTo += o;
                }
            }
            for (var s = 0; s < g.length; s++) {
                h[s].startsAt = g[s].startsAt;
                h[s].endsAt = g[s].endsAt;
                if (g[s].text !== h[s].text) {
                    h[s].text = g[s].text;
                }
            }
        };
        var $ = function(e, t) {
            try {
                u.push({
                    result: e,
                    bubbleResultData: t,
                    representation: h
                });
                var n, r;
                if (e === "ignoreAll") {
                    r = f(t.sentenceId);
                    n = b(t.correctionId);
                    var i = r.correction.Corrections.length;
                    var o = [];
                    for (var g = 0; g < r.correction.Corrections.length; g++) {
                        var a = r.correction.Corrections[g];
                        if (a.From >= n.UXFrgFrom && a.To <= n.UXFrgTo) {
                            o.push(a);
                        }
                    }
                    for (var g = 0; g < o.length; g++) {
                        gingerModule.get("widget.correctionService").ignoreMistake(o[g], r, function() {});
                    }
                    P(true);
                } else if (e === "approve") {
                    W(t.correctionId);
                    v.highlighter.refresh(h);
                    v.stats.update(h);
                    gingerModule.get("widget.licenseLimits").approvalsUsed(1);
                } else if (e === "ignore") {
                    r = w(t.correctionId);
                    n = b(t.correctionId);
                    x(t.correctionId);
                    gingerModule.get("widget.correctionService").ignoreMistake(n, r);
                    P(true);
                } else if (e === "addToDictionary") {
                    r = w(t.correctionId);
                    n = b(t.correctionId);
                    var c = r.text.substring(n.From, n.To + 1);
                    M(c);
                    x(t.correctionId);
                    P(true);
                } else if (e === "approveAll") {
                    r = f(t.sentenceId);
                    n = b(t.correctionId);
                    var l = I(r, n.UXFrgFrom, n.UXFrgTo + 1);
                    var d = 0;
                    for (var g = 0; g < r.correction.Corrections.length; g++) {
                        if (r.correction.Corrections[g].From >= n.UXFrgFrom && r.correction.Corrections[g].To <= n.UXFrgTo) {
                            d++;
                            r.correction.Corrections.splice(g, 1);
                            g--;
                        }
                    }
                    var s = {
                        From: n.UXFrgFrom,
                        To: n.UXFrgTo,
                        UXFrgFrom: n.UXFrgFrom,
                        UXFrgTo: n.UXFrgTo,
                        Suggestions: [ {
                            Text: l
                        } ],
                        id: gingerModule.get("widget.utils").generateUID()
                    };
                    r.correction.Corrections.push(s);
                    W(s.id);
                    v.highlighter.refresh(h);
                    v.stats.update(h);
                    gingerModule.get("widget.licenseLimits").approvalsUsed(d);
                }
            } catch (e) {
                if (window.Raven && window.Raven.setExtraContext) {
                    Raven.captureException(e);
                } else {
                    if (console && console.error) console.error(e);
                    throw new Error(e);
                }
            }
        };
        var q = function(e) {
            var t = v.highlighter.getMistakeElements();
            var n = null;
            for (var r = 0; r < t.length && n === null; r++) {
                if (gingerModule.get("widget.utils").isMouseEventOverElement(e, t[r])) {
                    n = t[r];
                    return n;
                }
            }
            return null;
        };
        var J = function(r) {
            if (e) e = clearTimeout(e);
            e = setTimeout(function() {
                var e = q(r);
                if (e) {
                    var t = b(s($gingerWidgetJquery(e).attr("id")));
                    var n = w(t.id);
                    if (n.correction.checkType === "shallow") {
                        P(true, function() {
                            J(r);
                        });
                    } else {
                        gingerModule.get("widget.correctionBubble").show(t, n, $);
                        g = e;
                    }
                } else {
                    if (g) {
                        gingerModule.get("widget.correctionBubble").gracefulHide();
                    }
                }
            }, i);
        };
        var C = function() {
            $gingerWidgetJquery(v.element).on("mousemove", J);
        };
        var T = function() {
            $gingerWidgetJquery(v.element).off("mousemove", J);
        };
        var k = function(e) {
            t = e;
            if (e) {
                C();
            } else {
                T();
            }
        };
        var E = function() {
            if (n !== null) {
                n = clearTimeout(n);
            }
        };
        var S = function(e) {
            E();
            n = setTimeout(function() {
                P(true);
            }, e || r);
        };
        var L = function() {
            var e = gingerModule.get("widget.config").get("charLimit");
            if (e) {
                var t = m(v.element);
                if (t.length > e) {
                    d(t.substr(0, e));
                    if (console && console.log) console.log("Ginger Widget's max char limit reached", e);
                    v.events.listen.trigger("charLimit");
                    return false;
                }
            }
            return true;
        };
        var I = function(e, t, n) {
            var r = e.text;
            var i = 0;
            for (var o = 0; o < e.correction.Corrections.length; o++) {
                if (e.correction.Corrections[o].From >= t && e.correction.Corrections[o].To <= n - 1) {
                    var g = e.correction.Corrections[o].From;
                    var a = e.correction.Corrections[o].To + 1;
                    var c = e.correction.Corrections[o].Suggestions.length ? e.correction.Corrections[o].Suggestions[0].Text : e.text.substring(g, a);
                    r = r.substring(0, g + i) + c + r.substring(a + i);
                    i += c.length - (a - g);
                }
            }
            return r.substring(t, n + i);
        };
        var N = {};
        var F = function(e, t) {
            if (!N[e]) {
                N[e] = [];
            }
            var n = N[e];
            n.push(t);
            v.events.listen.on(e, t);
        };
        var B = function(e) {
            if (!N[e]) return;
            for (var t = 0; t < N[e].length; t++) {
                v.events.listen.off(e, N[e][t]);
            }
        };
        var A = function() {
            gingerModule.get("widget.correctionBubble").hide();
            $gingerWidgetJquery(v.element).attr("spellcheck", "true");
            $gingerWidgetJquery(v.element).data("gingerWidgetFieldId", null);
            v.highlighter.destroy();
            k(false);
            for (var e in N) {
                B(e);
            }
        };
        var R = function() {
            F("focus", function() {
                S();
            });
            F("blur", function() {
                setTimeout(function() {
                    gingerModule.get("widget.correctionBubble").hide();
                }, 1e3);
            });
            F("delete", function() {
                c = "delete";
                setTimeout(function() {
                    v.events.listen.trigger("inputchange");
                }, 50);
            });
            F("mouseover", function() {
                k(true);
            });
            F("mouseout", function() {
                k(false);
            });
            F("paste", function() {
                setTimeout(function() {
                    O();
                    P(true);
                }, 50);
            });
            F("inputchange", function(e) {
                O();
                var t = gingerModule.get("widget.utils").isRichTextElement(v.element);
                var n = t ? $gingerWidgetJquery(v.element).text() : $gingerWidgetJquery(v.element).val();
                if (/^\s*$/.test(n)) {
                    h = [];
                    v.stats.update([]);
                    v.highlighter.refresh([]);
                } else {
                    if (c == "sentence.end") {
                        P(true);
                    } else if (c == "word.end") {
                        P();
                        S();
                    } else if (c == "delete") {
                        v.highlighter.refresh(h);
                        v.stats.update(h);
                        S();
                    } else {
                        setTimeout(function() {
                            v.highlighter.refresh(h);
                            v.stats.update(h);
                            S();
                        }, 10);
                    }
                }
                c = null;
                v.stats.update(h);
            });
            F("sentence.end", function() {
                c = "sentence.end";
            });
            F("click", function() {
                c = "sentence.end";
                setTimeout(function() {
                    v.events.listen.trigger("inputchange");
                }, 50);
            });
            F("enter", function() {
                c = "sentence.end";
                setTimeout(function() {
                    v.events.listen.trigger("inputchange");
                }, 50);
            });
            F("word.end", function() {
                c = "word.end";
            });
            F("visibility.change", function(e, t) {
                if (a) {
                    v.highlighter.setVisibility(t);
                }
            });
        };
        var O = function() {
            L();
            var e = gingerModule.get("widget.phraseService").getRepresentation(v.element);
            var t = gingerModule.get("widget.utils").cloneRepresentation(h);
            var n = gingerModule.get("widget.correctionService").mergeCorrections(e, t);
            h = n;
            v.highlighter.refresh(h);
            v.stats.update(h);
            return h;
        };
        var P = function(e, t) {
            if (!a) return;
            if (!h.length) {
                v.highlighter.refresh(h);
                v.stats.update(h);
                if (t) t([]);
                return;
            }
            E();
            if (e) {
                for (var n = 0; n < h.length; n++) {
                    h[n].activeSentence = null;
                }
            }
            var r = gingerModule.get("widget.utils").cloneRepresentation(h);
            var i = new Date().getTime();
            o = i;
            gingerModule.get("widget.correctionService").correct(r, function e(t) {
                if (o !== i) {
                    return;
                }
                h = t;
                O();
            }, function e() {
                if (o !== i) {
                    return;
                }
                gingerModule.get("widget.correctionBubble").hide();
                if (t) t(h);
            });
        };
        var j = function() {
            v.element.focus();
        };
        var D = function() {
            d("");
            h = [];
            v.stats.update([]);
            v.highlighter.refresh([]);
        };
        var G = function() {
            if (!a) return;
            a = false;
            gingerModule.get("widget.correctionBubble").hide();
            $gingerWidgetJquery(v.element).attr("spellcheck", "true");
            v.highlighter.setVisibility(false);
            v.events.listen.trigger("enable.change", {
                enabled: false
            });
            v.events.listen.trigger("disabled");
        };
        var U = function() {
            if (a) return;
            a = true;
            $gingerWidgetJquery(v.element).attr("spellcheck", "false");
            v.highlighter.setVisibility(true);
            v.events.listen.trigger("enable.change", {
                enabled: true
            });
            v.events.listen.trigger("enabled");
            P(true);
        };
        var V = function(e) {
            e.setAttribute("spellcheck", "false");
            try {
                v = {
                    element: $gingerWidgetJquery(e).get(0),
                    id: $gingerWidgetJquery(e).data("gingerWidgetFieldId"),
                    events: null,
                    highlighter: null,
                    rewriter: null,
                    stats: null,
                    empty: D,
                    focus: j,
                    setVal: d,
                    getVal: m,
                    enable: U,
                    disable: G,
                    getFormattedVal: l,
                    getRepresentation: function() {
                        return h;
                    },
                    isEnabled: function() {
                        return a;
                    },
                    destroy: A,
                    unit: {
                        replaceInTextarea: y,
                        recheck: P,
                        updateRepresentation: O,
                        handleCorrectionBubbleResult: $,
                        flush: D
                    }
                };
                v.settings = gingerModule.get("widget.siteSettings").get(window.location.href, e);
                v.highlighter = new gingerModule.get(v.settings.highlighter, true)();
                v.stats = new gingerModule.get("widget.inputHandler.stats", true)();
                v.events = new gingerModule.get("widget.inputHandler.events", true)();
                v.events.init(v);
                v.highlighter.init(v);
                v.stats.init(e);
                if (v.settings.injection) {
                    gingerModule.get("widget.injector").injectOnce(v.settings.injection);
                }
                gingerModule.get("widget.onlinestatus").listen.on("online", function() {
                    P(true);
                    console.log("widget is back online");
                });
                gingerModule.get("widget.onlinestatus").listen.on("offline", function() {
                    console.warn("Ginger Widget is offline");
                });
                R();
                O();
                if (h.length) {
                    P(true);
                }
            } catch (e) {
                console.error(e);
            }
            return v;
        };
        return {
            init: V
        };
    }, [ "widget.utils", "widget.api", "widget.phraseService", "widget.correctionService", "widget.correctionBubble", "widget.inputHandler.events", "widget.inputHandler.stats", "widget.onlinestatus" ]);
})();

(function() {
    var e = gingerModule.load("widget.inputHandler.events", function() {
        var r = $gingerWidgetJquery({});
        var a;
        var c = function(e) {
            var t = String.fromCharCode(e);
            var n = "?!.";
            return e === 13 || n.indexOf(t) !== -1;
        };
        var i = function(e) {
            var t = String.fromCharCode(e);
            var n = /\s/;
            var r = t.match(n) !== null;
            var i = $gingerWidgetJquery(a);
            var o = gingerModule.get("widget.caret").get(i);
            var g = i.val().substr(o - 1, 1);
            return c(g.charCodeAt(0)) || g.match(n) ? false : r;
        };
        var o = {};
        var g = 800;
        var l = null;
        var d = function() {
            var e = g;
            if (l) l = clearTimeout(l);
            var t = gingerModule.get("widget.mutationDetectorService").getLayout(a);
            if (t.isVisible !== o.isVisible) {
                e = g;
                r.trigger("visibility.change", t.isVisible);
                if (t.isVisible) {
                    r.trigger("mutation", {
                        input: a
                    });
                }
            } else {
                var n = gingerModule.get("widget.mutationDetectorService").compareLayouts(t, o);
                if (n) {
                    r.trigger("mutation", {
                        input: a
                    });
                    e = 80;
                }
            }
            o = t;
            l = setTimeout(d, e);
        };
        var e = function(e) {
            a = e.element;
            var t = $gingerWidgetJquery(a);
            t.on("keypress", function(e) {
                if (c(e.which)) {
                    r.trigger("sentence.end", {
                        input: t
                    });
                } else if (i(e.which)) {
                    r.trigger("word.end", {
                        input: t
                    });
                }
            });
            t.bind("paste", function() {
                r.trigger("paste", {
                    input: t
                });
            });
            t.on("keyup", function(e) {
                if (e.which === 13) {
                    r.trigger("enter", {
                        input: t
                    });
                }
            });
            t.on("keydown", function(e) {
                if ([ 8, 46 ].indexOf(e.which) !== -1) {
                    r.trigger("delete", {
                        input: t
                    });
                } else if ([ 37, 38, 39, 40 ].indexOf(e.which) !== -1) {
                    r.trigger("inputchange", {
                        input: t
                    });
                } else if (e.which === 89 && e.ctrlKey) {
                    r.trigger("paste");
                } else if (e.which === 90 && e.ctrlKey) {
                    r.trigger("paste");
                }
            });
            t.focus(function() {
                r.trigger("focus", {
                    input: t
                });
            });
            t.blur(function() {
                r.trigger("blur", {
                    input: t
                });
            });
            t.scroll(function() {
                r.trigger("scroll", {
                    input: t
                });
            });
            t.mouseover(function() {
                r.trigger("mouseover", {
                    input: t
                });
            });
            t.mouseout(function() {
                r.trigger("mouseout", {
                    input: t
                });
            });
            t.keydown(function() {
                r.trigger("keydown", {
                    input: t
                });
            });
            d();
            var n = gingerModule.get("widget.utils").isRichTextElement(a);
            document.addEventListener("click", function() {
                mutationIntervals = [ 0, 50, 100, 200, 500 ];
                mutationIntervals.forEach(function(e) {
                    setTimeout(d, mutationIntervals);
                });
                r.trigger("click");
            });
            a.addEventListener("input", function() {
                r.trigger("inputchange", {
                    input: a
                });
            });
            t.on("paste", function(e) {
                if (e.which === 8 || e.which === 46) {
                    return true;
                }
                r.trigger("paste");
            });
        };
        return {
            listen: r,
            checkMutation: d,
            init: e
        };
    }, [ "widget.utils", "widget.caret", "widget.mutationDetectorService" ]);
})();

(function() {
    var e = gingerModule.load("widget.inputHandler.stats", function() {
        var n = $gingerWidgetJquery({});
        var o;
        var e = Math.random();
        var r;
        var i = function(e) {
            var t = {
                grammar: 0,
                spelling: 0
            };
            if (e && e.length) {
                for (var n = 0; n < e.length; n++) {
                    if (e[n].correction) {
                        for (var r = 0; r < e[n].correction.Corrections.length; r++) {
                            var i = e[n].correction.Corrections[r];
                            if (!i.ignored) {
                                if (i.Type === 3 || i.Type === 2) {
                                    t.grammar++;
                                } else {
                                    t.spelling++;
                                }
                            }
                        }
                    }
                }
            }
            return t;
        };
        var g = function(e) {
            var t = {
                words: 0,
                characters: 0,
                charactersWithSpace: 0,
                sentences: 0
            };
            var n = gingerModule.get("widget.contentManager").getVal(o);
            if (n && !n.match(/^\s+$/)) {
                var r = n.replace(/\d+/g, "").replace(/(^\s*|\s*$)/g, "").match(/([^\x00-\x7F]|\w)+/g);
                if (!r) r = [];
                if (r.length === 1 && r[0] == "") r = [];
                var i = n.replace(/\s+/g, "");
                t.words = r.length;
                t.characters = i.length;
                t.charactersWithSpace = n.length;
            }
            if (e && e.length) {
                t.sentences = e.length;
                if (e[e.length - 1].text.match(/^\s*$/)) {
                    t.sentences--;
                }
            }
            return t;
        };
        var t = function(e) {
            if (!e) return;
            try {
                var t = {};
                t.mistakes = i(e);
                t.count = g(e);
                r = t;
                n.trigger("changed", r);
            } catch (e) {
                console.error(e);
            }
        };
        var a = function() {
            return r;
        };
        var c = function(e) {
            o = e;
            t();
        };
        return {
            listen: n,
            update: t,
            init: c,
            get: a
        };
    }, [ "widget.utils" ]);
})();

(function() {
    var e = gingerModule.load("widget.licenseLimits", function() {
        var r = null;
        var t = $gingerWidgetJquery({});
        var i = function(e) {
            var t = r;
            r = e;
            o(t);
        };
        var n = function(t) {
            var n = $gingerWidgetJquery.Deferred();
            var e = gingerModule.get("widget.session").get();
            if (!gingerModule.get("widget.session").isLoggedIn()) {
                n.reject();
            } else {
                $gingerWidgetJquery.ajax({
                    url: "https://data.gingersoftware.com/clientdata/jsonSecured/GetApprovalCount",
                    data: {
                        apiKey: gingerModule.get("widget.config").get("apiKey"),
                        lang: gingerModule.get("widget.config").get("dialect"),
                        clientVersion: gingerModule.get("widget.config").get("clientVersion"),
                        userIdentifier: e.userId,
                        authToken: e.token
                    },
                    dataType: "json",
                    success: function(e) {
                        if (t) {
                            r = e.WeeklyApprovalsLeft;
                        } else {
                            i(e.WeeklyApprovalsLeft);
                        }
                        n.resolve(e.WeeklyApprovalsLeft);
                    }
                });
            }
            return n.promise();
        };
        var o = function(e) {
            if (e === null) return;
            if (r === -1) return;
            if (e >= 5 && r < 5 && r >= 1) {
                t.trigger("triggered.approaching");
            } else if (r < 1) {
                if (e > 0) {
                    t.trigger("triggered.exceeded");
                } else {
                    t.trigger("triggered.onbubble");
                }
            }
        };
        var e = function(e) {
            if (!e) {
                i(r);
                return;
            }
            var t = gingerModule.get("widget.session").get();
            if (gingerModule.get("widget.session").isLoggedIn()) {
                $gingerWidgetJquery.ajax({
                    url: "https://data.gingersoftware.com/clientdata/jsonSecured/UserApprovedCorrection",
                    data: {
                        numberOfApprovals: e,
                        userIdentifier: t.userId,
                        authToken: t.token,
                        apiKey: gingerModule.get("widget.config").get("apiKey"),
                        lang: gingerModule.get("widget.config").get("dialect"),
                        clientVersion: gingerModule.get("widget.config").get("clientVersion")
                    },
                    dataType: "json",
                    success: function(e) {
                        try {
                            i(e.WeeklyApprovalsLeft);
                        } catch (e) {
                            console.error(e);
                        }
                    }
                });
            } else {
                var n = r - e;
                if (n < 0) n = 0;
                i(n);
            }
        };
        var g = function() {
            return r === 0;
        };
        var a = function() {
            gingerModule.get("widget.session").listen.on("change", function(e, t) {
                if (!gingerModule.get("widget.session").isLoggedIn()) {
                    r = 10;
                } else {
                    r = null;
                    n(true);
                }
            });
            if (gingerModule.get("widget.session").isLoggedIn()) {
                n(true);
            } else {
                r = 10;
            }
        };
        a();
        return {
            approvalsUsed: e,
            isCapacityLimited: g,
            retrieveApprovalsLeft: n,
            listen: t
        };
    }, [ "widget.session", "widget.config" ]);
})();

(function() {
    var e = gingerModule.load("widget.mutationDetectorService", function(i) {
        var o = function(e) {
            if (e.tagName === "IFRAME") {
                e = e.contentWindow.document.body;
                var t = false;
                var n = e.ownerDocument.defaultView.getMatchedCSSRules(e, "");
                if (n && $gingerWidgetJquery.isArray(n)) {
                    for (var r = 0; r < n.length; r++) {
                        if (n[r].style.height) {
                            t = true;
                        }
                    }
                }
                if (t) return {
                    vertical: e.clientHeight + i.scrollbarWidth < e.scrollHeight,
                    horizontal: e.clientWidth < e.scrollWidth
                }; else return {
                    vertical: e.clientHeight + i.scrollbarWidth > e.scrollHeight,
                    horizontal: e.clientWidth < e.scrollWidth
                };
            } else {
                return {
                    vertical: e.clientHeight < e.scrollHeight,
                    horizontal: e.clientWidth < e.scrollWidth
                };
            }
        };
        var e = function(e) {
            var t = {
                height: 0,
                width: 0,
                top: 0,
                left: 0,
                node: e
            }, n = $gingerWidgetJquery(e);
            var r = n.hasClass("LW-avf");
            if (r) {
                try {
                    t.node = n.closest("table").closest("td").get(0);
                    var i = $gingerWidgetJquery(e.firstElementChild || e.firstChild);
                    if (i.length > 0) {
                        var o = getComputedStyle(i.get(0));
                        if (o) t.direction = o.direction;
                    }
                } catch (e) {}
            }
            return t;
        };
        var t = function(e) {
            if (!e) return;
            var t = {
                height: 0,
                width: 0,
                top: 0,
                left: 0,
                node: e
            };
            var n = $gingerWidgetJquery(t.node).offset();
            var r = o(t.node);
            return {
                height: $gingerWidgetJquery(t.node).outerHeight() + t.height,
                width: $gingerWidgetJquery(t.node).outerWidth() + t.width,
                direction: t.direction || $gingerWidgetJquery(t.node).css("direction"),
                top: (n ? n.top : 0) + t.top,
                left: (n ? n.left : 0) + t.left,
                hasVerticalScrollbar: r.vertical || $gingerWidgetJquery(t.node).css("overflow") == "scroll" || $gingerWidgetJquery(t.node).css("overflow-y") == "scroll" ? true : false,
                scrollTop: $gingerWidgetJquery(t.node).scrollTop(),
                scrollLeft: $gingerWidgetJquery(t.node).scrollLeft(),
                hasHorizontalScrollbar: r.horizontal || $gingerWidgetJquery(t.node).css("overflow") == "scroll" || $gingerWidgetJquery(t.node).css("overflow-x") == "scroll" ? true : false,
                isVisible: $gingerWidgetJquery(e).is(":visible"),
                fontSize: $gingerWidgetJquery(t.node).css("font-size")
            };
        };
        var n = function(e, t) {
            if (!t) {
                return true;
            }
            for (var n in e) {
                if (e[n] !== t[n]) {
                    return true;
                }
            }
            return false;
        };
        return {
            compareLayouts: n,
            getLayout: t
        };
    }, []);
})();

(function() {
    var e = gingerModule.load("widget.onlinestatus", function() {
        var t = $gingerWidgetJquery({});
        var n = true;
        var e = function() {
            window.addEventListener("online", function(e) {
                if (!n) {
                    t.trigger("online");
                }
                n = true;
            });
            window.addEventListener("offline", function(e) {
                if (n) {
                    t.trigger("offline");
                }
                n = false;
            });
            n = !!window.navigator.onLine;
        };
        var r = function() {
            return n;
        };
        e();
        return {
            listen: t,
            isOnline: r
        };
    }, [ "widget.report" ]);
})();

(function() {
    var e = gingerModule.load("widget.phraseService", function() {
        var f = /[\x1F]*[\s]*(([^.^!^?^\n^\x1F]|[.!?]+(?=\S)|(?=\x1F))+)([.!?\x1F]+(\n*(?=$))?|.*(?=[\n])|$|(?=\x1F))/gi;
        var v = /[^\x1F]+/g;
        var h = /\x1F/g;
        var e = /^\W+$/;
        var i = function(e) {
            if (!e) return [];
            var t = gingerModule.get("widget.utils").trimAndMatch(e);
            var n = t.text.match(f);
            if (!n) return [];
            n[0] = t.pre + n[0];
            n[n.length - 1] = n[n.length - 1] + t.post;
            var r = [];
            var i = 0;
            for (var o = 0; o < n.length; o++) {
                var g = n[o].match(/^[\x1F]+/);
                var a = n[o].match(/[\x1F]+$/);
                var c = g ? g.toString().replace(v, "").length : 0;
                var l = a ? a.toString().replace(v, "").length : 0;
                n[o] = n[o].replace(h, "");
                var d = i;
                var s = d + n[o].length;
                var u = {
                    text: n[o],
                    startsAt: d,
                    endsAt: s,
                    activeSentence: false,
                    id: gingerModule.get("widget.utils").generateUID(),
                    preLineBreakCount: c,
                    postLineBreakCount: l
                };
                u.words = m(u);
                r.push(u);
                i += n[o].length;
            }
            return r;
        };
        var o = function(e, t) {
            if (document.activeElement !== e) {
                return null;
            }
            if (!t) t = i($gingerWidgetJquery(e).val());
            try {
                var n = gingerModule.get("widget.caret").get(e);
            } catch (e) {
                return null;
            }
            for (var r = 0; r < t.length; r++) {
                if (t[r].startsAt <= n && t[r].endsAt >= n) {
                    return r;
                }
            }
            return null;
        };
        var t = function(e, t, n) {
            var r = [];
            if (!t) t = 0;
            if (typeof n === "undefined") n = e.text.length;
            var i = e.correction.Corrections;
            var o = 0;
            for (var g = 0; g < i.length; g++) {
                if (t <= i[g].From && n >= i[g].To) {
                    var a = t >= o ? t : o;
                    var c = t >= o ? t : o;
                    var l = e.text.substring(a, i[g].From);
                    var d = e.text.substring(i[g].From, i[g].To + 1);
                    r.push({
                        text: l
                    });
                    r.push({
                        text: d,
                        correction: i[g]
                    });
                }
                o = i[g].To + 1;
            }
            if (i[i.length - 1].To + 1 <= n) {
                var s = e.text.substring(i[i.length - 1].To + 1, n + 1);
                r.push({
                    text: s
                });
            }
            return r;
        };
        var m = function(e) {
            if (e.text.match(/^\s+$/)) return [];
            var t = e.text.match(/(^\s+)?\S+(\s*[.?!])?(\s+|$)/g);
            if (!t) return [];
            var n = [];
            for (var r = 0; r < t.length; r++) {
                var i = r == 0 ? e.startsAt : e.startsAt + t.slice(0, r).join("").length;
                var o = i + t[r].length;
                var g = {
                    text: t[r],
                    startsAt: i,
                    endsAt: o
                };
                n.push(g);
            }
            return n;
        };
        var n = function(e) {
            var t = gingerModule.get("widget.contentManager").getVal(e);
            var n = i(t);
            var r = o(e, n);
            if (r !== null) n[r].activeSentence = true;
            return n;
        };
        return {
            getSentences: i,
            getActiveSentence: o,
            getRepresentation: n,
            getSentenceFragments: t,
            getWordsOfSentence: m
        };
    }, [ "widget.contentManager", "widget.caret", "widget.utils" ]);
})();

(function() {
    var e = gingerModule.load("widget.preFlightProbe", function() {
        var r = function(e) {
            var t = $gingerWidgetJquery.Deferred();
            var n = $gingerWidgetJquery(e).closest("[data-reactroot], [data-reactid]");
            if (n.length) {
                t.reject("reactRTETest failed");
            } else {
                t.resolve();
            }
            return t.promise();
        };
        var i = function(t) {
            var n = $gingerWidgetJquery.Deferred();
            var e = $gingerWidgetJquery(t).contents().filter(function() {
                return this.nodeType == Node.TEXT_NODE;
            });
            var r = t;
            if (e.length) {
                r = e[0].parentNode;
            } else if ($gingerWidgetJquery(t).find("p").length) {
                r = $gingerWidgetJquery(t).find("p").eq(0);
            } else if ($gingerWidgetJquery(t).find("br").length) {
                r = $gingerWidgetJquery(t).find("br").eq(0).parent();
            }
            $gingerWidgetJquery("<gwmw style='display:none;'></gwmw>").appendTo(r);
            var i = document.createEvent("CustomEvent");
            i.initCustomEvent("input", true, true, null);
            t.dispatchEvent(i);
            setTimeout(function() {
                var e = $gingerWidgetJquery(t).find("gwmw");
                if (e.length) {
                    n.resolve();
                } else {
                    n.reject("injectionTest failed");
                }
                e.remove();
            }, 50);
            return n.promise();
        };
        var e = function(t) {
            var e = gingerModule.get("widget.siteSettings").get(window.location.href, t);
            if (e.highlighter === "widget.highlighters.inline") {
                return i(t).then(function() {
                    return r(t);
                }).catch(function(e) {
                    gingerModule.get("widget.report").report({
                        type: "ChromeExtPreFlightTestFail",
                        reason: e,
                        pageDomain: window.location.hostname,
                        areaFootprint: $gingerWidgetJquery(t).clone().html("").prop("outerHTML"),
                        application: "Chrome"
                    });
                    throw e;
                });
            } else {
                var n = $gingerWidgetJquery.Deferred();
                n.resolve();
                return n.promise();
            }
        };
        return {
            run: e
        };
    }, [ "widget.utils", "widget.report" ]);
})();

(function() {
    var e = gingerModule.load("widget.report", function() {
        var r = $gingerWidgetJquery({});
        var i = function() {
            return {
                widgetUid: gingerModule.get("widget.config").get("widgetUid"),
                type: "",
                ClientVersion: gingerModule.get("widget.config").get("version"),
                GingerUserName: "",
                affId: 1001,
                application: gingerModule.get("widget.config").get("platform")
            };
        };
        var o = {};
        var g = function(e) {
            var t = $gingerWidgetJquery.extend(i(), e);
            var n = {
                url: "https://tr.gingersoftware.com/trackingEP.php",
                method: "GET",
                timeout: 2e3,
                data: {
                    cmd: "reportEvents",
                    events: JSON.stringify([ {
                        payload: t,
                        source: gingerModule.get("widget.config").get("source")
                    } ])
                },
                cache: false,
                dataType: "text",
                contentType: "application/json",
                success: function(e) {
                    r.trigger("report.done", e);
                },
                error: function(e) {
                    r.trigger("report.fail", e);
                }
            };
            $gingerWidgetJquery.ajax(n);
            r.trigger("report.sent", n);
        };
        var e = function(e, t) {
            if (e.correction.Corrections && e.correction.Corrections.length) {
                for (var n = 0; n < e.correction.Corrections.length; n++) {
                    var r = e.correction.Corrections[n];
                    if (r.id === t) {
                        return r;
                    }
                }
            }
            return {};
        };
        var a = [ "", "Spelling", "Misused", "Grammar", "Synonym" ];
        var c = function(e) {
            var t = [];
            if (!e || !e.correction || !e.correction.Corrections) {
                return {};
            }
            for (var n = 0; n < e.correction.Corrections.length; n++) {
                var r = e.correction.Corrections[n];
                var i = r.Suggestions.length ? r.Suggestions[0] : null;
                t.push({
                    original: e.text.substring(r.From, r.To + 1),
                    suggestion: i ? i.Text : null,
                    confidenceLevel: r ? r.Confidence : null,
                    correctionType: a[r.Type],
                    learningCategory: r.TopLrnCatId
                });
            }
            return {
                sentence: e.text,
                corrections: e.correction.Corrections.length,
                correctionsDetails: t
            };
        };
        var l = function(e, t) {
            return {
                correctionType: a[t.Type],
                learningCategory: t.TopLrnCatId,
                token: e.text.substring(t.From, t.To + 1),
                suggestion: t.Suggestions.length ? t.Suggestions[0].Text : null,
                sentence: e.text
            };
        };
        var t = function(e) {
            g = e;
            gingerModule.get("widget.report").report = g;
        };
        var n = function() {
            gingerModule.get("widget.correctionBubble").listen.on("show", function(e, t) {
                var n = c(t.sentence);
                n.type = "bubbleOpen";
                n.pageUrl = window.location.href;
                g(n);
                if (!o[t.sentence.id]) {
                    o[t.sentence.id] = true;
                    n.type = "bubbleOpenUnique";
                    g(n);
                }
            });
            gingerModule.get("widget.correctionBubble").listen.on("hide", function(e, t) {
                var n = c(t.sentence);
                n.type = "bubbleClose";
                n.pageUrl = window.location.href;
                g(n);
            });
            gingerModule.get("widget.correctionBubble").listen.on("ignore.all", function(e, t) {
                var n = l(t.sentence, t.correction);
                n.type = "IgnoreCorrectionEvent";
                g(n);
            });
            gingerModule.get("widget.correctionBubble").listen.on("approve.all", function(e, t) {
                var n = c(t.sentence);
                n.type = "approveFragment";
                g(n);
            });
            gingerModule.get("widget.correctionBubble").listen.on("approved.mistake", function(e, t) {
                var n = l(t.sentence, t.correction);
                n.type = "ApproveSingleTokenInBubble";
                g(n);
            });
            gingerModule.get("widget.correctionBubble").listen.on("ignored.mistake", function(e, t) {
                var n = l(t.sentence, t.correction);
                n.type = "IgnoreSingleCorrection";
                g(n);
            });
            gingerModule.get("widget.api").listen.on("grammarcheck.sent", function() {
                g({
                    type: "GingerTheTextRTEvent"
                });
            });
            gingerModule.get("widget.api").listen.on("dictionary.added", function(e, t) {
                g({
                    word: t,
                    modification: "WordAddition",
                    type: "PersonalDictionaryModification"
                });
            });
        };
        n();
        return {
            listen: r,
            report: g,
            setReporter: t
        };
    }, [ "widget.correctionBubble", "widget.config", "widget.correctionService" ]);
})();

(function() {
    var e = gingerModule.load("widget.rewriters.common", function() {
        var r = 10;
        var i = null;
        var o = [];
        var g = function(e) {
            if (e) o.push(e);
            var t = !!i;
            if (t) {
                return;
            }
            var n = o.shift();
            n();
            if (o.length) {
                i = setTimeout(g, r);
            } else {
                i = null;
            }
            return n;
        };
        var e = function(e, t, n) {
            var r = $gingerWidgetJquery(t).closest(e);
            if ($gingerWidgetJquery(r).find(n)) {
                return r;
            } else {
                return null;
            }
        };
        var v = function(e) {
            var t, n = [], r = document.createTreeWalker(e, NodeFilter.SHOW_TEXT, null, false);
            while (t = r.nextNode()) {
                n.push(t);
            }
            return n;
        };
        var t = function(e) {
            var t = document;
            var n = e;
            var r, i;
            if (t.body.createTextRange) {
                r = document.body.createTextRange();
                r.moveToElementText(n);
                r.select();
            } else if (window.getSelection) {
                i = window.getSelection();
                r = document.createRange();
                r.selectNodeContents(n);
                i.removeAllRanges();
                i.addRange(r);
            }
            return r;
        };
        var n = function(e, t, n, r, i, o) {
            $gingerWidgetJquery(e).focus();
            var g = v(e);
            if (!g.length) {
                var a;
                a = e.appendChild(document.createTextNode(""));
                o(e, a, t);
                return;
            }
            var c = gingerModule.get("widget.utils").getNodeOffsetOfIndex(e, n, r);
            var l = false;
            for (var d = 0; d < g.length; d++) {
                var s = g[d].nodeValue;
                var u = g[d] == c.startNode;
                var f = g[d] == c.endNode;
                if (u) {
                    l = true;
                }
                if (l) {
                    if (u && f) {
                        o(e, g[d], s.substring(0, c.startNodeOffset) + t + s.substring(c.endNodeOffset));
                    } else if (u) {
                        o(e, g[d], s.substring(0, c.startNodeOffset) + t);
                    } else if (f) {
                        o(e, g[d], s.substring(c.endNodeOffset));
                    } else {
                        o(e, g[d], "");
                    }
                }
                if (f) {
                    break;
                }
            }
            return;
        };
        return {
            executeInQueue: g,
            selectText: t,
            contentEditableReplacer: n
        };
    });
})();

(function() {
    var e = gingerModule.load("widget.rewriters.contentEditable", function() {
        var e = function(e, t, n, r) {
            var i = "p,h1, h2, h3, h4, h5, h6,li,pre,address,blockquote,dl,div";
            if (document.activeElement !== e) e.focus();
            gingerModule.get("widget.selectionManager").saveSelection(e);
            var o = function(e, t, n) {
                $gingerWidgetJquery(t).replaceWith(n);
            };
            var g = gingerModule.get("widget.rewriters.common").contentEditableReplacer(e, t, n, r, i, o);
            gingerModule.get("widget.selectionManager").restoreSelection(e);
        };
        return {
            rewrite: e
        };
    }, [ "widget.rewriters.common" ]);
})();

(function() {
    var e = gingerModule.load("widget.rewriters.draft.ce", function() {
        return gingerModule.get("widget.rewriters.facebook.ce");
    }, [ "widget.rewriters.common", "widget.rewriters.facebook.ce" ]);
})();

(function() {
    var e = gingerModule.load("widget.rewriters.draft.textarea", function() {
        var e = function(e, t, n, r) {
            var i = $gingerWidgetJquery(e);
            i.get(0).select();
            var o = i.val().length;
            var g = i.val().substring(n, r);
            var a = i.val().substring(0, n) + t + i.val().substring(r, o);
            i.val(a);
            gingerModule.get("widget.rewriters.common").executeInQueue(function() {
                var e = new CustomEvent("gingerModule-eventEmitter-react-fire", {
                    detail: {
                        prop: "value",
                        value: a
                    }
                });
                document.dispatchEvent(e);
            });
            gingerModule.get("widget.rewriters.common").executeInQueue(function() {
                var e = new CustomEvent("gingerModule-eventEmitter-react-fire", {
                    detail: {
                        event: "onChange",
                        params: {
                            target: {
                                value: a
                            }
                        }
                    }
                });
                document.dispatchEvent(e);
            });
        };
        return {
            rewrite: e
        };
    }, [ "widget.rewriters.common" ]);
})();

(function() {
    var e = gingerModule.load("widget.rewriters.facebook.ce", function() {
        var e = {};
        var t = function(e, t, n, r) {
            var i = "[data-block='true']";
            var o = function(e, t, n) {
                var r = document.activeElement;
                gingerModule.get("widget.rewriters.common").executeInQueue(function() {
                    var e = new CustomEvent("gingerModule-eventEmitter-react-fire", {
                        detail: {
                            event: "onSelect"
                        }
                    });
                    gingerModule.get("widget.rewriters.common").selectText(t);
                    document.dispatchEvent(e);
                });
                gingerModule.get("widget.rewriters.common").executeInQueue(function() {
                    if (!n) {
                        var e = new CustomEvent("gingerModule-eventEmitter-onkeydown", {
                            detail: {
                                keyCode: 8,
                                which: 8,
                                charCode: 0,
                                type: "keydown"
                            }
                        });
                        document.dispatchEvent(e);
                    } else {
                        var t = new CustomEvent("gingerModule-eventEmitter-onpaste", {
                            detail: n
                        });
                        document.dispatchEvent(t);
                    }
                });
            };
            gingerModule.get("widget.rewriters.common").contentEditableReplacer(e, t, n, r, i, o);
        };
        return {
            rewrite: t
        };
    }, [ "widget.rewriters.common" ]);
})();

(function() {
    var e = gingerModule.load("widget.rewriters.plainTextContentEditable", function() {
        var e = function(e, t, n, r) {
            var i = "div, p";
            var o = function(e, t, n) {
                t.nodeValue = n;
            };
            var g = gingerModule.get("widget.rewriters.common").contentEditableReplacer(e, t, n, r, i, o);
        };
        return {
            rewrite: e
        };
    }, [ "widget.rewriters.common" ]);
})();

(function() {
    var e = gingerModule.load("widget.rewriters.textarea", function() {
        var e = function(e, t, n, r) {
            var i = $gingerWidgetJquery(e);
            var o = i.val().length;
            var g = i.val().substring(n, r);
            var a = i.val().substring(0, n) + t + i.val().substring(r, o);
            i.val(a);
        };
        return {
            rewrite: e
        };
    }, [ "widget.rewriters.common" ]);
})();

(function() {
    var e = gingerModule.load("widget.rewriters.whatsapp.ce", function() {
        var e = function(e, t, n, r) {
            var i = function(e, t, n) {
                t.nodeValue = n;
                var r = new CustomEvent("gingerModule-eventEmitter-react-fire", {
                    detail: {
                        event: "onInput"
                    }
                });
                document.dispatchEvent(r);
                var r = new CustomEvent("gingerModule-eventEmitter-react-fire", {
                    detail: {
                        event: "onFocus"
                    }
                });
                document.dispatchEvent(r);
                $gingerWidgetJquery(e).focus();
            };
            var o = gingerModule.get("widget.rewriters.common").contentEditableReplacer(e, t, n, r, null, i);
        };
        return {
            rewrite: e
        };
    }, [ "widget.rewriters.common" ]);
})();

(function() {
    var e = gingerModule.load("widget.selectionManager", function() {
        var e = function(e) {
            var t = gingerModule.get("widget.utils").isRichTextElement(e);
            if (t) {
                return n(e);
            } else {
                return r(e);
            }
        };
        var n = function(e) {
            $gingerWidgetJquery("gwcphb").remove();
            $gingerWidgetJquery("gwcphe").remove();
            var t = window.getSelection();
            if (t.rangeCount > 0) {
                var n = t.getRangeAt(0);
                var r = n.cloneRange();
                r.collapse(true);
                var i = document.createElement("gwcphb");
                r.insertNode(i);
                r.detach();
                if (!n.collapsed) {
                    var o = n.cloneRange();
                    o.collapse();
                    var g = document.createElement("gwcphe");
                    o.insertNode(g);
                    o.detach();
                }
            }
            return null;
        };
        var r = function() {};
        var t = function(e) {
            var t = gingerModule.get("widget.utils").isRichTextElement(e);
            if (t) {
                return i(e);
            } else {
                return o(e);
            }
        };
        var i = function(e) {
            var t = e.querySelector("gwcphb");
            var n = e.querySelector("gwcphe");
            if (!t && !n) return null;
            var r = document.createRange();
            r.setStartAfter(t);
            if (n) {
                r.setEndAfter(n);
            } else {
                r.collapse(true);
            }
            if (t) t.parentNode.removeChild(t);
            if (n) n.parentNode.removeChild(n);
            r.commonAncestorContainer.normalize();
            var i = window.getSelection();
            i.removeAllRanges();
            i.addRange(r);
            return r;
        };
        var o = function() {};
        return {
            saveSelection: e,
            restoreSelection: t
        };
    }, [ "widget.utils" ]);
})();

gingerModule.load("widget.session", function() {
    var n = $gingerWidgetJquery("<eventScope>");
    var r = null;
    var e = function(e) {
        return r && e ? r[e] : r;
    };
    var t = function(e) {
        var t = JSON.stringify(r) !== JSON.stringify(e);
        r = e ? e : null;
        if (t) {
            n.trigger("change", e);
        }
    };
    var i = function() {
        return r && !r.isAnonym;
    };
    return {
        get: e,
        set: t,
        isLoggedIn: i,
        listen: n
    };
});

(function() {
    var e = gingerModule.load("widget.siteSettings", function() {
        var s = {
            kdfieneakcjfaiglcfcgkidlkmlijjnh: {
                pages: {
                    "*": {
                        rewriter: {
                            richText: "widget.rewriters.contentEditable"
                        },
                        highlighter: {
                            richText: "widget.highlighters.inline"
                        }
                    }
                }
            },
            "web.whatsapp.com": {
                pages: {
                    "*": {
                        rewriter: {
                            richText: "widget.rewriters.whatsapp.ce"
                        },
                        highlighter: {
                            richText: "widget.highlighters.ghost"
                        }
                    }
                },
                injection: "widget.injector.draft"
            },
            "gingersoftware.com": {
                pages: {
                    "ginger-writer": {
                        disabled: true
                    }
                }
            },
            "twitter.com": {
                pages: {
                    "*": {
                        rewriter: {
                            richText: "widget.rewriters.plainTextContentEditable"
                        },
                        highlighter: {
                            richText: "widget.highlighters.ghost"
                        }
                    }
                }
            },
            "linkedin.com": {
                pages: {
                    "/messaging": {
                        postRewriteEvents: [ "input" ]
                    }
                }
            },
            "salesforce.com": {
                pages: {
                    "/messaging": {
                        postRewriteEvents: [ "input" ]
                    },
                    "layout=EmailTemplate": {
                        disabled: true
                    }
                },
                injection: "widget.injector.quill"
            },
            "lightning.force.com": {
                pages: {
                    "/messaging": {
                        postRewriteEvents: [ "input" ]
                    }
                },
                injection: "widget.injector.quill"
            },
            "mail.yahoo.com": {
                pages: {
                    "/d/compose": {
                        rewriter: {
                            richText: "widget.rewriters.contentEditable"
                        },
                        highlighter: {
                            richText: "widget.highlighters.inline"
                        }
                    }
                },
                injection: "widget.injector.quill"
            },
            "facebook.com": {
                pages: {
                    "*": {
                        rewriter: {
                            richText: "widget.rewriters.facebook.ce"
                        },
                        highlighter: {
                            richText: "widget.highlighters.ghost"
                        }
                    },
                    "/notes": {
                        disabled: true
                    }
                },
                injection: "widget.injector.draft"
            },
            "messenger.com": {
                pages: {
                    "*": {
                        rewriter: {
                            richText: "widget.rewriters.plainTextContentEditable"
                        },
                        highlighter: {
                            richText: "widget.highlighters.ghost"
                        }
                    }
                }
            },
            "work.fb.com": {
                pages: {
                    "*": {
                        rewriter: {
                            richText: "widget.rewriters.plainTextContentEditable"
                        },
                        highlighter: {
                            richText: "widget.highlighters.ghost"
                        }
                    }
                }
            },
            localhost: {
                pages: {
                    "/ginger-widget/quill-injector.html": {
                        injection: "widget.injector.quill"
                    }
                },
                selectors: {
                    "[ginger-debug-ghostarea]": {
                        rewriter: {
                            richText: "widget.rewriters.contentEditable"
                        },
                        highlighter: {
                            richText: "widget.highlighters.ghost"
                        }
                    },
                    "[unittest-area]": {
                        postRewriteEvents: [ "input" ]
                    }
                }
            },
            "business.facebook.com": {
                pages: {
                    "*": {
                        rewriter: {
                            richText: "widget.rewriters.plainTextContentEditable"
                        },
                        highlighter: {
                            richText: "widget.highlighters.ghost"
                        }
                    }
                }
            },
            "instagram.com": {
                pages: {
                    "*": {
                        rewriter: {
                            richText: "widget.rewriters.draft.textarea"
                        },
                        highlighter: {
                            richText: "widget.highlighters.ghost"
                        }
                    }
                },
                injection: "widget.injector.draft"
            },
            "*": {
                selectors: {
                    "#advanced-search": {
                        disabled: true
                    },
                    ".cke_editable": {
                        postRewriteEvents: [ "input" ]
                    }
                }
            },
            "airbnb.com": {
                disabled: true,
                name: "AirBnB"
            },
            "evernote.com": {
                disabled: true,
                name: "Evernote"
            },
            "slack.com": {
                disabled: true,
                name: "Slack"
            },
            "quora.com": {
                disabled: true,
                name: "Quora"
            },
            "paper.dropbox.com": {
                disabled: true,
                name: "Dropbox Paper"
            },
            "docs.google.com": {
                disabled: true,
                name: "Google Docs"
            },
            "hangouts.google.com": {
                disabled: true,
                name: "Google Hangouts"
            },
            "pinterest.com": {
                disabled: true,
                name: "Pinterest"
            },
            "drive.google.com": {
                disabled: true,
                name: "Google Drive"
            },
            "hootsuite.com": {
                disabled: true,
                name: "Hoot Suite"
            },
            "facebook.com/notes": {
                disabled: true,
                name: "Facebook Notes"
            },
            "onedrive.live.com": {
                disabled: true,
                name: "OneDrive"
            },
            "docs.com": {
                disabled: true,
                name: "Docs.com"
            },
            "sp.docs.com": {
                disabled: true,
                name: "Docs.com"
            },
            "texteditor.nsspot.net": {
                disabled: true,
                name: "Text Editor for Google Drive"
            },
            "jsbin.com": {
                disabled: true,
                name: "JSBin"
            },
            "jsfiddle.net": {
                disabled: true,
                name: "JsFiddle"
            },
            "mail.live.com": {
                disabled: true,
                name: "Live"
            },
            "messenger.yahoo.com": {
                disabled: true,
                name: "Yahoo Messenger"
            },
            "revealyourgift.com": {
                disabled: true,
                name: "Reveal Your Gift"
            },
            "imperavi.com": {
                disabled: true,
                name: "Imperavi"
            }
        };
        var u = function(e) {
            var t = e.match(/^([^:]+\:)\/\/(([^:\/?#]*)(?:\:([0-9]+))?)([\/]{0,1}[^?#]*)(\?[^#]*|)(#.*|)$/);
            return t && {
                href: e,
                protocol: t[1],
                host: t[2],
                hostname: t[3].replace(/^www\./, ""),
                port: t[4],
                pathname: t[5],
                search: t[6],
                hash: t[7]
            };
        };
        var f = function(e) {
            var t = $gingerWidgetJquery(e).closest("[data-reactroot]");
            if (t.length) {
                return true;
            }
            return false;
        };
        var v = function(e, t) {
            return e.indexOf(t, e.length - t.length) !== -1;
        };
        var e = function(e, t) {
            if (!e && !t) {
                return s;
            }
            if (!e) e = window.location.href;
            var n = u(e);
            var r = {
                rewriter: {
                    richText: "widget.rewriters.contentEditable",
                    plainText: "widget.rewriters.textarea"
                },
                highlighter: {
                    richText: "widget.highlighters.inline",
                    plainText: "widget.highlighters.ghost"
                }
            };
            if (!n) return r;
            if (t) {
                var i = gingerModule.get("widget.utils").isRichTextElement(t);
                var o = f(t);
                var g, a;
                if (o) {
                    if (i) {
                        r.rewriter.richText = "widget.rewriters.draft.ce";
                        r.highlighter.richText = "widget.highlighters.ghost";
                    } else {
                        r.rewriter.plainText = "widget.rewriters.draft.textarea";
                        r.highlighter.plainText = "widget.highlighters.ghost";
                    }
                    if (!r.injection) r.injection = "widget.injector.draft";
                }
            }
            if (/about:blank/i.test(e)) return r;
            for (var c in s) {
                if (c === "*" || v(n.hostname, c)) {
                    if (s[c].disabled) {
                        return $gingerWidgetJquery.extend(s[c], {
                            domainDisabled: true
                        });
                    }
                    if (s[c].injection) {
                        $gingerWidgetJquery.extend(r, {
                            injection: s[c].injection
                        });
                    }
                    if (s[c].pages) {
                        for (var l in s[c].pages) {
                            if (l === "*" || n.href.indexOf(l) >= 0) {
                                $gingerWidgetJquery.extend(r, s[c].pages[l]);
                            }
                        }
                    }
                    if (t && s[c].selectors) {
                        for (var d in s[c].selectors) {
                            if ($gingerWidgetJquery(t).is(d)) {
                                $gingerWidgetJquery.extend(r, s[c].selectors[d]);
                            }
                        }
                    }
                }
            }
            if (t) {
                if (gingerModule.get("widget.utils").isRichTextElement(t)) {
                    r.highlighter = r.highlighter.richText;
                    r.rewriter = r.rewriter.richText;
                } else {
                    r.highlighter = r.highlighter.plainText;
                    r.rewriter = r.rewriter.plainText;
                }
            }
            return r;
        };
        return {
            get: e
        };
    }, []);
})();

(function() {
    var e = gingerModule.load("widget.utils", function() {
        var e = function() {
            var e = new Date().valueOf().toString() + Math.random().toString().substr(2, 10);
            return e;
        };
        var t = function(e, t) {
            return JSON.stringify(e) === JSON.stringify(t);
        };
        var n = function(e) {
            var t = e;
            var n;
            var r = {};
            if (window.getComputedStyle) {
                var i = function(e, t) {
                    return t.toUpperCase();
                };
                n = window.getComputedStyle(t, null);
                for (var o = 0, g = n.length; o < g; o++) {
                    var a = n[o];
                    var c = a.replace(/\-([a-z])/g, i);
                    var l = n.getPropertyValue(a);
                    r[c] = l;
                }
                return r;
            }
            if (n = t.currentStyle) {
                for (var a in n) {
                    r[a] = n[a];
                }
                return r;
            }
            return e.css();
        };
        var r = function(e) {
            var t = window.document.defaultView.getComputedStyle(e).getPropertyValue("z-index");
            if (isNaN(t)) return window.getZIndex(e.parentNode);
            return t;
        };
        var i = function(e, t) {
            t = $gingerWidgetJquery(t);
            var n = t.offset();
            var r = t.width();
            var i = t.height();
            return e.pageX >= n.left && e.pageX <= n.left + r && e.pageY >= n.top && e.pageY <= n.top + i;
        };
        var o = function(e) {
            if ($gingerWidgetJquery(e).attr("contenteditable")) {
                return true;
            } else {
                return false;
            }
        };
        var g = function(e, t) {
            if (!e) e = {};
            for (var n in t) {
                e[n] = t[n];
            }
            return e;
        };
        var a = function(e) {
            return JSON.parse(JSON.stringify(e));
        };
        var c = /(^[\s\W]+)/;
        var l = /([\s\W]+$)/;
        var d = /(^[\s\W]+|[\s\W]+$)/g;
        var s = function(e) {
            var t = e.match(c) || [ "" ];
            var n = e.match(l) || [ "" ];
            return {
                text: e.replace(d, ""),
                post: n[0],
                pre: t[0]
            };
        };
        var u = function(e, t) {
            var n = 0;
            var r;
            for (var i = 0; i < t.length && i < e.length; i++) {
                if (e.substring(0, i) === t.substring(0, i)) {
                    n = i;
                } else {
                    break;
                }
            }
            for (var i = 0; i < t.length && i < e.length; i++) {
                if (e.substring(e.length - i, e.length) === t.substring(t.length - i, t.length)) {
                    r = i;
                } else {
                    break;
                }
            }
            return {
                preCommon: n,
                postCommon: r,
                diff: t.length - e.length,
                from: n,
                to: e.length - r
            };
        };
        var f = function(e) {
            var t, n = [], r = document.createTreeWalker(e, NodeFilter.SHOW_TEXT, null, false);
            while (t = r.nextNode()) {
                n.push(t);
            }
            return n;
        };
        var v = function(e, t, n) {
            if (typeof n == "undefined") n = t;
            var r = 0;
            var i = {
                startNode: null,
                startNodeOffset: 0,
                endNode: null,
                endNodeOffset: 0
            };
            var o = gingerModule.get("widget.utils").getTextNodesUnder(e);
            if (t === 0) {
                i.startNode = o[0];
                i.startNodeOffset = 0;
            }
            for (var g = 0; g < o.length; g++) {
                var a = o[g].nodeValue;
                if (t >= r && t <= r + a.length) {
                    if (a.length === t - r && o[g + 1]) {
                        tniOffset = 1;
                        while (o.length > g + tniOffset && o[g + tniOffset].nodeValue.length == 0) {
                            tniOffset++;
                        }
                        i.startNode = o[g + tniOffset];
                        i.startNodeOffset = 0;
                    } else {
                        i.startNode = o[g];
                        i.startNodeOffset = t - r;
                    }
                }
                if (n > r && n <= r + a.length) {
                    i.endNode = o[g];
                    i.endNodeOffset = n - r;
                }
                r = r + a.length;
            }
            return i;
        };
        var h = function(e) {
            if (!e || !e.length) return e;
            var t = [];
            for (var n = 0; n < e.length; n++) {
                t.push({
                    text: e[n].text,
                    startsAt: e[n].startsAt,
                    endsAt: e[n].endsAt,
                    activeSentence: e[n].activeSentence,
                    id: e[n].id,
                    preLineBreakCount: e[n].preLineBreakCount,
                    postLineBreakCount: e[n].postLineBreakCount,
                    words: e[n].words,
                    correction: e[n].correction
                });
            }
            return t;
        };
        return {
            merge: g,
            getNodeOffsetOfIndex: v,
            generateUID: e,
            isMouseEventOverElement: i,
            clone: a,
            cloneRepresentation: h,
            compareObjects: t,
            trimAndMatch: s,
            diffString: u,
            isRichTextElement: o,
            getTextNodesUnder: f,
            getStyleOfObject: n
        };
    });
})();

(function() {
    var e = gingerModule.load("widget", function() {
        var e;
        var r = $gingerWidgetJquery({});
        var i = [];
        var t = [];
        var n = [];
        var o = true;
        var g = [];
        var a = function(e) {
            var t = new gingerModule.get("widget.inputHandler", true);
            var n = t().init(e);
            i.push(n);
            r.trigger("input.added", n);
        };
        var c = function() {
            return i;
        };
        var l = function(e) {
            if (e.apiKey) gingerModule.get("widget.config").set("apiKey", e.apiKey);
            if (e.userId) gingerModule.get("widget.config").set("userId", e.userId);
            if (e.widgetUid) gingerModule.get("widget.config").set("widgetUid", e.widgetUid);
            if (e.apiKey) gingerModule.get("widget.config").set("apiKey", e.apiKey);
            if (e.affId) gingerModule.get("widget.config").set("affId", e.affId);
            if (e.dialect) gingerModule.get("widget.config").set("dialect", e.dialect);
            if (e.version) gingerModule.get("widget.config").set("version", e.version);
            if (e.source) gingerModule.get("widget.config").set("source", e.source);
            if (e.charLimit) gingerModule.get("widget.config").set("charLimit", e.charLimit);
            if (e.disableAddToDictionary) gingerModule.get("widget.config").set("disableAddToDictionary", e.disableAddToDictionary);
            gingerModule.get("widget.inputFinder").listen.on("new", function(e, t) {
                a(t);
            });
            $gingerWidgetJquery(document).ready(function() {
                gingerModule.get("widget.inputFinder").init(e.inputFinder);
            });
            if (console && console.log) console.log("Running Ginger Widget v" + gingerModule.get("widget.config").get("version"));
        };
        var d = function(e) {
            for (var t = 0; t < i.length; t++) {
                if (i[t].id === e) {
                    return t;
                }
            }
            return null;
        };
        var s = function(e) {
            var t = d(e);
            var n = i[t];
            if (t !== null) {
                n.destroy();
                i.splice(t, 1);
            }
            r.trigger("input.removed", n);
        };
        var u = function() {
            o = false;
            while (i.length) {
                s(i[0].id);
            }
        };
        var f = function() {
            o = true;
            gingerModule.get("widget.inputFinder").refresh();
        };
        var v = function() {
            return o;
        };
        return {
            getInputs: c,
            listen: r,
            disable: u,
            enable: f,
            remove: s,
            isEnabled: v,
            init: l
        };
    }, [ "widget.inputFinder", "widget.inputHandler", "widget.phraseService", "widget.api", "widget.config", "widget.report", "widget.licenseLimits" ]);
})();

gingerModule.load("gingerchromeext.browser", function() {
    return window.chrome;
});

(function() {
    var e = gingerModule.load("gingerchromeext.content.addToPdPopup", function() {
        var n = function() {
            gingerModule.get("gingerchromeext.content.contentPopup").hide();
        };
        var r = function(n) {
            gingerModule.get("gingerchromeext.content.storage").get("dontShowPdPopupAnymore").then(function(e) {
                if (e) {
                    return;
                }
                var t = {
                    url: gingerModule.get("gingerchromeext.browser").runtime.getURL("content/popups/addedToPdPopup/index.html") + "?word=" + n + "&token=" + gingerModule.get("gingerchromeext.content.session").get().token,
                    height: 150,
                    width: 340,
                    withoutClose: true
                };
                gingerModule.get("gingerchromeext.content.contentPopup").show(t);
            });
        };
        var e = function() {
            gingerModule.get("widget.api").listen.on("dictionary.added", function(e, t) {
                r(t);
            });
            window.top.addEventListener("message", function(e) {
                var t = e.data ? e.data : {};
                if (!t) return;
                if (t.cmd === "addedToPdPopup.close") {
                    if (t.data && t.data.dontShowItAnyMore) {
                        gingerModule.get("gingerchromeext.content.storage").set("dontShowPdPopupAnymore", true);
                    }
                    n();
                }
            });
        };
        e();
        return {
            show: r,
            hide: n
        };
    }, [ "widget.api", "gingerchromeext.content.contentPopup", "gingerchromeext.content.session", "gingerchromeext.content.storage" ]);
})();

gingerModule.load("gingerchromeext.content.ajax", function() {
    return {
        execute: gingerModule.get("gingerchromeext.content.backgroundConnector").proxy({
            module: "gingerchromeext.background.ajax",
            callFunction: "execute",
            promise: true
        })
    };
}, [ "gingerchromeext.content.backgroundConnector" ]);

gingerModule.load("gingerchromeext.content.backgroundConnector", function() {
    var i = function(e, r) {
        try {
            gingerModule.get("gingerchromeext.browser").runtime.sendMessage(e, function(e, t, n) {
                if (r) r(e);
            });
        } catch (e) {
            console.log(e);
        }
    };
    var o = function(e) {
        var t = $gingerWidgetJquery.Deferred();
        e.promise = true;
        i(e, function(e) {
            if (e.rejected) {
                t.reject(e.result);
            } else {
                t.resolve(e.result);
            }
        });
        return t.promise();
    };
    var e = function(r) {
        var e = function(e, t) {
            if (r.promise) {
                r.callArgs = [];
                for (var n = 0; n < arguments.length; n++) {
                    r.callArgs.push(arguments[n]);
                }
                return o(r);
            } else {
                r.callArgs = [ e ];
                return i(r, t);
            }
        };
        return e;
    };
    return {
        call: i,
        callPromise: o,
        proxy: e
    };
});

gingerModule.load("gingerchromeext.content.banner", function() {
    return {
        get: gingerModule.get("gingerchromeext.content.backgroundConnector").proxy({
            module: "gingerchromeext.background.banners",
            callFunction: "getBanner",
            promise: true
        })
    };
}, [ "gingerchromeext.content.backgroundConnector" ]);

gingerModule.load("gingerchromeext.content.config", function() {
    var n = {};
    var t = $gingerWidgetJquery.Deferred();
    gingerModule.get("gingerchromeext.content.backgroundConnector").call({
        module: "gingerchromeext.background.config",
        callFunction: "get"
    }, function(e) {
        n = e;
        t.resolve(e);
    });
    return {
        get: function(e) {
            return e ? n[e] : n;
        },
        set: function(e, t) {
            n[e] = t;
            return n;
        },
        loaded: t.promise()
    };
}, [ "gingerchromeext.content.backgroundConnector" ]);

(function() {
    var e = gingerModule.load("gingerchromeext.content.contentPopup", function() {
        var t = $gingerWidgetJquery({});
        var n;
        var r = "gdiv";
        var i = function() {
            if (n) return;
            var e = window.top.document;
            if (!e.getElementsByTagName("body").length) {
                return;
            }
            n = {};
            n.main = e.getElementsByTagName("body")[0].appendChild(e.createElement(r));
            n.main.className = "ginger-extension-popup";
            n.main.frame = n.main.appendChild(e.createElement(r));
            n.main.frame.className = "ginger-extension-popup-frame";
            n.main.wrap = $gingerWidgetJquery('<gdiv class="ginger-extension-popup-wrap"></gdiv>').appendTo(n.main.frame).get(0);
            n.main.close = $gingerWidgetJquery('<ga class="ginger-extension-popup-close">&times;</ga>').appendTo(n.main.wrap).get(0);
            n.main.iframe = n.main.wrap.appendChild(e.createElement("iframe"));
            n.main.iframe.setAttribute("scrolling", "no");
            $gingerWidgetJquery(n.main.close).click(function() {
                t.trigger("closed");
                g();
            });
            return true;
        };
        var o = function(e) {
            var t = "";
            for (var n in e) {
                if (t != "") {
                    t += "&";
                }
                t += n + "=" + encodeURIComponent(e[n]);
            }
            return t;
        };
        var e = function(e) {
            i();
            if (e.withoutClose) {
                $gingerWidgetJquery(n.main.close).hide();
            } else {
                $gingerWidgetJquery(n.main.close).show();
            }
            n.main.iframe.src = gingerModule.get("gingerchromeext.browser").runtime.getURL("content/popups/contentPopup/index.html?") + o(e);
            $gingerWidgetJquery(n.main.iframe).css("width", e.width || "501").css("height", e.height || "510");
            $gingerWidgetJquery(n.main).show();
        };
        var g = function() {
            if (n) {
                n.main.iframe.src = "about:blank";
                $gingerWidgetJquery(n.main).hide();
            }
        };
        return {
            show: e,
            hide: g,
            listen: t
        };
    }, []);
})();

(function() {
    var e = gingerModule.load("gingerchromeext.content.definitionPopup", function() {
        var r;
        var i = function() {
            var e = document.selection, t, n, r = null;
            try {
                if (window.getSelection) {
                    e = window.getSelection();
                    if (e.rangeCount) {
                        t = e.getRangeAt(0).cloneRange();
                        if (t.getClientRects) {
                            n = t.getClientRects();
                            if (n.length > 0) {
                                r = t.getClientRects()[0];
                            }
                        }
                        if (x == 0 && y == 0) {
                            var i = document.createElement("span");
                            if (i.getClientRects) {
                                i.appendChild(document.createTextNode("​"));
                                t.insertNode(i);
                                r = $gingerWidgetJquery(i).offset();
                                var o = i.parentNode;
                                o.removeChild(i);
                                o.normalize();
                            }
                        }
                    }
                }
            } catch (e) {}
            return r;
        };
        var o = function() {
            var e = null;
            try {
                if (document.activeElement.nodeName.toLowerCase() !== "body") {
                    e = document.activeElement;
                } else {
                    e = window.getSelection().anchorNode;
                }
            } catch (e) {}
            return e;
        };
        var g = function() {
            var e = "";
            if (window.getSelection) {
                e = $gingerWidgetJquery.trim(window.getSelection().toString());
            } else if (document.selection && document.selection.type != "Control") {
                e = document.selection.createRange().text;
            }
            return e;
        };
        var e = function(e, t) {
            gingerModule.get("gingerchromeext.content.ajax").execute({
                url: "https://services.gingersoftware.com/dictionary/jsonSecured/GetDefinitions",
                data: {
                    word: e,
                    clientVersion: gingerModule.get("gingerchromeext.content.config").get("version"),
                    apiKey: gingerModule.get("gingerchromeext.content.config").get("apiKey"),
                    userIdentifier: gingerModule.get("gingerchromeext.content.session").get().userId,
                    lang: gingerModule.get("gingerchromeext.content.config").get("dialect")
                },
                cache: true
            }).then(function(e) {
                var n = [];
                if (e.DefsByWord.length > 0 && e.DefsByWord[0].DefsByPos && e.DefsByWord[0].DefsByPos.length > 0) {
                    $gingerWidgetJquery.each(e.DefsByWord[0].DefsByPos, function(e, t) {
                        $gingerWidgetJquery.each(t.Defs, function(e, t) {
                            n.push(t.Def);
                        });
                    });
                    if (n.length) t(n[0]);
                }
            }, function(e) {});
        };
        var a = function(e) {
            var t = "";
            for (var n in e) {
                if (t != "") {
                    t += "&";
                }
                t += n + "=" + encodeURIComponent(e[n]);
            }
            return t;
        };
        var t = [];
        var c = function(e) {
            if (e) {
                t.push(e);
                $gingerWidgetJquery(e).on("scroll.definitionScroll", function() {
                    d();
                });
                if (e.parentNode) c(e.parentNode);
            }
        };
        var n = function() {
            for (var e = 0; e < t.length; e++) {
                $gingerWidgetJquery(t[e]).off("scroll.definitionScroll");
            }
            t = [];
        };
        var l = function() {
            r = {};
            r.frame = $gingerWidgetJquery("<iframe class='ginger-extension-definitionpopup'></iframe>").appendTo(document.body);
        };
        var d = function() {
            n();
            if (r) $gingerWidgetJquery(r.frame).hide();
        };
        var s = function(n) {
            if (!r) l();
            e(n.text, function(e) {
                var t = {
                    title: n.text,
                    description: e
                };
                r.frame.attr("src", gingerModule.get("gingerchromeext.browser").runtime.getURL("content/popups/definitionPopup/index.html?") + a(t));
                $gingerWidgetJquery(r.frame).css("left", n.selectionCoordinates.left - 120 + n.selectionCoordinates.width / 2);
                $gingerWidgetJquery(r.frame).css("top", n.selectionCoordinates.top - 120);
                $gingerWidgetJquery(r.frame).css("z-index", 100001);
                $gingerWidgetJquery(r.frame).delay(200).fadeIn();
            });
            c(n.node);
        };
        var u = function() {
            document.addEventListener("dblclick", function(e) {
                gingerModule.get("gingerchromeext.content.storage").get("enableDefinitions").then(function(e) {
                    if (e) {
                        var t = {
                            text: g(),
                            selectionCoordinates: i(),
                            node: o()
                        };
                        var n = $gingerWidgetJquery(t.node).is("input,textarea,*[contenteditable='true']");
                        if (t.text && !t.text.match(/\s/) && !n) {
                            s(t);
                        }
                    }
                });
            });
            document.addEventListener("click", function(e) {
                d();
            });
            window.addEventListener("message", function(e) {
                var t = e.data ? e.data : {};
                if (!t) return;
                if (t.cmd === "definitionPopup.close") {
                    d();
                } else if (t.cmd === "definitionPopup.definition") {
                    d();
                    gingerModule.get("gingerchromeext.content.writer").open({
                        cmd: "ginger.extension.dictionary",
                        data: t.data
                    });
                } else if (t.cmd === "definitionPopup.translate") {
                    d();
                    gingerModule.get("gingerchromeext.content.writer").open({
                        cmd: "ginger.extension.translate",
                        data: t.data
                    });
                } else if (t.cmd === "definitionPopup.synonyms") {
                    d();
                    gingerModule.get("gingerchromeext.content.writer").open({
                        cmd: "ginger.extension.synonyms",
                        data: t.data
                    });
                }
            });
        };
        u();
        return {
            show: s,
            hide: d
        };
    }, [ "gingerchromeext.content.ajax", "gingerchromeext.content.config", "gingerchromeext.content.writer", "gingerchromeext.content.session", "gingerchromeext.browser", "gingerchromeext.content.storage" ]);
})();

(function() {
    var e = gingerModule.load("gingerchromeext.content.floatingG", function() {
        "use strict";
        var r = $gingerWidgetJquery({});
        var c = {};
        var i = null;
        var m = {
            bindClassname: "ginger-floatingG",
            bindContainerId: "ginger-floatingG-container",
            bubbleMargin: 4,
            scrollbarWidth: 17,
            mistakesSteps: [ 1, 5, 10, 20 ],
            popupSize: {
                height: 200,
                width: 160
            },
            gSize: 20,
            popup: ""
        };
        var e = null;
        var t = 2e3;
        var n = 0;
        var o = null;
        var g = function(e) {
            return e === "rtl";
        };
        var l = function(e) {
            return m.bindClassname + "-" + e;
        };
        var a = function(e) {
            var t = {
                height: 0,
                width: 0,
                top: 0,
                left: 0,
                node: e
            }, n = $gingerWidgetJquery(e);
            var r = n.hasClass("LW-avf");
            try {
                if (r) {
                    var i = n.closest("table").closest("td").get();
                    if (!i.length) {
                        return t;
                    }
                    t.node = i;
                    var o = $gingerWidgetJquery(e.firstElementChild || e.firstChild);
                    if (o.length > 0) {
                        var g = getComputedStyle(o.get(0));
                        if (g) t.direction = g.direction;
                    }
                }
            } catch (e) {}
            var a = n.is(".tweet-box");
            if (a) {
                t.width = -30;
            }
            var c = n.closest("._9w2xs").length;
            if (c) {
                t.width = -10;
            }
            var l = n.closest(".field.label-left").length;
            if (l) {
                t.top = 100;
            }
            var d = n.hasClass("_552m") && $gingerWidgetJquery(e.parentNode).hasClass("_552h");
            if (d) {
                t.node = e.parentNode;
                t.left = -46;
                t.left = n.outerWidth() + m.bubbleMargin * 2;
            }
            var s = n.is('[data-testid="status-attachment-mentions-input"]');
            if (s) {
                t.node = n.closest(".navigationFocus").get(0);
                t.top = 2;
                t.width = -20;
            }
            var u = n.is(".owa-font-compose");
            if (u) {
                var f = n.closest(".scrollContainer");
                var v = n.closest("._mcp_e1.ms-bg-color-white");
                t.node = f.height() > v.height() ? v.get(0) : f.get(0);
                t.top = -107;
                t.width = -8;
            }
            var h = /trello\.com/i.test(location.href) && n.is(".comment-box-input");
            if (h) {
                t.height = -30;
            }
            return t;
        };
        var d = function(e) {
            if (e.tagName === "IFRAME") {
                var t = e.contentWindow;
                var n = t.innerHeight;
                var r = t.innerWidth;
                return {
                    vertical: n < t.document.body.clientHeight,
                    horizontal: r < t.document.body.clientWidth
                };
            } else {
                return {
                    vertical: e.clientHeight < e.scrollHeight,
                    horizontal: e.clientWidth < e.scrollWidth
                };
            }
        };
        var s = function(e) {
            var t = a(e);
            if (!t.node) return;
            var n = M();
            if (n) {
                t.node = n;
            }
            var r = $gingerWidgetJquery(t.node).offset();
            var i = d(t.node);
            if (c.main.parentNode) {
                var o = $gingerWidgetJquery(c.main).parent().offset();
                r.left -= o.left;
                r.top -= o.top;
            }
            return {
                height: $gingerWidgetJquery(t.node).outerHeight() + t.height,
                width: $gingerWidgetJquery(t.node).outerWidth() + t.width,
                direction: t.direction || $gingerWidgetJquery(t.node).css("direction"),
                top: (r ? r.top : 0) + t.top,
                left: (r ? r.left : 0) + t.left,
                hasVerticalScrollbar: i.vertical || $gingerWidgetJquery(t.node).css("overflow") === "scroll" || $gingerWidgetJquery(t.node).css("overflow-y") === "scroll" ? true : false,
                hasHorizontalScrollbar: i.horizontal || $gingerWidgetJquery(t.node).css("overflow") === "scroll" || $gingerWidgetJquery(t.node).css("overflow-x") === "scroll" ? true : false,
                node: t.node
            };
        };
        var u = function(e) {
            return e.positionNode ? s(e.positionNode) : s(e.node);
        };
        var f = function(e) {
            var t = s(e);
            var n = m.bubbleMargin;
            var r = t.height >= m.bubbleMargin * 2 + m.gSize;
            if (!r) {
                n = Math.floor((t.height - m.gSize) / 2);
            }
            var i = t.left + t.width - m.bubbleMargin;
            var o = t.top + t.height - n - m.gSize;
            if (t.hasVerticalScrollbar) i = i - m.scrollbarWidth;
            if (t.hasHorizontalScrollbar) o = o - m.scrollbarWidth;
            c.main.style.left = i + "px";
            c.main.style.top = o + "px";
            var g = o - m.popupSize.height > 0;
            var a = i - m.popupSize.width > 0;
            if (g) {
                $gingerWidgetJquery(c.main).removeClass(l("posdown"));
            } else {
                $gingerWidgetJquery(c.main).addClass(l("posdown"));
            }
            if (a) {
                $gingerWidgetJquery(c.main).removeClass(l("posright"));
            } else {
                $gingerWidgetJquery(c.main).addClass(l("posright"));
            }
            c.main.style.zIndex = x($gingerWidgetJquery(t.node).get(0)) + 50;
        };
        var v = "gdiv";
        var h = function(e) {
            c.main = e.createElement(v);
            c.main.className = m.bindClassname + " " + m.bindClassname + "-closed";
            c.main.style.display = "none";
            c.blocked = c.main.appendChild(e.createElement(v));
            c.blocked.className = "ginger-floatingG-disabled-main";
            c.blocked.addEventListener("click", function(e) {
                P();
                i.element.focus();
                e.stopPropagation();
                return;
            });
            c.blockedToolTip = c.blocked.appendChild(e.createElement(v));
            c.blockedToolTip.className = "ginger-floatingG-bar-tool-tooltip";
            c.blockedToolTip.innerHTML = "Enable Ginger";
            c.offline = c.main.appendChild(e.createElement(v));
            c.offline.className = "ginger-floatingG-offline-main";
            c.offlineToolTip = c.offline.appendChild(e.createElement(v));
            c.offlineToolTip.className = "ginger-floatingG-bar-tool-tooltip";
            c.offlineToolTip.innerHTML = "<em>Cannot connect to Ginger</em> Check your internet connection<br> or reload the browser";
            c.enabled = c.main.appendChild(e.createElement(v));
            c.enabled.className = "ginger-floatingG-enabled-main";
            c.bar = c.enabled.appendChild(e.createElement(v));
            c.bar.className = "ginger-floatingG-bar";
            c.barClose = c.bar.appendChild(e.createElement(v));
            c.barClose.className = "ginger-floatingG-bar-tool ginger-floatingG-bar-tool-disable";
            c.barCloseLink = c.barClose.appendChild(e.createElement("ga"));
            c.barCloseLink.innerHTML = "";
            c.barCloseLink.addEventListener("click", function(e) {
                P();
                i.element.focus();
                e.stopPropagation();
                return;
            });
            c.barCloseToolTip = c.barClose.appendChild(e.createElement(v));
            c.barCloseToolTip.className = "ginger-floatingG-bar-tool-tooltip";
            c.barCloseToolTip.innerHTML = "Disable in this text field";
            c.barEdit = c.bar.appendChild(e.createElement(v));
            c.barEdit.className = "ginger-floatingG-bar-tool";
            c.barEditLink = c.barEdit.appendChild(e.createElement("ga"));
            c.barEditLink.className = "ginger-floatingG-bar-tool-edit";
            c.barEditLink.addEventListener("click", function(e) {
                S({
                    trigger: "FloatingGEdit"
                });
                e.stopPropagation();
                return;
            });
            c.barEditLink.innerHTML = "Edit";
            c.barEditToolTip = c.barEdit.appendChild(e.createElement(v));
            c.barEditToolTip.className = "ginger-floatingG-bar-tool-tooltip";
            c.barEditToolTip.innerHTML = "Edit in Ginger";
            c.barOpen = c.bar.appendChild(e.createElement(v));
            c.barOpen.className = "ginger-floatingG-bar-tool ginger-floatingG-bar-tool-mistakes";
            c.barOpenLink = c.barOpen.appendChild(e.createElement("ga"));
            c.mistakesCount = c.barOpenLink.appendChild(e.createElement("span"));
            c.mistakesCount.className = "ginger-floatingG-bar-tool-mistakes-count";
            c.barOpenLink.addEventListener("click", function(e) {
                S();
                e.stopPropagation();
                return;
            });
            c.barOpenToolTip = c.barOpen.appendChild(e.createElement(v));
            c.barOpenToolTip.className = "ginger-floatingG-bar-tool-tooltip";
            c.barOpenToolTip.innerHTML = "Edit in Ginger";
            return c;
        };
        var p = function(e) {
            if (n < e) {
                for (var t = 0; t < m.mistakesSteps.length; t++) {
                    if (n < m.mistakesSteps[t] && e >= m.mistakesSteps[t]) {
                        return true;
                    }
                }
            }
            return false;
        };
        var w = function(e) {
            if (e !== n) {
                if (p(e)) {
                    $gingerWidgetJquery(c.main).addClass(m.bindClassname + "-spin");
                } else {
                    $gingerWidgetJquery(c.main).removeClass(m.bindClassname + "-spin");
                }
                n = e;
            }
            if (e > 0) {
                $gingerWidgetJquery(c.main).addClass(m.bindClassname + "-dirty");
                if (e > 99) {
                    $gingerWidgetJquery(c.mistakesCount).html('<gdiv style="font-size:11px">99+</gdiv>');
                } else {
                    $gingerWidgetJquery(c.mistakesCount).text(e);
                }
            } else {
                $gingerWidgetJquery(c.main).removeClass(m.bindClassname + "-dirty");
                $gingerWidgetJquery(c.mistakesCount).text(e);
            }
        };
        var b = function(e) {
            if (e) {
                return e.ownerDocument || window.document;
            } else {
                return window.document;
            }
        };
        var y = function(e) {
            var t = window.document.defaultView.getComputedStyle(e, null).getPropertyValue("z-index");
            if (isNaN(t)) return 1;
            return t;
        };
        var x = function(e) {
            var t = 0;
            var n = e;
            while (n.parentNode) {
                var r = y(n);
                if (r > t) t = parseInt(r);
                n = n.parentNode;
            }
            return t;
        };
        var M = function() {
            try {
                if (window.parent !== window.self) {
                    if (window.parent === window.top) {
                        var e = window.frameElement;
                        if (e) {
                            return e;
                        }
                    } else {
                        return null;
                    }
                }
            } catch (e) {
                console.error(e);
            }
            return null;
        };
        var W = function() {
            var e = M();
            var t = e ? e.ownerDocument : window.document;
            var n = t.getElementsByTagName("body")[0].appendChild(t.createElement(v));
            if (t.getElementsByTagName("body")[0].getAttribute("contenteditable")) {
                n = t.getElementsByTagName("html")[0].insertBefore(t.createElement(v), t.getElementsByTagName("body")[0]);
            }
            n.style.position = "absolute";
            n.style.top = "0";
            n.style.left = "0";
            n.id = m.bindContainerId;
            h(t);
            n.appendChild(c.main);
            var r = M();
            if (r) {
                r.ownerDocument.body.addEventListener("DOMNodeRemoved", function(e) {
                    var t = e.target;
                    if (t === r || t.contains(r)) {
                        c.main.parentNode.removeChild(c.main);
                    }
                }, false);
            }
            return n;
        };
        var $ = function(e) {
            var t = "";
            for (var n in e) {
                if (t != "") {
                    t += "&";
                }
                t += n + "=" + encodeURIComponent(e[n]);
            }
            return t;
        };
        var q = null;
        var J = function() {
            q = {};
            q.main = c.main.appendChild(document.createElement(v));
            q.main.className = "ginger-floatingG-contentPopup";
            q.main.wrap = $gingerWidgetJquery('<gdiv class="ginger-floatingG-contentPopup-wrap"></gdiv>').appendTo(q.main).get(0);
            q.main.close = $gingerWidgetJquery('<ga class="ginger-floatingG-contentPopup-close">&times;</ga>').appendTo(q.main.wrap).get(0);
            q.main.frame = $gingerWidgetJquery('<gdiv class="ginger-floatingG-contentPopup-frame"></gdiv>').appendTo(q.main.wrap).get(0);
            q.main.iframe = q.main.frame.appendChild(document.createElement("iframe"));
            q.main.iframe.setAttribute("scrolling", "no");
            $gingerWidgetJquery(q.main.close).click(function() {
                k();
            });
        };
        var C = function(e) {
            var t = $gingerWidgetJquery(window).scrollTop();
            var n = $gingerWidgetJquery(q.main).offset().top;
            var r = n - t;
            if (n === 0 && t === 0) return true;
            return r - e > 0;
        };
        var T = function(e) {
            e.type = "floatingGContentPopup";
            var t = gingerModule.get("gingerchromeext.content.session").get();
            if (t && t.token) e.authToken = t.token;
            if (!q) J();
            k();
            var n = e.width || 300;
            var r = e.height || 150;
            $gingerWidgetJquery(q.main).fadeIn();
            if (C(r)) {
                $gingerWidgetJquery(q.main).removeClass("ginger-floatingG-contentPopup-down");
            } else {
                $gingerWidgetJquery(q.main).addClass("ginger-floatingG-contentPopup-down");
            }
            q.main.iframe.setAttribute("src", gingerModule.get("gingerchromeext.browser").runtime.getURL("content/popups/contentPopup/index.html?") + $(e));
            $gingerWidgetJquery(q.main.iframe).css("width", n).css("height", r);
            q.main.frame.style.height = r + "px";
        };
        var k = function() {
            $gingerWidgetJquery(q.main).hide();
        };
        var E = function(e) {
            var t = setTimeout(function() {
                $gingerWidgetJquery(c.main).addClass(m.bindClassname + "-closed");
            }, 100);
        };
        var S = function(e) {
            if (!e) e = {};
            if (!e.type) e.type = "writer";
            var t;
            if (e.type === "writer" && i) {
                t = /^\s+$/.test(i.getVal()) ? "" : i.getFormattedVal();
            }
            e = {
                cmd: "ginger.extension.setText",
                data: {
                    text: t,
                    cache: JSON.stringify(gingerModule.get("widget.api").dumpCorrectionCache()),
                    ignoredWords: gingerModule.get("widget.correctionService").getIgnoredWords()
                }
            };
            r.trigger("writer.open", e);
        };
        var L = function() {
            window.addEventListener("message", function e(t) {
                if (!t.data) return;
                var n = t.data;
                try {
                    n = JSON.parse(t.data);
                } catch (t) {}
                if (n.type === "floatingGContentPopup") {
                    if (n.intent === "signIn") {
                        r.trigger("inlineAuth.open", {
                            view: "login",
                            trigger: "FloatingGBackTo"
                        });
                    } else if (n.intent === "neverShowSignIn") {
                        gingerModule.get("gingerchromeext.content.storage").set("signInFloatingGPopupShowInWindows", [ "*" ]);
                    } else if (n.intent === "openBusinessPage") {
                        window.open("https://www.gingersoftware.com/business?autk=" + encodeURIComponent(gingerModule.get("gingerchromeext.content.session").get().token) + "&utm_medium=" + gingerModule.get("gingerchromeext.content.config").get("platform") + "_ext&utm_source=g_message&utm_campaign=smb_intro");
                    }
                    if (i) i.element.focus();
                    k();
                }
            }, false);
        };
        var I = function() {
            if (!document.getElementsByTagName("body").length) return;
            W();
            J();
            L();
            gingerModule.get("widget").listen.on("input.removed", function(e, t) {
                var n = [ "focus", "blur", "mutation", "visibility.change" ];
                for (var r = 0; r < n.length; r++) {
                    t.events.listen.off(n[r]);
                }
                B();
            });
            gingerModule.get("widget").listen.on("input.added", function(e, n) {
                if (n.element === document.activeElement) {
                    F(n);
                }
                n.events.listen.on("focus", function() {
                    F(n);
                    O(n);
                });
                n.events.listen.on("blur", function() {
                    if (o) o = clearTimeout(o);
                    o = setTimeout(function() {
                        if (M() || n.element !== document.activeElement) B();
                    }, 1e3);
                });
                n.events.listen.on("mutation", function() {
                    O(n);
                });
                n.events.listen.on("visibility.change", function(e, t) {
                    if (t) {
                        F(i);
                    } else {
                        if (n === i) B();
                    }
                });
                n.events.listen.on("inputchange", function() {
                    k();
                });
            });
            gingerModule.get("widget.onlinestatus").listen.on("online", function(e) {
                $gingerWidgetJquery(c.main).removeClass(m.bindClassname + "-offline");
            });
            gingerModule.get("widget.onlinestatus").listen.on("offline", function(e) {
                $gingerWidgetJquery(c.main).addClass(m.bindClassname + "-offline");
            });
            gingerModule.get("widget.api").listen.on("ajax.start", function() {
                if (e) e = clearTimeout(e);
                $gingerWidgetJquery(c.main).addClass(m.bindClassname + "-loading");
            });
            gingerModule.get("widget.api").listen.on("ajax.end", function() {
                if (e) e = clearTimeout(e);
                e = setTimeout(function() {
                    $gingerWidgetJquery(c.main).removeClass(m.bindClassname + "-loading");
                }, t);
            });
            $gingerWidgetJquery(c.bar).mouseover(function() {
                $gingerWidgetJquery(c.main).addClass(m.bindClassname + "-open");
                $gingerWidgetJquery(c.main).removeClass(m.bindClassname + "-closed");
            });
            $gingerWidgetJquery(c.bar).mouseout(function() {
                $gingerWidgetJquery(c.main).removeClass(m.bindClassname + "-open");
                $gingerWidgetJquery(c.main).addClass(m.bindClassname + "-closed");
            });
        };
        var N = function(e, t) {
            var n = i.stats.get();
            w(n.mistakes.grammar + n.mistakes.spelling);
            var r = s(i.element).height / parseInt($gingerWidgetJquery(i.element).css("font-size"));
            if (!r) r = 0;
            if (n.count.characters > 0 && r < 4) {
                A(true);
            } else {
                A(false);
            }
        };
        var F = function(e) {
            if (!gingerModule.get("widget").isEnabled()) return;
            B();
            k();
            if (o) o = clearTimeout(o);
            gingerModule.get("gingerchromeext.content.session").isLoggedIn().then(function() {
                c.barEditToolTip.innerHTML = "Edit in Ginger";
                c.barOpenToolTip.innerHTML = "Edit in Ginger";
            }, function() {
                c.barEditToolTip.innerHTML = "Log in to edit with Ginger";
                c.barOpenToolTip.innerHTML = "Log in to edit with Ginger";
            });
            i = e;
            if (e.isEnabled()) {
                $gingerWidgetJquery(c.main).removeClass(m.bindClassname + "-disabled");
            } else {
                $gingerWidgetJquery(c.main).addClass(m.bindClassname + "-disabled");
            }
            if (gingerModule.get("widget.onlinestatus").isOnline()) {
                $gingerWidgetJquery(c.main).removeClass(m.bindClassname + "-offline");
            } else {
                $gingerWidgetJquery(c.main).addClass(m.bindClassname + "-offline");
            }
            var t = $gingerWidgetJquery(e.element.parentNode).height() <= 0;
            if (!t) {
                N();
                i.stats.listen.on("changed", N);
                O(i);
                $gingerWidgetJquery(c.main).show();
                gingerModule.get("gingerchromeext.content.storage").get("onboardingFloatingGShown").then(function(e) {
                    if (!e) {
                        T({
                            url: "https://cdn.gingersoftware.com/extensions/chrome/floatingGPopup/ftue.html"
                        });
                        gingerModule.get("gingerchromeext.content.storage").set("onboardingFloatingGShown", true);
                    } else {
                        gingerModule.get("gingerchromeext.content.session").isLoggedIn().then(function e() {}, function e() {
                            gingerModule.get("gingerchromeext.content.storage").get("onboardingFloatingGShown").then(function(e) {
                                if (!e) return;
                                gingerModule.get("gingerchromeext.content.storage").get("signInFloatingGPopupShowInWindows").then(function(e) {
                                    var t = e || [];
                                    gingerModule.get("gingerchromeext.content.backgroundConnector").callPromise({
                                        module: "gingerchromeext.background.browserInterface",
                                        callFunction: "getActiveTab"
                                    }).then(function(e) {
                                        if (t[0] !== "*" && t.indexOf(e.id) === -1) {
                                            T({
                                                url: "https://cdn.gingersoftware.com/extensions/chrome/floatingGPopup/signIn.html"
                                            });
                                            t.push(e.id);
                                            t = t.slice(-60);
                                            gingerModule.get("gingerchromeext.content.storage").set("signInFloatingGPopupShowInWindows", t);
                                        } else {}
                                    });
                                });
                            });
                        });
                    }
                });
            } else {
                if (console && console.warn) console.warn("Possibly a tricky area for floatingG!");
            }
        };
        var B = function() {
            $gingerWidgetJquery(c.main).hide();
            if (i) {
                i.stats.listen.off("changed", N);
            }
        };
        var A = function(e) {
            if (e) $gingerWidgetJquery(c.main).addClass(m.bindClassname + "-minified"); else $gingerWidgetJquery(c.main).removeClass(m.bindClassname + "-minified");
        };
        var R = function(e, t) {
            if (!i) return;
            if (e === i.element) {
                if (t) {
                    F(i);
                } else {
                    B();
                }
            }
        };
        var O = function(e) {
            if (e !== i) return false;
            f(e.element);
        };
        var P = function(e) {
            var t = "Enable";
            if (!i) return;
            if (i.isEnabled()) {
                t = "Disable";
                i.disable();
                c.barCloseToolTip.innerHTML = "Enable in this text field";
                $gingerWidgetJquery(c.main).addClass(m.bindClassname + "-disabled");
            } else {
                i.enable();
                c.barCloseToolTip.innerHTML = "Disable in this text field";
                $gingerWidgetJquery(c.main).removeClass(m.bindClassname + "-disabled");
            }
            $gingerWidgetJquery(c.main).removeClass(m.bindClassname + "-open");
            gingerModule.get("gingerchromeext.content.report").reporter({
                type: "EnableOrDisableGinger",
                Action: t,
                location: "FloatingG"
            });
            gingerModule.get("gingerchromeext.content.report").reporter({
                type: "SettingsModification",
                Action: t,
                location: "FloatingG",
                SettingsType: "CorrectionSettingsType"
            });
        };
        var j = function() {
            return i;
        };
        return {
            legacyConnector: {
                show: F,
                hide: B
            },
            listen: r,
            getActiveElement: j,
            showContentPopup: T,
            init: I
        };
    }, [ "widget", "widget.utils", "widget.inputFinder", "gingerchromeext.content.report" ]);
})();

gingerModule.load("gingerchromeext.content.init", function() {
    var n;
    var r = function() {
        gingerModule.get("gingerchromeext.content.widget");
        gingerModule.get("gingerchromeext.content.onboardingBubbles");
        n = clearInterval(n);
    };
    var i = function() {
        window.postMessage({
            cmd: "gingerchromeext.content.inited"
        }, "*");
        gingerModule.get("gingerchromeext.content.writer");
        gingerModule.get("gingerchromeext.content.writer").listen.one("writer.loaded", function() {
            gingerModule.get("gingerchromeext.content.writer").open();
        });
        n = clearInterval(n);
    };
    var e = function() {
        window.addEventListener("message", function(t) {
            var n = {};
            try {
                n = JSON.parse(t.data);
            } catch (e) {
                n = t.data;
            }
            if (!n) return;
            if (n.type === "gingerAuth.login.successful") {
                gingerModule.get("gingerchromeext.content.session").set(n.session);
                var e = t.origin === gingerModule.get("gingerchromeext.browser").runtime.getURL("").split("/").splice(0, 3).join("/");
                if (e) {
                    if (n.session.signUp) {
                        gingerModule.get("gingerchromeext.content.report").reporter({
                            type: "RegistrationEvent",
                            provider: n.session.provider,
                            trigger: n.trigger
                        });
                    } else {
                        gingerModule.get("gingerchromeext.content.report").reporter({
                            type: "LoginEvent",
                            provider: n.session.provider,
                            trigger: n.trigger
                        });
                    }
                }
            }
        });
    };
    var t = function() {
        var e = /gingersoftware\.com\/ginger-writer/.test(location.href);
        var t = document.querySelector("meta[name=disable-ginger-extension]");
        if (e) {
            i();
            n = clearInterval(n);
        } else if (t) {
            n = clearInterval(n);
        } else if (document.querySelectorAll("textarea").length || document.querySelectorAll("[contenteditable]").length) {
            r();
            n = clearInterval(n);
        }
    };
    var o = function() {
        n = setInterval(t, 4e3);
        t();
        e();
        gingerModule.get("gingerchromeext.content.definitionPopup");
        gingerModule.get("gingerchromeext.content.writer");
        gingerModule.get("gingerchromeext.content.inlineAuth");
    };
    o();
}, []);

(function() {
    var e = gingerModule.load("gingerchromeext.content.inlineAuth", function(e) {
        var n = $gingerWidgetJquery({});
        var t;
        var r;
        var i = function() {
            window.addEventListener("message", function(t) {
                var n = {};
                try {
                    n = JSON.parse(t.data);
                } catch (e) {
                    n = t.data;
                }
                if (!n) return;
                if (n.type === "gingerAuth.login.successful") {
                    gingerModule.get("gingerchromeext.content.contentPopup").hide();
                } else if (n.cmd === "ginger.extension.inlineAuth.open") {
                    o("Writer").then(function() {}, function() {});
                }
            });
        };
        var o = function(e) {
            r = $gingerWidgetJquery.Deferred();
            gingerModule.get("gingerchromeext.content.session").isLoggedIn().then(function() {}, function() {
                g(e);
            });
            return r.promise();
        };
        var g = function(e) {
            var t = {
                url: "https://cdn.gingersoftware.com/extensions/auth/",
                height: 600,
                width: 410,
                platform: gingerModule.get("gingerchromeext.content.config").get("source"),
                trigger: e.trigger,
                clientVersion: gingerModule.get("gingerchromeext.content.config").get("clientVersion"),
                widgetUid: gingerModule.get("gingerchromeext.content.config").get("widgetUid"),
                origin: gingerModule.get("gingerchromeext.content.config").get("affId"),
                utm_medium: e.trigger,
                utm_source: "button",
                utm_campaign: "signup_login"
            };
            t.url += e.view === "login" ? "#!/login" : "#!/sign-up";
            gingerModule.get("gingerchromeext.content.contentPopup").show(t);
            gingerModule.get("gingerchromeext.content.contentPopup").listen.one("closed", function() {
                n.trigger("auth.cancelled");
            });
        };
        var a = function() {
            i();
            if (window.location.href.indexOf("pages/postinstall/index.html") !== -1) {
                o();
            }
        };
        a();
        return {
            open: o,
            listen: n
        };
    }, [ "gingerchromeext.content.session", "gingerchromeext.content.config", "gingerchromeext.content.report" ]);
})();

(function() {
    var e = gingerModule.load("gingerchromeext.content.licenseLimits", function() {
        var a = {
            chrome: {
                exceeded: "https://cdn.gingersoftware.com/conv2prem/exceeded-chrome2/",
                onbubble: "https://cdn.gingersoftware.com/conv2prem/onbubble-chrome/",
                approaching: "https://cdn.gingersoftware.com/conv2prem/approaching-chrome/"
            },
            safari: {
                exceeded: "https://cdn.gingersoftware.com/conv2prem/exceeded-safari2/",
                onbubble: "https://cdn.gingersoftware.com/conv2prem/onbubble-safari/",
                approaching: "https://cdn.gingersoftware.com/conv2prem/approaching-safari/"
            }
        };
        var e = function(e) {
            var t = gingerModule.get("gingerchromeext.content.session").get();
            var n = {};
            if (t) {
                n.email = t.email;
                n.authToken = t.token;
            }
            var r = "";
            for (var i in n) {
                if (r != "") {
                    r += "&";
                }
                r += i + "=" + encodeURIComponent(n[i]);
            }
            var o = {};
            var g = a[gingerModule.get("gingerchromeext.content.config").get("platform")];
            switch (e) {
              case "approaching":
                o = {
                    url: g.approaching + "?" + r,
                    width: "565",
                    height: "585"
                };
                break;

              case "onbubble":
                o = {
                    url: g.onbubble + "?" + r,
                    width: "585",
                    height: "468"
                };
                gingerModule.get("gingerchromeext.content.storage").get("onBubblePopupShownForUsers").then(function(e) {
                    if (!e) e = [];
                    if (e.indexOf(t.userId) === -1) {
                        gingerModule.get("gingerchromeext.content.report").reporter({
                            msgid: "CapacityLimitationActivatedMessage",
                            type: "MessageOpenEvent"
                        });
                        e.push(t.userId);
                        gingerModule.get("gingerchromeext.content.storage").set("onBubblePopupShownForUsers", e);
                    }
                });
                break;

              case "exceeded":
                o = {
                    url: g.exceeded + "?" + r,
                    width: "501",
                    height: "510"
                };
                break;
            }
            o.withoutClose = true;
            gingerModule.get("gingerchromeext.content.contentPopup").show(o);
        };
        var r = function() {
            gingerModule.get("gingerchromeext.content.contentPopup").hide();
        };
        var t = function() {
            window.addEventListener("message", function(t) {
                var n = {};
                try {
                    n = JSON.parse(t.data);
                } catch (e) {
                    n = t.data;
                }
                if (!n) return;
                if (n && n.action === "close") {
                    setTimeout(r);
                } else if (n.cmd == "ginger.extension.licenseLimits") {
                    e(n.type);
                }
            });
        };
        var n = function() {
            t();
        };
        n();
        return {
            showLimitationPopup: e
        };
    }, [ "gingerchromeext.content.session", "gingerchromeext.content.config", "widget.licenseLimits", "widget.correctionBubble" ]);
})();

(function() {
    var e = gingerModule.load("gingerchromeext.content.marketingPopups", function() {
        var r = function() {
            if (/Win/i.test(navigator.appVersion)) {
                return "win";
            } else if (/Mac/i.test(navigator.platform)) {
                return "mac";
            }
            return "other";
        };
        var e = function() {
            window.addEventListener("message", function(t) {
                var n = "";
                try {
                    n = JSON.parse(t.data);
                } catch (e) {
                    n = t.data;
                }
                if (!n) return;
                if (n.cmd == "ginger.extension.pollMessage") {
                    o();
                }
            });
        };
        var i = [];
        var o = function(n) {
            gingerModule.get("gingerchromeext.content.session").isLoggedIn().then(function e() {
                var t = gingerModule.get("gingerchromeext.content.session").get();
                if (t) {
                    gingerModule.get("gingerchromeext.content.ajax").execute({
                        url: "https://clientMessages.gingersoftware.com/getNextMessage/" + t.userId + "/" + gingerModule.get("gingerchromeext.content.config").get("affId"),
                        data: {
                            os: r(),
                            version: gingerModule.get("gingerchromeext.content.config").get("clientVersion")
                        }
                    }).then(function e(t) {
                        if (!t && i.length) {
                            t = i.shift();
                        }
                        if (t && t.url) {
                            if (t.cont_ui === "ie") {
                                gingerModule.get("gingerchromeext.content.contentPopup").show({
                                    url: t.url,
                                    width: parseInt(t.width),
                                    height: parseInt(t.height),
                                    type: t.id,
                                    authToken: gingerModule.get("gingerchromeext.content.session").get().token
                                });
                            } else if (t.cont_ui === "extension.floatingG") {
                                if (n === "approve.one" || n === "approve.all") {
                                    gingerModule.get("gingerchromeext.content.session").isLoggedIn().then(function() {
                                        gingerModule.get("gingerchromeext.content.floatingG").showContentPopup({
                                            url: t.url,
                                            width: parseInt(t.width),
                                            height: parseInt(t.height)
                                        });
                                    }, function() {});
                                } else {
                                    i.push(t);
                                }
                            }
                        }
                    }, function e() {});
                }
            }, function e() {});
        };
        e();
        return {
            pollForNewMessage: o
        };
    }, [ "gingerchromeext.content.session", "gingerchromeext.content.config", "widget.correctionBubble", "gingerchromeext.content.ajax" ]);
})();

gingerModule.load("gingerchromeext.content.onboardingBubbles", function() {
    var r = {};
    var i = false;
    var o = function() {
        var e = document.body;
        r.main = $gingerWidgetJquery('<gdiv class="ginger-module-correctionBubble-onboarding"></gdiv>').appendTo(e);
        r.top = $gingerWidgetJquery('<gdiv class="ginger-module-correctionBubble-onboarding-bubble ginger-module-correctionBubble-onboarding-top">To approve a single suggestion, mouse over it and click "✔"</gdiv>').appendTo(r.main);
        r.bottom = $gingerWidgetJquery('<gdiv class="ginger-module-correctionBubble-onboarding-bubble ginger-module-correctionBubble-onboarding-bottom">Click the bubble to approve all of its suggestions.</gdiv>').appendTo(r.main);
    };
    var g = function(e, t) {
        var n = document.getElementsByTagName("gwbm")[0];
        if (!n) return;
        gingerModule.get("gingerchromeext.content.session").isLoggedIn().then(function() {
            var e = $gingerWidgetJquery(n).offset();
            var t = $gingerWidgetJquery(".ginger-module-correctionBubble-container-loggedin .ginger-module-correctionBubble-body").offset();
            $gingerWidgetJquery(r.top).css("top", e.top - 76);
            $gingerWidgetJquery(r.top).css("left", e.left - 45);
            $gingerWidgetJquery(r.bottom).css("top", t.top + 60);
            $gingerWidgetJquery(r.bottom).css("left", t.left - 35);
            $gingerWidgetJquery(r.main).show();
            i = true;
            gingerModule.get("gingerchromeext.content.storage").set("onboardingBubblesShown", true);
        }, function() {});
    };
    var a = function() {
        if (i) {
            gingerModule.get("widget.correctionBubble").listen.off("hide", a);
            gingerModule.get("widget.correctionBubble").listen.off("show", g);
            $gingerWidgetJquery(r.main).remove();
        }
    };
    var c = function() {
        var e = document.getElementsByTagName("gwbm")[0];
        if (!e) return;
        var t = $gingerWidgetJquery(e).offset();
        var n = $(window).scrollTop();
        var r = n + $(window).height();
        if (t.top + 100 < viewPortBottom && t.top - 100 < n) {
            return true;
        }
        return false;
    };
    var e = function() {
        gingerModule.get("gingerchromeext.content.storage").get("onboardingBubblesShown").then(function(e) {
            if (!e) {
                var t = window.top !== window;
                var n = c();
                if (!t) {
                    o();
                    gingerModule.get("widget.correctionBubble").listen.on("show", g);
                    gingerModule.get("widget.correctionBubble").listen.on("hide", a);
                }
            }
        });
    };
    e();
}, [ "gingerchromeext.content.storage" ]);

gingerModule.load("gingerchromeext.content.report", function() {
    return {
        reporter: gingerModule.get("gingerchromeext.content.backgroundConnector").proxy({
            module: "gingerchromeext.background.report",
            callFunction: "reporter"
        })
    };
}, [ "gingerchromeext.content.backgroundConnector" ]);

gingerModule.load("gingerchromeext.content.session", function() {
    var t = $gingerWidgetJquery("<eventScope>");
    var n = {};
    var r = $gingerWidgetJquery.Deferred();
    var e = function() {
        return n;
    };
    var i = gingerModule.get("gingerchromeext.content.backgroundConnector").proxy({
        module: "gingerchromeext.background.session",
        callFunction: "set",
        promise: true
    });
    var o = gingerModule.get("gingerchromeext.content.backgroundConnector").proxy({
        module: "gingerchromeext.background.session",
        callFunction: "isLoggedIn",
        promise: true
    });
    var g = gingerModule.get("gingerchromeext.content.backgroundConnector").proxy({
        module: "gingerchromeext.background.session",
        callFunction: "refresh",
        promise: true
    });
    var a = function(e) {
        if (JSON.stringify(e) === JSON.stringify(n)) return;
        if (e && e.token) {
            n = e;
            t.trigger("login");
        } else if (e && e.isAnonym) {
            n = e;
            t.trigger("logout");
        } else {
            n = null;
            t.trigger("logout");
        }
        t.trigger("change");
    };
    var c = function() {
        g().then(function(e) {
            a(e);
            r.resolve(e);
        });
        gingerModule.get("gingerchromeext.content.storage").listen.on("change", function(e, t) {
            if ("session" in t) {
                var n = t.session.newValue;
                a(n);
            }
        });
    };
    c();
    return {
        get: e,
        set: i,
        refresh: g,
        isLoggedIn: o,
        listen: t,
        loaded: r.promise()
    };
}, [ "gingerchromeext.content.storage", "gingerchromeext.content.config" ]);

gingerModule.load("gingerchromeext.content.storage", function() {
    var n = $gingerWidgetJquery("<eventScope>");
    var e = function() {
        gingerModule.get("gingerchromeext.browser").storage.onChanged.addListener(function(e, t) {
            n.trigger("change", e, t);
        });
    };
    e();
    return {
        get: gingerModule.get("gingerchromeext.content.backgroundConnector").proxy({
            module: "gingerchromeext.background.storage",
            callFunction: "get",
            promise: true
        }),
        set: gingerModule.get("gingerchromeext.content.backgroundConnector").proxy({
            module: "gingerchromeext.background.storage",
            callFunction: "set",
            promise: true
        }),
        listen: n
    };
}, []);

gingerModule.load("gingerchromeext.content.widget", function() {
    var n = [];
    var e;
    var t = true;
    var r = function(e) {
        window.top.postMessage(e, "*");
    };
    var i = function() {
        gingerModule.get("widget.report").setReporter(function(e) {
            gingerModule.get("gingerchromeext.content.report").reporter(e);
        });
        gingerModule.get("widget").init({
            inputFinder: {
                selector: '[gingerWidgetDebugArea] [contenteditable="true"], div[contenteditable="true"], textarea'
            },
            version: gingerModule.get("gingerchromeext.content.config").get("clientVersion"),
            apiKey: gingerModule.get("gingerchromeext.content.config").get("apiKey"),
            source: gingerModule.get("gingerchromeext.content.config").get("source"),
            userId: gingerModule.get("gingerchromeext.content.session").get().userId,
            widgetUid: gingerModule.get("gingerchromeext.content.config").get("widgetUid"),
            platform: gingerModule.get("gingerchromeext.content.config").get("platform"),
            token: gingerModule.get("gingerchromeext.content.session").get().token
        });
        if (t) {
            gingerModule.get("widget.licenseLimits").listen.on("triggered.approaching", function() {
                gingerModule.get("gingerchromeext.content.licenseLimits").showLimitationPopup("approaching");
            });
            gingerModule.get("widget.licenseLimits").listen.on("triggered.exceeded", function() {
                gingerModule.get("gingerchromeext.content.licenseLimits").showLimitationPopup("exceeded");
            });
            gingerModule.get("widget.licenseLimits").listen.on("triggered.onbubble", function() {
                gingerModule.get("gingerchromeext.content.licenseLimits").showLimitationPopup("onbubble");
            });
            gingerModule.get("widget.correctionBubble").listen.on("limited.approve.all", function() {
                gingerModule.get("gingerchromeext.content.licenseLimits").showLimitationPopup("onbubble");
            });
            gingerModule.get("widget.correctionBubble").listen.on("limited.approve", function() {
                gingerModule.get("gingerchromeext.content.licenseLimits").showLimitationPopup("onbubble");
            });
            gingerModule.get("widget.correctionBubble").listen.on("approved.mistake", function() {
                gingerModule.get("gingerchromeext.content.marketingPopups").pollForNewMessage("approve.one");
            });
            gingerModule.get("widget.correctionBubble").listen.on("approve.all", function() {
                gingerModule.get("gingerchromeext.content.marketingPopups").pollForNewMessage("approve.all");
            });
            gingerModule.get("widget.correctionBubble").listen.on("unauthenticated.approve", function() {
                gingerModule.get("gingerchromeext.content.inlineAuth").open({
                    trigger: "WordBubble"
                });
            });
            gingerModule.get("widget.correctionBubble").listen.on("unauthenticated.approve.all", function() {
                gingerModule.get("gingerchromeext.content.inlineAuth").open({
                    trigger: "WordBubble"
                });
            });
            gingerModule.get("widget.correctionBubble").listen.on("unauthenticated.addToDictionary", function() {
                gingerModule.get("gingerchromeext.content.inlineAuth").open({
                    trigger: "WordBubble"
                });
            });
            gingerModule.get("gingerchromeext.content.floatingG").listen.on("inlineAuth.open", function(e, t) {
                gingerModule.get("gingerchromeext.content.inlineAuth").open({
                    trigger: "FloatingGBackTo"
                });
            });
            gingerModule.get("gingerchromeext.content.floatingG").listen.on("writer.open", function(e, t) {
                gingerModule.get("gingerchromeext.content.writer").open(t);
            });
            gingerModule.get("gingerchromeext.content.floatingG").listen.on("writer.hide", function() {
                gingerModule.get("gingerchromeext.content.writer").hide();
            });
        } else {
            gingerModule.get("widget.licenseLimits").listen.on("triggered.approaching", function() {
                r({
                    cmd: "ginger.extension.licenseLimits",
                    type: "approaching"
                });
            });
            gingerModule.get("widget.licenseLimits").listen.on("triggered.exceeded", function() {
                r({
                    cmd: "ginger.extension.licenseLimits",
                    type: "exceeded"
                });
            });
            gingerModule.get("widget.licenseLimits").listen.on("triggered.onbubble", function() {
                r({
                    cmd: "ginger.extension.licenseLimits",
                    type: "onbubble"
                });
            });
            gingerModule.get("widget.correctionBubble").listen.on("limited.approve.all", function() {
                r({
                    cmd: "ginger.extension.licenseLimits",
                    type: "onbubble"
                });
            });
            gingerModule.get("widget.correctionBubble").listen.on("limited.approve", function() {
                r({
                    cmd: "ginger.extension.licenseLimits",
                    type: "onbubble"
                });
            });
            gingerModule.get("widget.correctionBubble").listen.on("approved.mistake", function() {
                r({
                    cmd: "ginger.extension.pollMessage"
                });
            });
            gingerModule.get("widget.correctionBubble").listen.on("approve.all", function() {
                r({
                    cmd: "ginger.extension.pollMessage"
                });
            });
            gingerModule.get("widget.correctionBubble").listen.on("unauthenticated.approve", function() {
                r({
                    cmd: "ginger.extension.inlineAuth.open",
                    params: {
                        trigger: "WordBubble"
                    }
                });
            });
            gingerModule.get("widget.correctionBubble").listen.on("unauthenticated.approve.all", function() {
                r({
                    cmd: "ginger.extension.inlineAuth.open",
                    params: {
                        trigger: "WordBubble"
                    }
                });
            });
            gingerModule.get("widget.correctionBubble").listen.on("unauthenticated.addToDictionary", function() {
                r({
                    cmd: "ginger.extension.inlineAuth.open",
                    params: {
                        trigger: "WordBubble"
                    }
                });
            });
            gingerModule.get("gingerchromeext.content.floatingG").listen.on("inlineAuth.open", function() {
                r({
                    cmd: "ginger.extension.inlineAuth.open",
                    params: {
                        trigger: "FloatingG"
                    }
                });
            });
            gingerModule.get("gingerchromeext.content.floatingG").listen.on("writer.open", function(e, t) {
                r({
                    cmd: "ginger.extension.writer.open",
                    data: {
                        value: t.value,
                        sendToWindow: true
                    }
                });
            });
            gingerModule.get("gingerchromeext.content.floatingG").listen.on("writer.hide", function() {
                r({
                    cmd: "ginger.extension.writer.hide"
                });
            });
        }
        gingerModule.get("widget.session").set(gingerModule.get("gingerchromeext.content.session").get());
        gingerModule.get("gingerchromeext.content.session").listen.on("change", function() {
            gingerModule.get("widget.session").set(gingerModule.get("gingerchromeext.content.session").get());
        });
        gingerModule.get("gingerchromeext.content.storage").get("dialect").then(function(e) {
            if (!e) {
                gingerModule.get("widget.config").set("dialect", "US");
                gingerModule.get("gingerchromeext.content.config").set("dialect", "US");
            } else {
                gingerModule.get("widget.config").set("dialect", e);
                gingerModule.get("gingerchromeext.content.config").set("dialect", e);
            }
        });
    };
    var o = function(e) {
        return e.replace(/^[^/]*\/\/(www\.)?/g, "").replace(/[:\/].*$/g, "");
    };
    var g = function(e) {
        if (!e) e = window.location.href;
        return n.indexOf(o(e)) !== -1;
    };
    var a = function() {
        t = window.top === window;
        var e = !gingerModule.get("widget.siteSettings").get(window.location.href).domainDisabled;
        if (window.frameElement && window.top !== window.self) {
            try {
                e = e && !gingerModule.get("widget.siteSettings").get(window.frameElement.ownerDocument.defaultView.location.href).disabled;
            } catch (e) {
                console.error(e);
            }
        }
        if (!e) return;
        gingerModule.get("gingerchromeext.content.storage").get("domainBlackList").then(function(e) {
            n = e || [];
            if (gingerModule.get("widget").isEnabled() && g()) {
                gingerModule.get("widget").disable();
            } else if (!gingerModule.get("widget").isEnabled() && !g()) {}
        });
        gingerModule.get("gingerchromeext.content.storage").listen.on("change", function(e, t) {
            if ("dialect" in t) {
                gingerModule.get("gingerchromeext.content.config").set("dialect", t["dialect"].newValue);
                gingerModule.get("widget.config").set("dialect", t["dialect"].newValue);
            } else if ("domainBlackList" in t) {
                n = t["domainBlackList"].newValue;
                if (gingerModule.get("widget").isEnabled() && g()) {
                    gingerModule.get("widget").disable();
                } else if (!gingerModule.get("widget").isEnabled() && !g()) {
                    gingerModule.get("widget").enable();
                }
            }
        });
        console.log("initing Widget in ", location.href, document);
        i();
        gingerModule.get("gingerchromeext.content.floatingG").init();
        gingerModule.get("gingerchromeext.content.addToPdPopup");
    };
    if (document.body && !document.getElementById("webkit-xml-viewer-source-xml")) {
        gingerModule.get("gingerchromeext.content.config").loaded.then(function() {
            gingerModule.get("gingerchromeext.content.session").loaded.then(function() {
                if (gingerModule.get("gingerchromeext.content.config").get("env") === "production") {
                    Raven.config("https://124ddc57eb2740cc985d1e128a3ac476@sentry.io/128330", {
                        release: "@@gitRevision"
                    }).install();
                    Raven.context(function() {
                        a();
                    });
                } else {
                    a();
                }
            });
        });
    }
}, [ "gingerchromeext.content.config", "gingerchromeext.content.backgroundConnector", "widget.licenseLimits", "gingerchromeext.content.storage", "gingerchromeext.content.marketingPopups", "gingerchromeext.content.onboardingBubbles", "widget.report" ]);

(function() {
    var e = gingerModule.load("gingerchromeext.content.writer", function() {
        "use strict";
        var n = {};
        var r = $gingerWidgetJquery({});
        var e;
        var i;
        var o = false;
        var g = function() {
            n.main = document.body.appendChild(document.createElement("gdiv"));
            n.main.style.display = "none";
            n.main.className = "ginger-extension-writer";
            n.main.addEventListener("click", function() {
                if (!/\/ginger-writer/.test(location.href)) c();
            });
            n.frame = n.main.appendChild(document.createElement("gdiv"));
            n.frame.className = "ginger-extension-writer-frame";
            n.iframe = n.frame.appendChild(document.createElement("iframe"));
            n.iframe.src = gingerModule.get("gingerchromeext.browser").runtime.getURL("writer/index.html");
            return n;
        };
        var a = function(t) {
            if (!n.main || !n.main.parentNode) g();
            gingerModule.get("gingerchromeext.content.report").reporter({
                type: "OpenFloatingG"
            });
            if (/\/ginger-writer/.test(location.href)) {
                $gingerWidgetJquery(n.main).show();
                return;
            }
            gingerModule.get("gingerchromeext.content.session").isLoggedIn().then(function e() {
                if (t && t.cmd) {
                    if (o) {
                        l(t);
                    } else {
                        r.one("writer.loaded", function() {
                            l(t);
                        });
                    }
                }
                $gingerWidgetJquery(n.main).fadeIn();
            }, function e() {
                gingerModule.get("gingerchromeext.content.inlineAuth").open({
                    trigger: t && t.trigger ? t.trigger : "FloatingG"
                }).then(function() {
                    a(t);
                }, function() {});
            });
        };
        var c = function() {
            if (e) $gingerWidgetJquery(e.element).focus();
            $gingerWidgetJquery(n.main).hide();
            e = null;
            i = null;
        };
        var l = function(e) {
            var t = n.iframe;
            t.contentWindow.postMessage(e, "*");
        };
        var t = function() {
            window.addEventListener("message", function(t) {
                var n = {};
                try {
                    n = JSON.parse(t.data);
                } catch (e) {
                    n = t.data;
                }
                if (!n) return;
                if (n.cmd === "ginger.extension.returnText") {
                    gingerModule.get("widget.api").restoreCorrectionCache(n.cache);
                    gingerModule.get("widget.correctionService").setIgnoredWords(n.ignoredWords);
                    if (i) {
                        i.postMessage(n, "*");
                    } else {
                        e = gingerModule.get("gingerchromeext.content.floatingG").getActiveElement();
                        if (e) {
                            e.element.focus();
                            e.setVal(n.text);
                        }
                    }
                    c();
                } else if (n.cmd === "ginger.extension.writer.open") {
                    i = null;
                    if (n.data.sendToWindow) {
                        i = t.source;
                    }
                    a(n.data);
                } else if (n.cmd === "ginger.extension.writer.hide") {
                    c();
                } else if (n.cmd === "ginger.extension.writer.loaded") {
                    o = true;
                    r.trigger("writer.loaded");
                }
            });
        };
        var d = function() {
            if (window.self === window.parent) {
                g();
            }
            gingerModule.get("gingerchromeext.content.inlineAuth").listen.on("auth.cancelled", function() {
                l({
                    cmd: "ginger.inlineAuth.cancelled"
                });
            });
            t();
        };
        $gingerWidgetJquery(d);
        return {
            open: a,
            hide: c,
            listen: r
        };
    }, [ "gingerchromeext.content.report", "gingerchromeext.content.session", "widget.api", "widget.correctionService", "gingerchromeext.content.inlineAuth" ]);
})();

gingerModule.get("gingerchromeext.content.config").loaded.then(function() {
    gingerModule.get("gingerchromeext.content.session").loaded.then(function() {
        gingerModule.get("gingerchromeext.content.init");
    });
});
//# sourceMappingURL=content.min.js.map