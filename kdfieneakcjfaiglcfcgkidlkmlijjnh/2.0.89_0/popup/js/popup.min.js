/*
Code architecture and implementation by kristof.mihaly@nomo.hu
For Ginger Software Ltd.
Ginger Grammar Checker Chrome Extension
*/

if (!gingerModule) {
    var gingerModule = function(e, n) {
        var a = {};
        var r = null;
        var o = function(e) {
            return a[e] && a[e].isInited;
        };
        var t = function(e) {
            if (!e) return true;
            var n = true;
            for (var r = 0; r < e.length; r++) {
                if (!o(e[r])) {
                    n = false;
                }
            }
            return n;
        };
        var i = function(e) {
            var n = a[e];
            n.module = n.classCache();
            n.isInited = true;
        };
        var u = function(e) {
            var n = a[e];
            if (t(n.deps)) {
                i(e);
                return true;
            } else {
                return false;
            }
        };
        var c = function(e, n, r) {
            if (a[e]) {
                if (console && console.log) console.log("Module already loaded: " + e, "...overwriting module");
            }
            a[e] = {
                classCache: n,
                isInited: false,
                deps: r
            };
            var o = true;
            while (o) {
                o = false;
                for (var t in a) {
                    if (!a[t].isInited) {
                        var i = u(t);
                        if (!o) {
                            o = i;
                        }
                    }
                }
            }
            return a[e];
        };
        var l = function(e, n) {
            if (typeof a[e] === "undefined") {
                throw "Module '" + e + "' is not loaded. Check dependency in the end of your module definition.";
            }
            if (n) return a[e].classCache; else return a[e].module;
        };
        var s = function() {
            for (var e in a) {
                a[e] = a[e]();
            }
        };
        var g = function(e) {
            if (!a[e]) {
                console.log(e, "not added to project or has not been loaded");
                return false;
            } else if (!a[e].isInited) {
                console.log("module ", e, "not loaded, because");
                var n = a[e].deps;
                if (n.length) {
                    var r = true;
                    for (var o = 0; o < n.length; o++) {
                        var t = n[o];
                        r = r && g(t);
                    }
                    return r;
                } else {
                    return true;
                }
            } else {
                return true;
            }
        };
        return {
            load: c,
            get: l,
            debug: g
        };
    }();
}

Raven.config("https://124ddc57eb2740cc985d1e128a3ac476@sentry.io/128330", {
    release: "@@gitRevision"
}).addPlugin(Raven.Plugins.Angular).install();

(function(e) {
    e.module("gingerchromeext.popup", [ "ui.router", "ngRaven", "gingerchromeext.popup.config", "gingerchromeext.popup.home", "gingerchromeext.popup.siteBlackList", "gingerchromeext.popup.switch", "gingerchromeext.popup.auth", "gingerchromeext.popup.login", "gingerchromeext.popup.storage", "gingerchromeext.popup.notsupported", "gingerchromeext.popup.favicon", "gingerchromeext.popup.report", "gingerchromeext.popup.backgroundConnector", "gingerchromeext.popup.banner", "gingerchromeext.popup.external" ]).config([ "$httpProvider", function(e) {
        e.defaults.withCredentials = true;
    } ]).config([ "$locationProvider", "$stateProvider", "$httpProvider", "$urlRouterProvider", "$urlMatcherFactoryProvider", function(e, n, r, o, t) {
        e.hashPrefix("!");
        n.state("external", {
            url: "/external",
            controller: "externalController"
        }).state("external.login", {
            url: "^/login",
            templateUrl: "partials/login.partial.html",
            controller: "loginController"
        }).state("supported", {
            url: "/supported",
            abstract: true,
            resolve: {
                favicon: [ "faviconFactory", function(e) {
                    return e.retrieveCurrentFaviconUrl();
                } ],
                shouldBeSupported: [ "siteBlackListFactory", "configFactory", "$q", "$state", function(e, n, r, o) {
                    var t = r.defer();
                    e.getCurrentHost().then(function(e) {
                        var n = gingerModule.get("gingerchromeext.browser").extension.getBackgroundPage();
                        if (!n.gingerModule.get("gingerchromeext.background.nonSupportedSites").isUrlEnabled(e)) {
                            o.go("notsupported");
                            t.reject();
                        } else {
                            t.resolve();
                        }
                    });
                    return r.promise;
                } ]
            }
        }).state("supported.home", {
            url: "/home",
            templateUrl: "partials/home.partial.html",
            controller: "homeController"
        }).state("notsupported", {
            url: "/notsupported",
            templateUrl: "partials/notsupported.partial.html",
            controller: "notsupportedController",
            resolve: {
                favicon: [ "faviconFactory", function(e) {
                    return e.retrieveCurrentFaviconUrl();
                } ],
                shouldBeSupported: [ "siteBlackListFactory", "configFactory", "$q", "$state", function(e, n, r, o) {
                    var t = r.defer();
                    e.getCurrentHost().then(function(e) {
                        var n = gingerModule.get("gingerchromeext.browser").extension.getBackgroundPage();
                        if (!n.gingerModule.get("gingerchromeext.background.nonSupportedSites").isUrlEnabled(e)) {
                            t.resolve();
                        } else {
                            o.go("supported.home");
                            t.reject();
                        }
                    });
                    return r.promise;
                } ]
            }
        });
        o.otherwise("/external");
    } ]);
})(window.angular);

angular.module("gingerchromeext.popup.backgroundConnector", []);

angular.module("gingerchromeext.popup.banner", []);

angular.module("gingerchromeext.popup.external", []);

angular.module("gingerchromeext.popup.favicon", []);

angular.module("gingerchromeext.popup.home", []);

angular.module("gingerchromeext.popup.login", []);

angular.module("gingerchromeext.popup.notsupported", []);

angular.module("gingerchromeext.popup.report", []);

angular.module("gingerchromeext.popup.auth", []);

angular.module("gingerchromeext.popup.siteBlackList", []);

angular.module("gingerchromeext.popup.storage", []);

angular.module("gingerchromeext.popup.switch", []);

gingerModule.load("gingerchromeext.browser", function() {
    return window.chrome;
});

(function(e) {
    e.module("gingerchromeext.popup.backgroundConnector").factory("backgroundConnectorFactory", [ "$q", function(r) {
        var o = function(e, n) {
            try {
                gingerModule.get("gingerchromeext.browser").runtime.sendMessage(e, function(e) {
                    if (n) n(e);
                });
            } catch (e) {
                console.log(e);
            }
        };
        var t = function(e) {
            var n = r.defer();
            e.promise = true;
            o(e, function(e) {
                if (e.rejected) {
                    n.reject(e.result);
                } else {
                    n.resolve(e.result);
                }
            });
            return n.promise;
        };
        var e = function(r) {
            var e = function(e, n) {
                r.callArgs = e;
                if (r.promise) {
                    return t(r);
                } else {
                    return o(r, n);
                }
            };
            return e;
        };
        return {
            call: o,
            callPromise: t,
            proxy: e
        };
    } ]);
})(window.angular);

angular.module("gingerchromeext.popup.banner").directive("gingerBanner", [ "gingerBannerService", "$sce", "$timeout", function(o, t, i) {
    function e(n, e, r) {
        n.banner = {};
        o.getBanner(n.placement).then(function(e) {
            e.url = t.trustAsResourceUrl(e.url);
            i(function() {
                n.banner = e;
            });
        }, function() {});
    }
    return {
        link: e,
        scope: {
            placement: "@gingerBanner"
        },
        template: '<iframe class="ginger-banner-frame" style="width:{{banner.width}}px;height:{{banner.height}}px;" ng-src="{{banner.url}}"></iframe>'
    };
} ]);

angular.module("gingerchromeext.popup.banner").factory("gingerBannerService", [ "backgroundConnectorFactory", "$q", "$rootScope", function(r, o, e) {
    var t = e.$new(true);
    var n = function(e) {
        var n = o.defer();
        r.proxy({
            module: "gingerchromeext.background.banners",
            callFunction: "getBanner",
            promise: true
        })(e).then(function(e) {
            if (e && e.url) {
                t.$emit("banner.received");
                n.resolve(e);
            } else {
                n.reject(e);
            }
        }, function(e) {
            n.reject(e);
        });
        return n.promise;
    };
    return {
        listen: t,
        getBanner: n
    };
} ]);

angular.module("gingerchromeext.popup.config", []).factory("configFactory", [ "$rootScope", function(e) {
    return gingerModule.get("gingerchromeext.browser").extension.getBackgroundPage().gingerModule.get("gingerchromeext.background.config");
} ]);

(function(e) {
    e.module("gingerchromeext.popup.external").controller("externalController", [ "$scope", "siteBlackListFactory", "faviconFactory", "sessionFactory", "configFactory", "$state", "$timeout", function(e, n, r, o, t, i, a) {
        e.config = t.get();
        var u = function() {
            o.isLoggedIn().then(function e() {
                console.log("isLoggedIn");
                i.go("supported.home");
            }, function e() {
                console.log("isNotLoggedIn");
                i.go("external.login");
            });
        };
        u();
        o.listen.$on("login", function() {
            a(function() {
                console.log("login");
                i.go("supported.home");
            });
        });
        o.listen.$on("logout", function() {
            a(function() {
                console.log("logout");
                i.go("external.login");
            });
        });
    } ]);
})(window.angular);

(function(e) {
    e.module("gingerchromeext.popup.favicon").factory("faviconFactory", [ "$q", "$sce", function(e, r) {
        var o = null;
        var n = function() {
            return o;
        };
        var t = function() {
            var n = e.defer();
            try {
                gingerModule.get("gingerchromeext.browser").tabs.query({
                    active: true,
                    currentWindow: true
                }, function(e) {
                    if (e[0].favIconUrl && e[0].favIconUrl.match(/^https?/i)) {
                        o = r.trustAsResourceUrl(e[0].favIconUrl);
                    } else {
                        o = null;
                    }
                    n.resolve(o);
                });
            } catch (e) {
                console.error("Failed to retrieve favicon for active tab", e);
            }
            return n.promise;
        };
        return {
            getFaviconUrl: n,
            retrieveCurrentFaviconUrl: t
        };
    } ]);
})(window.angular);

(function(p) {
    p.module("gingerchromeext.popup.home").controller("homeController", [ "sessionFactory", "configFactory", "$scope", "$state", "$timeout", "faviconFactory", "storageFactory", "siteBlackListFactory", "reportingFactory", "gingerBannerService", function(e, n, o, r, t, i, a, u, c, l) {
        o.main = {
            host: "localhost",
            blackList: [],
            isGingerEnabled: true,
            hasActiveCampaign: false,
            settings: {
                doubleClickEnabled: true,
                dialect: "UK"
            },
            ui: {
                userListOpen: false
            }
        };
        o.config = n.get();
        o.session = {};
        o.main.ui.logout = function() {
            e.set(null);
        };
        var s;
        o.main.ui.setUserListOpen = function(e) {
            if (s) t.cancel(s);
            if (p.isUndefined(e)) {
                o.main.ui.userListOpen = !o.main.ui.userListOpen;
            } else if (e === false) {
                s = t(function() {
                    o.main.ui.userListOpen = false;
                }, 600);
            } else {
                t.cancel(s);
                o.main.ui.userListOpen = true;
            }
        };
        var g = function() {
            e.refresh().then(function(e) {
                if (!e.name && e.email) {
                    e.name = e.email.split("@")[0];
                }
                o.session = e;
            });
            i.retrieveCurrentFaviconUrl().then(function(e) {
                o.main.faviconUrl = e;
            });
            l.listen.$on("banner.received", function() {
                t(function() {
                    o.main.hasActiveCampaign = true;
                });
            });
            a.get("dialect").then(function(e) {
                o.main.settings.dialect = e;
            });
            o.main.dialectChanged = function(e, n) {
                a.set("dialect", o.main.settings.dialect);
                c.reporter({
                    type: "SettingsModification",
                    Action: "English" + o.main.settings.dialect,
                    location: "ExtensionMenu",
                    SettingsType: "Dialect"
                });
            };
            a.get("enableDefinitions").then(function(e) {
                if (!e && e !== false) {
                    e = true;
                    a.set("enableDefinitions", true);
                }
                o.main.settings.enableDefinitions = e;
                o.$watch("main.settings.enableDefinitions", function(e, n) {
                    if (e == n) return;
                    var r = "Disable";
                    if (e) {
                        r = "Enable";
                    }
                    c.reporter({
                        type: "SettingsModification",
                        Action: r,
                        location: "ExtensionMenu",
                        SettingsType: "DefenitionPopup"
                    });
                    a.set("enableDefinitions", o.main.settings.enableDefinitions);
                });
            });
            u.getCurrentHost().then(function(e) {
                o.main.currentHost = e;
            });
            u.isCurrentHostBlackListed().then(function(e) {
                t(function() {
                    o.main.isGingerEnabled = !e;
                    o.$watch("main.isGingerEnabled", function(n, e) {
                        if (n == e) return;
                        try {
                            var r = "Disable";
                            if (n) {
                                r = "Enable";
                            }
                            c.reporter({
                                type: "EnableOrDisableGinger",
                                Action: r,
                                location: "ExtensionMenu"
                            });
                            c.reporter({
                                type: "SettingsModification",
                                Action: r,
                                location: "ExtensionMenu",
                                SettingsType: "CorrectionSettingsType"
                            });
                            gingerModule.get("gingerchromeext.browser").tabs.query({
                                active: true,
                                currentWindow: true
                            }, function(e) {
                                !n ? u.add(e[0].url) : u.remove(e[0].url);
                            });
                        } catch (e) {
                            console.error("chrome.tabs.query is not supported", e);
                        }
                    });
                });
            });
        };
        g();
        if (window.safari) {
            safari.application.addEventListener("popover", function(e) {
                r.reload();
            }, false);
        }
    } ]);
})(window.angular);

angular.module("gingerchromeext.popup.home").directive("ngError", function() {
    return {
        scope: {
            ngOnerror: "&"
        },
        link: function(e, n, r) {
            n.bind("error", function() {
                e.ngOnerror();
            });
        }
    };
    return fallbackSrc;
}).directive("mouseaway", function() {
    return {
        scope: {
            callback: "&mouseaway"
        },
        link: function(r, e, n) {
            var o = e[0];
            e.bind("mouseout", function(e) {
                var n = e.toElement;
                while (n) {
                    if (n === o) {
                        return;
                    }
                    n = n.parentNode;
                }
                r.$apply(function() {
                    r.callback(r, e);
                });
            });
        }
    };
});

(function(e) {
    e.module("gingerchromeext.popup.home").filter("capitalize", function() {
        return function(e) {
            return !!e ? e.charAt(0).toUpperCase() + e.substr(1).toLowerCase() : "";
        };
    });
})(window.angular);

(function(e) {
    e.module("gingerchromeext.popup.login").controller("loginController", [ "sessionFactory", "configFactory", "$sce", "$scope", "$window", function(e, n, r, o, t) {
        o.login = {};
        var i = [ "clientType=extension", "widgetUid=" + n.get("widgetUid"), "clientVersion=" + n.get("clientVersion"), "affId=" + n.get("affId"), "application=" + n.get("platform"), "origin=" + n.get("affId"), "platform=" + n.get("source"), "targetUrl=" + encodeURIComponent("/login-welcome"), "trigger=ExtensionMenu", "utm_medium=ExtensionMenu", "utm_source=button", "utm_campaign=signup_login" ];
        o.config = n.get();
        o.login.openAuthPage = function(e) {
            if (!e) e = "login";
            if (e === "login") {
                gingerModule.get("gingerchromeext.browser").tabs.create({
                    url: "https://www.gingersoftware.com/login?" + i.join("&"),
                    active: true
                });
            } else {
                gingerModule.get("gingerchromeext.browser").tabs.create({
                    url: "https://www.gingersoftware.com/login?view=signUp&" + i.join("&"),
                    active: true
                });
            }
            if (safari) {
                safari.self.hide();
            }
        };
    } ]);
})(window.angular);

(function(e) {
    e.module("gingerchromeext.popup.notsupported").controller("notsupportedController", [ "$scope", "$state", "configFactory", "faviconFactory", "siteBlackListFactory", "sessionFactory", "$timeout", function(r, n, e, o, t, i, a) {
        var u;
        r.config = e.get();
        r.notsupported = {};
        r.notsupported.nonSupportedSites = e.get("nonSupportedSites");
        r.notsupported.faviconUrl = o.getFaviconUrl();
        r.notsupported.ui = {};
        r.notsupported.ui.logout = function() {
            i.set(null);
        };
        t.getCurrentHost().then(function(e) {
            console.log("currentHost", e);
            var n = gingerModule.get("gingerchromeext.browser").extension.getBackgroundPage().gingerModule.get("gingerchromeext.background.nonSupportedSites").getNonSupportedItemByUrl(e);
            if (!n) return;
            r.notsupported.currentHost = e;
            r.notsupported.currentHostName = n.name;
        });
        i.refresh().then(function(e) {
            if (!e.name && e.email) {
                e.name = e.email.split("@")[0];
            }
            r.session = e;
        });
        r.notsupported.ui.setUserListOpen = function(e) {
            if (u) a.cancel(u);
            if (e === false) {
                u = a(function() {
                    r.notsupported.ui.userListOpen = false;
                }, 600);
            } else {
                r.notsupported.ui.userListOpen = true;
            }
        };
        if (window.safari) {
            safari.application.addEventListener("popover", function(e) {
                n.reload();
            }, false);
        }
    } ]);
})(window.angular);

(function(e) {
    e.module("gingerchromeext.popup.report").factory("reportingFactory", [ "backgroundConnectorFactory", "configFactory", function(e, n) {
        var r = e.proxy({
            module: "gingerchromeext.background.report",
            callFunction: "reporter"
        });
        if (n.get("platform") !== "safari") {
            r({
                type: "OpenExtensionMenu"
            });
        }
        return {
            reporter: r
        };
    } ]);
})(window.angular);

(function(e) {
    e.module("gingerchromeext.popup.auth").factory("sessionFactory", [ "backgroundConnectorFactory", "storageFactory", "reportingFactory", "$rootScope", "$timeout", "$window", function(e, n, r, o, t, i) {
        var a = o.$new(true);
        var u = function() {
            return session;
        };
        var c = e.proxy({
            module: "gingerchromeext.background.session",
            callFunction: "set",
            promise: true
        });
        var l = e.proxy({
            module: "gingerchromeext.background.session",
            callFunction: "isLoggedIn",
            promise: true
        });
        var s = e.proxy({
            module: "gingerchromeext.background.session",
            callFunction: "refresh",
            promise: true
        });
        var g = function() {
            e.call({
                module: "gingerchromeext.background.session",
                callFunction: "get"
            }, function(e) {
                session = e;
            });
            n.listen.$on("change", function(e, n) {
                if ("session" in n) {
                    var r = n.session.newValue;
                    if (r && r.token) {
                        session = r;
                        a.$emit("login", r);
                    } else {
                        session = null;
                        a.$emit("logout");
                    }
                    a.$emit("change");
                }
            });
        };
        var p = function() {};
        g();
        return {
            get: u,
            set: c,
            logout: p,
            isLoggedIn: l,
            refresh: s,
            listen: a
        };
    } ]);
})(window.angular);

(function(e) {
    e.module("gingerchromeext.popup.siteBlackList").factory("siteBlackListFactory", [ "storageFactory", "$q", function(o, e) {
        var t = [];
        var i = function(e) {
            return e.replace(/^[^/]*\/\/(www\.)?/g, "").replace(/[:\/].*$/g, "");
        };
        var a = function(e) {
            if (!t) return -1;
            return t.indexOf(e);
        };
        var r = function(e) {
            if (a(e) === -1) {
                return false;
            } else {
                return true;
            }
        };
        var n = function(e) {
            var n = i(e);
            if (!r(n)) {
                t.push(n);
                o.set("domainBlackList", t);
            }
        };
        var u = function(e) {
            var n = i(e);
            n = n.split(":")[0];
            var r = a(n);
            if (r !== -1) {
                t.splice(r, 1);
                o.set("domainBlackList", t);
            }
        };
        var c = function() {
            o.get("domainBlackList").then(function(e) {
                if (!e) {
                    e = [];
                }
                t = e;
            });
        };
        var l = function() {
            var n = e.defer();
            try {
                gingerModule.get("gingerchromeext.browser").tabs.query({
                    active: true,
                    currentWindow: true
                }, function(e) {
                    n.resolve(i(e[0].url));
                });
            } catch (e) {
                n.resolve(i(location.href));
            }
            return n.promise;
        };
        var s = function() {
            var n = e.defer();
            l().then(function(e) {
                console.log("CH", e);
                if (r(e)) {
                    console.log("isBlackListed(host)", r(e));
                    n.resolve(true);
                } else {
                    console.log("isBlackListed(host)", r(e));
                    n.resolve(false);
                }
            });
            return n.promise;
        };
        c();
        return {
            add: n,
            remove: u,
            getCurrentHost: l,
            isCurrentHostBlackListed: s
        };
    } ]);
})(window.angular);

(function(e) {
    e.module("gingerchromeext.popup.storage").factory("storageFactory", [ "$q", "$rootScope", function(t, e) {
        var r = e.$new(true);
        var n = function(e, n) {
            if (!e) return;
            var r = t.defer();
            var o = {};
            o[e] = n;
            if (e === "domainBlackList") {}
            gingerModule.get("gingerchromeext.browser").storage.sync.set(o, function() {
                r.resolve();
            });
            return r.promise;
        };
        var o = function(n) {
            var r = t.defer();
            gingerModule.get("gingerchromeext.browser").storage.sync.get(n, function(e) {
                r.resolve(e[n]);
            });
            return r.promise;
        };
        var i = function() {
            gingerModule.get("gingerchromeext.browser").storage.onChanged.addListener(function(e, n) {
                r.$emit("change", e);
            });
        };
        i();
        return {
            get: o,
            set: n,
            listen: r
        };
    } ]);
})(window.angular);

angular.module("gingerchromeext.popup.switch").directive("gingerSwitch", function() {
    function e(e, n, r) {
        e.value = false;
        e.toggle = function() {
            e.value = !e.value;
        };
    }
    return {
        link: e,
        scope: {
            value: "=ngValue"
        },
        template: '<span ng-class="{active:value}" ng-click="toggle()" class="form-control-switch"><span class="form-control-switch-label">{{value?"ON":"OFF"}} </span> <span class="form-control-switch-knob"></span></span>'
    };
});
//# sourceMappingURL=popup.min.js.map