var BsGlobal={state:{fileChosen:false,localServerFlag:0,chooserWindowOpen:false,localServerPort:45692,lastPingSentTime:null,lastReceivedPong:null,forceProxy:false,numberOfReconnects:0,setUpProxy:false,hostOnly:false,versionShown:false,numberOfProxyPortRetry:0},config_file_path:"bs_local.json",runningBinaryParentId:null,config_file_enabled:false,browserName:"",browserVersion:null,appVersion:null,installerVersion:null,pathSeparator:"/",pathToExecutable:"/tmp",nodeExecMode:null,osName:null,localInfoId:null,nativeWindow:null,httpServer:null,localFolderPath:null,updateFailed:false,forksCount:0,userSpecifiedForksCount:0,skipVersionUpdate:false,onlyAutomate:false,killOtherRunning:false,skipServerCheck:false,customRepeater:null,HEADER_SIZE:6,REF_SIZE:4,BITMASK:4294967296,PING_INTERVAL:1e4,RECONNECT_INTERVAL:3e3,CONNECT_TIMEOUT:1e4,MAX_RETRY_COUNT:10,CONSISTENT_VERSION:2,webSocketStates:{CONNECTING:0,OPEN:1,CLOSED:2},CODE_DATA:3,CODE_PING:2,CODE_END:4,CODE_CONTROL:6,CODE_PING_BACKUP:7,CODE_DONG:8,CODE_RECONNECT:9,CODE_FAILED:10,CODE_CLOSE:11,CODE_FORWARD_SPECIFIC_HOSTS:12,CODE_RESET_CONNECTION:13,CODE_SOCKET_SUMMARY:14,CODE_PONG:15,CODE_SOCKET_REF_INFO:16,SOCKS:{ADDRESS_IPV4:1,ADDRESS_NAME:3,ADDRESS_IPV6:4,AUTH_NONE:0,COMMAND_CONNECT:1,SOCKS_v4:4,SOCKS_v5:5,MIN_LENGTH:9,REQUEST_GRANTED:90,REQUEST_FAILED:91,CONNECTED:0,VERIFYING:1,READY:2,PROXY:3},MESSAGES:{UPDATING_BINARY:"Binary Being Updated",BINARY_UPDATED:"Binary Updated"},SSL_HEADER_LENGTH:5,HEXADECIMAL_BASE:16,MAX_PARSE_LENGTH:8192,HOST_HEADER_LENGTH:8,CRLF_LENGTH:2,LOGFILE_PATH_ERROR:"The path specified for logFile doesn't exist. Please specify a valid path.",LOGFILE_WRITE_ERROR:"The path specified for logFile doesn't have write permission. Please specify a path with write permission.",DEBUG_REQUEST_TIMEOUT:30*1e3,FIREFOX_APP_SHELL_PORT:"/tmp/bspipe.pipe",INSTALLER_UPDATE_SCRIPT_PATH_UNIX:"/tmp/bsupdate.sh",SOCKET_ERROR:{SERVER_CLOSED_SOCKET:{code:"SOCKET_END"},INACTIVITY:{code:"INACTIVITY"},CODE_CLOSE:{code:"CODE_CLOSE"},CONNECT_TO_SERVER_TIMEOUT:{code:"CONNECT_TO_SERVER_TIMEOUT"},NO_DATA_RECEIVED:{code:"NO_DATA_RECEIVED"},NO_DATA_WRITTEN:{code:"NO_DATA_WRITTEN"},TIMEOUT_CONNECTING:{code:"TIMEOUT_CONNECTING"},EXTENSION_WRITE_ERROR:{code:"EXTENSION_WRITE_ERROR"}},SSL_ALLOWED_PORTS:["443"]};var BsUtils={getLoggingTrace:function(customData){var json={time:(new Date).getTime(),timeZoneOffSetGMT:(new Date).getTimezoneOffset(),browserName:BsGlobal.browserName,browserVersion:BsGlobal.browserVersion,appVersion:BsGlobal.appVersion,runningBinaryParentId:BsGlobal.runningBinaryParentId,key:repeaterConfig.key,lastPingSentTime:BsGlobal.state.lastPingSentTime,lastReceivedPong:BsGlobal.state.lastReceivedPong};if(BsGlobal.browserName==="node"){var cmdLog=BsCommandLine.cmdLineArray.slice();var sensitive_data=["-proxyUser","-proxyPass","-localProxyUser","-localProxyPass","--proxy-user","--proxy-pass","--local-proxy-user","--local-proxy-pass"];for(var data_index in sensitive_data){var idx=cmdLog.indexOf(sensitive_data[data_index]);if(idx>-1&&cmdLog[idx+1]&&cmdLog[idx+1].length>0){cmdLog[idx+1]="hidden"}}json.cmdLineArgs=cmdLog.join(" ")}if(customData){for(var prop in customData){json[prop]=customData[prop]}}var cache=[];var data=JSON.stringify(json,function(key,value){if(typeof value==="object"&&value!==null){if(cache.indexOf(value)!==-1){return}cache.push(value)}return value});cache=null;return JSON.parse(data)},postLogsToZombie:function(data,type,kind,ual,callback){if(data&&data.scheduleLog){delete data.scheduleLog;var log={log:data,logtime:(new Date).getTime(),type:type,kind:kind,ual:ual};BsUtils.pushLogToZombieWithInterval.schedule(log);return}var loggerHostname=BsGlobal.clsLogUrl;if(!loggerHostname){loggerHostname="logs.browserstack.com/logit";BsUtils.pushToEDS(data,callback);return}if(typeof type==="undefined"){type="chrome_log"}var _trace=BsUtils.getLoggingTrace(data);var url=BsConnectionManager.xhrProtocol()+loggerHostname+"?user="+BsGlobal.userId+"&";if(data["error"]){url+="&error="+data["error"]}if(data["device"]){url+="&device="+data["device"]}url+="&user_browser="+BsGlobal.browserName;url+="&user_browser_version="+BsGlobal.browserVersion;url+="&user_os="+BsGlobal.osName;url+="&type="+type;url+="&app=local";url+="&app_timestamp="+encodeURIComponent((new Date).toISOString());if(typeof kind!=="undefined"){url+="&kind="+kind}if(typeof ual!=="undefined"&&ual===true){url+="&ual=true"}url+="&json_data="+encodeURIComponent(JSON.stringify(_trace));var xhr=new XMLHttpRequest;xhr.callback=callback;xhr.addEventListener("load",BsUtils.onXhrComplete,false);xhr.addEventListener("error",BsUtils.onXhrError,false);xhr.open("GET",url,true);xhr.send()},pushToEDS:function(data,callback){if(BsGlobal.browserName=="chrome"){return}var payload={};payload.data={};payload.event_type="web_events";payload.data.product="local";payload.data.event_name="binary_startup";var loggerHostname="eds.browserstack.com/send_event_internal";if(!loggerHostname){loggerHostname="logs.browserstack.com/logit";type="local_tracking"}data["localIPs"]=BsConnectionManager.getLocalIPAddresses();data["systemParams"]=BsConnectionManager.getSystemParams();var _trace=BsUtils.getLoggingTrace(data);payload.data.event_json=_trace;var url=BsConnectionManager.xhrProtocol()+loggerHostname;var xhr=new XMLHttpRequest;xhr.callback=callback;xhr.timeout=1e4;BsGlobal.reqTime=(new Date).getTime();xhr.addEventListener("load",BsUtils.onXhrComplete,false);xhr.addEventListener("error",BsUtils.onXhrError,false);xhr.open("POST",url,true);xhr.setRequestHeader("Content-type","text/json");xhr.send(JSON.stringify(payload))},onXhrComplete:function(evt){if(evt.target.callback){evt.target.callback()}var d=evt.currentTarget;if(d.status===404){if(console.debug)console.debug(evt)}},onXhrError:function(evt){if(evt.target.callback){evt.target.callback()}if(console.debug)console.debug("onXhrError")},arrayBufferToString:function(buffer){return BsUtils.uint8ArrayToString(new Uint8Array(buffer))},uint8ArrayToString:function(array){var str="";for(var s=0;s<array.length;++s){str+=String.fromCharCode(array[s])}return str},stringToUint8Array:function(string){var buffer=new ArrayBuffer(string.length);var view=new Uint8Array(buffer);for(var i=0;i<string.length;++i){view[i]=string.charCodeAt(i)}return view},bufferToArrayBuffer:function(buffer){var ab=new ArrayBuffer(buffer.length);var view=new Uint8Array(ab);for(var i=0;i<buffer.length;++i){view[i]=buffer[i]}return ab},setInterval:function(callback,interval){var enabled=true;var id=setTimeout(function _mycallback(){if(enabled){callback();id=setTimeout(_mycallback,interval)}},interval);return{clear:function(){enabled=false}}},retry_on_exception:function(func,timeout,tries,message){var toTry=0;var exceptionFlag=false;var id=BsUtils.setInterval(function(){toTry++;if(console.debug)console.debug(toTry);if(tries<toTry||toTry>1&&!exceptionFlag){BsUtils.clearInterval(id)}else{try{exceptionFlag=false;func()}catch(e){exceptionFlag=true;if(toTry===tries){BsUtils.clearInterval(id);BsUtils.postLogsToZombie({message:message})}}}},timeout)},clearInterval:function(id){if(id){id.clear()}},isWebsiteAllowed:function(website){return website.indexOf("browserstack.com")>0||website.indexOf("bsstag.com")>0},getOsName:function(platform){if(platform==="Win32"){return"win32"}if(platform==="MacIntel"){return"darwin"}if(platform.indexOf("Linux")>-1){return"linux"}return"unknown"},pushLogToZombieWithInterval:{intervalTime:60*1e3,queue:{},timerInstance:null,pushData:function(){for(var type in this.queue){for(var kind in this.queue[type]){var dataToBeSent=this.queue[type][kind];if(dataToBeSent==null||dataToBeSent==undefined||dataToBeSent.length==0){return}var zombieLog={data:dataToBeSent};this.queue[type][kind]=[];BsUtils.postLogsToZombie(zombieLog,type,kind)}}},start:function(){if(!this.timerInstance){this.timerInstance=setInterval(this.pushData.bind(this),this.intervalTime)}},stop:function(){clearInterval(this.timerInstance)},schedule:function(logData){!this.timerInstance&&this.start();var type=logData.type||"chrome_log";var kind=logData.kind||"log_session";if(!this.queue[type]){this.queue[type]={}}if(!this.queue[type][kind]){this.queue[type][kind]=[]}this.queue[type][kind].push({data:logData.log,logtime:logData.logtime})}},initLogFile:function(){BsUtils.createLogFileDateSpecific();BsUtils.initLogRotater()},initLogRotater:function(){var now=new Date;var night=new Date(now.getFullYear(),now.getMonth(),now.getDate()+1,0,0,0);var msToMidnight=night.getTime()-now.getTime();setTimeout(function(){BsUtils.createLogFileDateSpecific();BsUtils.initLogRotater()},msToMidnight)},createLogFileDateSpecific:function(){if(BsCommandLine.commandConfigs["verboseLogging"]||BsCommandLine.commandConfigs["debugLogging"]){var now=new Date;var todayUTC=(new Date).toJSON().slice(0,10).replace(/-/g,"-");var logfile_name="BrowserStackApp-"+todayUTC+".log";var basePath=process.platform==="win32"?"":"/tmp/";var log_file=fs.createWriteStream(basePath+logfile_name,{flags:"a"});console.verbose=function(data){if(BsCommandLine.commandConfigs["verboseLogging"]){log_file.write(util.format(data)+"\n")}};console.debug=function(data){if(BsCommandLine.commandConfigs["debugLogging"]){log_file.write(util.format(data)+"\n")}}}},sendResponseToAppInstaller:function(respObj){try{var messageObject={message:respObj.message,type:respObj.type};var PIPE_PATH="\\\\.\\pipe\\"+"BS_PIPE";if(process.platform==="win32"){var client=net.connect(PIPE_PATH,function(){client.write(JSON.stringify(messageObject));client.end()});client.on("data",function(data){});client.on("end",function(){});client.on("error",function(e){console.verbose(messageObject)})}else{var client=fs.createWriteStream(BsGlobal.FIREFOX_APP_SHELL_PORT);var isPipeDataRead=false;client.write(JSON.stringify(messageObject),function(){isPipeDataRead=true});client.close();setTimeout(function(){if(!isPipeDataRead){var fifo=fs.createReadStream(BsGlobal.FIREFOX_APP_SHELL_PORT);fifo.on("data",function(data){console.verbose(data)})}},5e3)}}catch(e){console.debug("Error While Establishing Connection to pipe !! : "+e.message)}}};console.verbose=function(){if(BsCommandLine.commandConfigs["verboseLogging"]){console.info.apply(null,arguments)}};console.debug=function(){if(BsCommandLine.commandConfigs["debugLogging"]){console.info.apply(null,["DEBUG:"].concat(Array.prototype.slice.call(arguments,0)))}};var BsTunnelMessenger={processRequest:function(request,sendResponse){if(!request||!request.type){return}switch(request.type){case"stopTurnTunnel":turnTunnel.stop();break;case"startTurnTunnel":turnTunnel.start(request,sendResponse);break;case"copyToClipboard":var text=request.text;clipboard.set(text);sendResponse(text);break;case"getClipboardData":var text=clipboard.get();sendResponse(text);break;case"installStatus":sendResponse({installed:true,version:BsGlobal.appVersion});break;case"connectionRequest":repeaterConfig.localHosts=[];for(var i=0;i<request.hosts.length;i++){repeaterConfig.localHosts[i]=[request.hosts[i],parseInt(request.ports[i],0),request.ssls[i]]}repeaterConfig.key=request.key;repeaterConfig.bsHost=request.bsHost;BsGlobal.state.localServerFlag=0;if(request.forceLocal==="false"){BsGlobal.state.forwardAllHosts=false}else{BsGlobal.state.forwardAllHosts=true;console.log("EXE: Forcing local.")}BsConnectionManager.setupSpecificHosts(request.forwardSpecificHosts);if(request.segmentSize){repeaterConfig.segmentSize=request.segmentSize}BsConnectionManager.getPortFromRails(function(){if(BsConnectionManager.isConnected()){sendResponse({connectedStatus:"yes",tunnelType:BsGlobal.state.localServerFlag==1?"static":"server",version:BsGlobal.appVersion})}else{sendResponse({connectedStatus:"no",version:BsGlobal.appVersion})}});break;case"connectionStatus":if(BsConnectionManager.isConnected()){sendResponse({connectedStatus:"yes",tunnelType:BsGlobal.state.localServerFlag==1?"static":"server",chosenFile:BsGlobal.localFolderPath,version:BsGlobal.appVersion})}else{sendResponse({connectedStatus:"no",version:BsGlobal.appVersion})}break;case"checkLocalServer":if(request.host&&request.port){var sock=new ConnectionSocket({host:request.host,port:parseInt(request.port,0)});sock.connect(function(connected){sock.close();sendResponse({running:connected?"yes":"no",version:BsGlobal.appVersion})});if(typeof sock.timeout==="function"){sock.timeout(BsGlobal.CONNECT_TIMEOUT,function(){sendResponse({running:"no",version:BsGlobal.appVersion})})}}else{sendResponse({running:"no",version:BsGlobal.appVersion})}break;case"disconnect":BsConnectionManager.disconnectTunnel();sendResponse({connectedStatus:"no",version:BsGlobal.appVersion});break;case"openDirectory":BsFileSystem.openDirectory(function(path){if(path){BsGlobal.state.fileChosen=true;BsGlobal.localFolderPath=path;sendResponse({chosenFile:path,version:BsGlobal.appVersion})}else{BsGlobal.state.fileChosen=false;BsGlobal.localFolderPath=null;sendResponse({chosenFile:false,version:BsGlobal.appVersion})}});break;case"getChosenDirectory":if(BsGlobal.state.fileChosen){sendResponse({chosenFile:BsGlobal.localFolderPath,version:BsGlobal.appVersion})}else{sendResponse({chosenFile:false,version:BsGlobal.appVersion})}break;case"startHttpServer":BsFileSystem.getDirectoryEntry(function(docRoot){if(BsGlobal.httpServer){BsGlobal.httpServer.stop()}BsGlobal.httpServer=new BrowserStackHttpServer("127.0.0.1",BsGlobal.state.localServerPort);BsGlobal.httpServer.findNextOpenPort(BsGlobal.state.localServerPort,function(port){BsGlobal.state.localServerPort=port;BsGlobal.httpServer.setServerPort(port);BsGlobal.httpServer.start(docRoot,function(){repeaterConfig.localHosts=[];repeaterConfig.localHosts[0]=["127.0.0.1",BsGlobal.state.localServerPort.toString(),0];BsGlobal.state.localServerFlag=1;if(request.forceLocal==="false"){BsGlobal.state.forwardAllHosts=false}else{BsGlobal.state.forwardAllHosts=true;console.log("EXE: Forcing local.")}BsConnectionManager.setupSpecificHosts(request.forwardSpecificHosts);repeaterConfig.key=request.key;repeaterConfig.bsHost=request.bsHost;repeaterConfig.wsPort=request.wsPort;repeaterConfig.wssPort=request.wssPort;BsConnectionManager.getPortFromRails(function(){if(BsConnectionManager.isConnected()){sendResponse({connectedStatus:"yes",tunnelType:"static",chosenFile:BsGlobal.localFolderPath,version:BsGlobal.appVersion})}else{sendResponse({connectedStatus:"no",version:BsGlobal.appVersion})}BsUtils.postLogsToZombie({httpServerConnectionStatus:"Started",version:BsGlobal.appVersion})})})})});break;case"stopHttpServer":if(BsGlobal.httpServer){BsGlobal.httpServer.stop();BsGlobal.httpServer=null;BsUtils.postLogsToZombie({httpServerConnectionStatus:"Stopped"})}break;case"openIntegrationsAPI":BsTabManager.openIntegrationsApi(request);break;case"openPage":BsTabManager.openExtensionURL(request.data,request.ga_params);break;case"bustUICache":ui.reloadPanel();break;case"refreshCookies":bsUICookies.refreshCookies();break;case"toggleWebcomponents":if(BsGlobal.browserName=="firefox"){var webComponentsPref="dom.webcomponents.enabled";if(SdkPreferences&&SdkPreferences.has(webComponentsPref))SdkPreferences.set(webComponentsPref,request.enable)}sendResponse({installed:true,version:BsGlobal.appVersion});break;default:console.log("Unknown request type");break}}};var XhrBufferedOutputStream=function(_url){var url=_url;var outputBuffer=[];var busy=false;var closeRequested=false;var closeCallback=null;var onXhrLoad=function(){busy=false;transmit()};var onXhrError=function(){console.verbose("EXT: Error communicating over XHR.");var onerror=this.onerror;if(onerror){onerror()}};var transmit=function(){if(busy){return}busy=true;var data=outputBuffer.shift();if(!data){if(closeRequested&&closeCallback){closeCallback()}else{busy=false}return}var xhr=new XMLHttpRequest;xhr.addEventListener("load",onXhrLoad,false);xhr.addEventListener("error",onXhrError.bind(this),false);xhr.addEventListener("abort",onXhrError.bind(this),false);xhr.open("POST",url);xhr.send(new Uint8Array(data))}.bind(this);this.onerror=null;this.write=function(data){outputBuffer.push(data);transmit()};this.close=function(callback){closeRequested=true;if(callback){closeCallback=callback}}};var XhrWebSocket=function(_url){this.onopen=null;this.onmessage=null;this.onclose=null;this.onerror=null;this.binaryType="arraybuffer";var url=_url;var dataUrl=null;var controlEventSource=null;var dataOutputStreams={};var pingOutputStream=null;this.outputStreams=dataOutputStreams;var onControlOpen=function(e){var onopen=this.onopen;if(onopen){onopen()}}.bind(this);var onControlMessage=function(e){var onmessage=this.onmessage;if(onmessage){var dataBuffer=null;if(BsGlobal.browserName==="node"){dataBuffer=new Buffer(e.data,"base64")}else{dataBuffer=BsUtils.stringToUint8Array(BsGlobal.nativeWindow.atob(e.data)).buffer}onmessage({data:dataBuffer})}}.bind(this);var onControlError=function(e){var onerror=this.onerror;if(onerror){onerror(e&&e.message?e:{message:"SSE Error"})}var onclose=this.onclose;if(onclose){onclose()}}.bind(this);var init=function(){var urlSplit=url.split("/");urlSplit.pop();urlSplit.pop();dataUrl=urlSplit.join("/");controlEventSource=new BsGlobal.nativeWindow.EventSource(url);controlEventSource.onopen=onControlOpen;controlEventSource.onmessage=onControlMessage;controlEventSource.onerror=onControlError;pingOutputStream=new XhrBufferedOutputStream(dataUrl);pingOutputStream.onerror=function(){onControlError({message:"HTTP POST Failed."})}.bind(this)}.bind(this);this.readyState=function(){return controlEventSource.readyState};this.send=function(data){var dataView=new DataView(data);var first=dataView.getUint32(0,false);var ref=first&~BsGlobal.BITMASK;if(ref==1){pingOutputStream.write(data);return}var code=dataView.getUint16(BsGlobal.REF_SIZE);if(!dataOutputStreams[ref]){dataOutputStreams[ref]=new XhrBufferedOutputStream(dataUrl)}dataOutputStreams[ref].write(data);if(code==BsGlobal.CODE_END){dataOutputStreams[ref].close(function(){delete dataOutputStreams[ref]})}};this.close=function(){controlEventSource.close();controlEventSource.onopen=null;controlEventSource.onmessage=null;controlEventSource.onerror=null;pingOutputStream.onerror=null;pingOutputStream.close()};init()};var BsRepeaterConnection=function(addr,backupRepeater){var repeaterSocket=null;var reconnector=null;var reconnectFlag=true;var errorFlag=false;var protocolId=repeaterConfig.protocolId;var protocol=repeaterConfig.protocolSequence[protocolId];var retryCount=0;var connectionHeathTime=(new Date).getTime();var pinger=null;var repeaterAddress=addr;var backupRepeater=backupRepeater;this.errorDetails=[];var createUrl=function(isReconnect){var repeaterPort=repeaterConfig.webSocketPorts[protocol];var uriPrefix="/"+protocol+"/";return protocol+"://"+repeaterAddress+":"+repeaterPort+uriPrefix+repeaterConfig.key+"/"+BsGlobal.appVersion+"/"+BsGlobal.browserVersion+"/"+BsGlobal.userId+"?reconnect="+isReconnect};var newRepeaterSocket=function(url){if(protocol==="wss"||protocol==="ws"){return new BsGlobal.nativeWindow.WebSocket(url)}else{return new XhrWebSocket(url)}};var getSocketState=function(){if(!repeaterSocket){return-1}if(typeof repeaterSocket.readyState==="function"){return repeaterSocket.readyState()}else{return repeaterSocket.readyState}};var cleanUp=function(callback){if(repeaterSocket){repeaterSocket.onopen=null;repeaterSocket.onmessage=null;repeaterSocket.onerror=null;repeaterSocket.onclose=null;repeaterSocket.close();var id=BsUtils.setInterval(function(){var state=getSocketState();if((repeaterConfig.repeaterProtocol==="wss"||repeaterConfig.repeaterProtocol==="ws")&&state==3||state==BsGlobal.webSocketStates.CLOSED){BsUtils.clearInterval(id);repeaterSocket=null;if(callback){callback()}}},100)}};var reconnect=function(){var self=this;if(reconnector||!reconnectFlag){return}reconnector=BsUtils.setInterval(function(){var readyState=getSocketState();if(readyState==BsGlobal.webSocketStates.OPEN){BsUtils.clearInterval(reconnector);retryCount=0;this.errorDetails=[];reconnector=null;return}if(readyState==BsGlobal.webSocketStates.CONNECTING){return}if(!reconnectFlag){return}if(retryCount>=BsGlobal.MAX_RETRY_COUNT){BsUtils.clearInterval(reconnector);reconnector=null;var onfailure=this.onfailure;if(onfailure){onfailure();return}}var onreconnect=this.onreconnect;if(onreconnect){onreconnect()}retryCount+=1;cleanUp(function(){self.connect(retryCount)})}.bind(this),BsGlobal.RECONNECT_INTERVAL)}.bind(this);var writePacket=function(ref,code,bytes){var dataBuffer;if(BsGlobal.browserName==="node"){dataBuffer=new Buffer(BsGlobal.HEADER_SIZE+(bytes?bytes.length:0));dataBuffer.writeUInt32BE(BsGlobal.BITMASK|ref,0);dataBuffer.writeUInt16BE(code,4);if(bytes){if(bytes instanceof Buffer){bytes.copy(dataBuffer,BsGlobal.HEADER_SIZE)}else{new Buffer(bytes.buffer).copy(dataBuffer,BsGlobal.HEADER_SIZE)}}}else{var bufferSize=BsGlobal.HEADER_SIZE;if(bytes){bufferSize+=bytes.length}dataBuffer=new ArrayBuffer(bufferSize);var dataView=new DataView(dataBuffer);dataView.setInt32(0,BsGlobal.BITMASK|ref,false);dataView.setInt16(BsGlobal.REF_SIZE,code,false);if(bytes){var dataBytes=new Uint8Array(dataBuffer);for(var i=0;i<bytes.length;i++){dataBytes[i+BsGlobal.HEADER_SIZE]=bytes[i]}}}if(this.isAlive()){try{repeaterSocket.send(dataBuffer)}catch(err){var onerror=this.onerror;if(onerror){var reason;if(ref==1){reason="ping"}else{reason="write"}onerror({reason:reason,error:err})}}}}.bind(this);this.onopen=null;this.onmessage=null;this.onreconnect=null;this.onerror=null;this.onfailure=null;this.isReconnect=false;this.connectionInitiationTimestamp=new Date;this.connect=function(exitingRetryCount){if(typeof exitingRetryCount=="undefined"){exitingRetryCount=0}repeaterConfig.repeaterProtocol=protocol;repeaterConfig.protocolId=protocolId;repeaterSocket=newRepeaterSocket(createUrl(this.isReconnect));repeaterSocket.binaryType="arraybuffer";var neverConnected=true;reconnectFlag=true;repeaterSocket.onopen=function(){this.isReconnect=true;BsConnectionManager.onRepeaterConnection();if(BsGlobal.state.forwardAllHosts){var hosts=BsUtils.stringToUint8Array("*.*");writePacket(0,BsGlobal.CODE_CONTROL,hosts)}else if(BsGlobal.state.hostOnly||repeaterConfig.forwardSpecificHosts){var hosts=[];if(BsGlobal.state.localServerFlag==1){hosts=[repeaterConfig.localFolderServer+":"+"80"]}else{for(var i=0;i<repeaterConfig.localHosts.length;i++){hosts[i]=[repeaterConfig.localHosts[i][0]+":"+repeaterConfig.localHosts[i][1]]}}if(BsGlobal.state.localServerFlag&&repeaterConfig.forwardSpecificHosts){for(var i=1;i<repeaterConfig.localHosts.length;i++){hosts[hosts.length]=[repeaterConfig.localHosts[i][0]+":"+repeaterConfig.localHosts[i][1]]}}hosts=BsUtils.stringToUint8Array(hosts.join(","));var codeToSend=repeaterConfig.forwardSpecificHosts?BsGlobal.CODE_FORWARD_SPECIFIC_HOSTS:BsGlobal.CODE_CONTROL;writePacket(0,codeToSend,hosts)}neverConnected=false;retryCount=exitingRetryCount;connectionHeathTime=(new Date).getTime();var onopen=this.onopen;if(onopen){onopen()}}.bind(this);repeaterSocket.onmessage=function(e){if(retryCount>1){retryCount=0;connectionHeathTime=(new Date).getTime()}var onmessage=this.onmessage;if(onmessage&&e){if(BsGlobal.browserName==="node"){onmessage(BsUtils.bufferToArrayBuffer(e.data))}else{onmessage(e.data)}}}.bind(this);repeaterSocket.onclose=function(){BsConnectionManager.onRepeaterDisconnection();console.verbose("Connection closed by remote host.");repeaterSocket.close();if(repeaterSocket.isProtocolResetFeasible()){protocolId=0;protocol=repeaterConfig.protocolSequence[protocolId]}reconnect()}.bind(this);repeaterSocket.isProtocolResetFeasible=function(){var minsPassed=((new Date).getTime()-connectionHeathTime)/(1e3*60);if(minsPassed<10||retryCount<3){return false}return true}.bind(this);repeaterSocket.onerror=function(err){if(neverConnected&&protocolId===repeaterConfig.protocolId){protocolId=(protocolId+1)%repeaterConfig.protocolSequence.length;protocol=repeaterConfig.protocolSequence[protocolId];console.verbose("Error in establishing connection.");if(err.code){console.debug(err.code)}else{console.debug(err)}var indexOfError=this.errorDetails.indexOf(err.message);if(indexOfError<0){this.errorDetails.push(err.message)}}else if(!neverConnected){console.verbose("Connection got severed.")}var onerror=this.onerror;if(onerror){onerror({reason:"connection",error:err.message})}repeaterSocket.close();reconnect()}.bind(this)};this.isAlive=function(){return getSocketState()==BsGlobal.webSocketStates.OPEN};this.forceReconnect=function(){var self=this;var onreconnect=this.onreconnect;if(onreconnect){onreconnect()}reconnectFlag=false;BsUtils.clearInterval(reconnector);reconnector=null;cleanUp(function(){self.connect()})};this.discardReconnect=function(){var self=this;this.onreconnect=null;reconnectFlag=false;BsUtils.clearInterval(reconnector);reconnector=null;if(repeaterSocket){repeaterSocket.onerror=null;repeaterSocket.onclose=null}};this.write=function(ref,code,bytes){if(code!=BsGlobal.CODE_DATA||repeaterConfig.segmentSize===0){if(code==BsGlobal.CODE_PING&&backupRepeater){writePacket(ref,BsGlobal.CODE_PING_BACKUP,bytes)}else{if((code==BsGlobal.CODE_SOCKET_SUMMARY||code==BsGlobal.CODE_SOCKET_REF_INFO)&&typeof bytes==="string"){if(BsGlobal.browserName==="node"){bytes=new Buffer(bytes)}else{bytes=BsUtils.stringToUint8Array(bytes)}}writePacket(ref,code,bytes)}return}while(bytes.length>0){if(bytes.length<=repeaterConfig.segmentSize){writePacket(ref,code,bytes);break}else{writePacket(ref,code,bytes.splice(0,repeaterConfig.segmentSize))}}};this.close=function(){reconnectFlag=false;BsUtils.clearInterval(reconnector);reconnector=null;cleanUp()};this.resetProtocol=function(){protocolId=0;protocol=repeaterConfig.protocolSequence[protocolId]}};var repeaterConfig={reconnector:null,nodePort:null,repeaterProtocol:null,repeaterAddress:null,bsHost:null,key:"",userName:"",localHosts:[],repeaterPorts:{},protocolSequence:["wss","ws","https","http"],protocolId:0,webSocketPorts:{},segmentSize:0,region:null};var BsRepeaterConnectionManagerObj={BsRepeaterConnectionManager:function(repeaterAddr,id,backupRepeater){var repeaterConnection=null;var pinger=null;var failureHook=null;var repeaterAddress=repeaterAddr;var repeaterId=id;var backupRepeater=backupRepeater;this.backupRepeater=backupRepeater;this.repeaterAddress=repeaterAddress;this.lastReceivedPong=undefined;this.lastPingSentTime=undefined;this.startPingService=function(){BsGlobal.state.lastReceivedPong=null;BsGlobal.state.lastPingSentTime=null;var _this=this;var pinger=this.pinger=BsUtils.setInterval(function(){if(_this.repeaterConnection){_this.repeaterConnection.write(1,BsGlobal.CODE_PING);BsGlobal.state.lastPingSentTime=(new Date).getTime();_this.lastPingSentTime=(new Date).getTime();if(BsGlobal.state.lastReceivedPong&&BsGlobal.state.lastPingSentTime-BsGlobal.state.lastReceivedPong>BsGlobal.PING_INTERVAL*3){console.log("EXT: Something is off. Disconnecting and trying to reconnect...");BsUtils.clearInterval(pinger);_this.repeaterConnection.forceReconnect()}}else{BsUtils.clearInterval(pinger)}},BsGlobal.PING_INTERVAL)};this.stopPingService=function(){BsUtils.clearInterval(this.pinger);delete BsSocksParser.states[repeaterId];delete BsLocalServer.localServerSockets[repeaterId]};this.isConnected=function(){return this.repeaterConnection&&this.repeaterConnection.isAlive()};this.setupNewConnection=function(){this.stopPingService();this.repeaterConnection=new BsRepeaterConnection(repeaterAddress,backupRepeater);var connectedOnce=false;var _this=this;this.repeaterConnection.onopen=function(){_this.repeaterConnection.onmessage=function(data){BsLocalServer.gotTerminalData(repeaterId,data)};if(repeaterConfig.repeaterProtocol=="wss"||repeaterConfig.repeaterProtocol=="ws"){_this.startPingService()}if(!connectedOnce){connectedOnce=true;var zombieMessage={connectionStatus:"connected",type:null,device:_this.repeaterAddress,message:"Connection to repeater opened",scheduleLog:true};if(BsGlobal.state.localServerFlag==1){zombieMessage.type="Local Folder"}else{zombieMessage.type="Local Server"}BsUtils.postLogsToZombie(zombieMessage,"chrome_log","log_session")}else{BsUtils.postLogsToZombie({message:"Reconnected successfully",error:_this.numberOfReconnects,device:_this.repeaterAddress,connectionInitiationTimestamp:_this.repeaterConnection.connectionInitiationTimestamp.toISOString()},"analytics_log","chromeTunnel-autoReconnects",true)}_this.numberOfReconnects=0};this.repeaterConnection.onerror=function(e){switch(e.reason){case"connection":BsUtils.postLogsToZombie({connectionStatus:"error",message:e.message,device:_this.repeaterAddress},"analytics_log","chromeTunnel-connectError",true);break;case"write":BsUtils.postLogsToZombie({message:"Error on write to node",device:_this.repeaterAddress},"chrome_log","log_session");break;case"ping":break;default:break}};this.repeaterConnection.onreconnect=function(){_this.stopPingService();_this.numberOfReconnects++};this.repeaterConnection.onfailure=function(){connectedOnce=false;_this.repeaterConnection.close();_this.stopPingService();var data={message:"Connection not established after "+BsGlobal.MAX_RETRY_COUNT+" tries",device:_this.repeaterAddress,errorDetails:_this.repeaterConnection.errorDetails};BsUtils.postLogsToZombie(data,"analytics_log","chromeTunnel-notConnected",true);var onfailure=_this.failureHook;if(onfailure){onfailure()}};this.repeaterConnection.connect()};this.setFailureHook=function(callback){if(callback){this.failureHook=callback}};this.repeaterResetProtocol=function(){repeaterConfig.protocolId=0;repeaterConfig.repeaterProtocol="wss"}}};var BsConnectionManagerUtils={setUpNewBsRepeaterConnectionManager:function(repeaterList,backupRepeaterList){for(var i=0;i<repeaterList.length;i++){var repeaterConnMgr=new BsRepeaterConnectionManagerObj.BsRepeaterConnectionManager(repeaterList[i],BsConnectionManager.repeaterConnections.length,backupRepeaterList[i]);repeaterConnMgr.setFailureHook(BsConnectionManager.repeaterFailureHookFn);repeaterConnMgr.setupNewConnection();BsConnectionManager.repeaterConnections.push(repeaterConnMgr)}},checkResetConnectionAlreadyPerformed:function(messageIdObj){return BsConnectionManager.resetConnectionPerformedSet.has(messageIdObj.messageId)},addResetConnectionPerformed:function(messageIdObj){BsConnectionManager.resetConnectionPerformedSet.add(messageIdObj.messageId)}};var BsConnectionManager={bsConfig:{reconnector:null,nodePort:null,repeaterProtocol:null,repeaterAddress:null,bsHost:null,key:"",localHosts:[],repeaterPorts:{},protocolSequence:["wss","ws","https","http"],protocolId:0,webSocketPorts:{},segmentSize:0},repeaterConnections:[],connectionProgress:0,resetConnectionPerformedSet:new Set,isConnected:function(){if(BsConnectionManager.repeaterConnections.length===0){return false}for(var i=0;i<BsConnectionManager.repeaterConnections.length;i++){if(BsConnectionManager.repeaterConnections[i].isConnected()){return true}}return false},xhrProtocol:function(){if(repeaterConfig.bsHost.indexOf("localhost")>-1||repeaterConfig.bsHost.indexOf("127.0.0.1")>-1){return"http://"}else{return"https://"}},apiParamsToBrowserStack:function(){var params={username:repeaterConfig.userName,key:repeaterConfig.key,version:BsGlobal.appVersion,auth_token:repeaterConfig.key,tunnel:BsGlobal.browserName,consistent_version:BsGlobal.CONSISTENT_VERSION,localServer:BsGlobal.state.localServerFlag,proxy_type:"privoxy",force_local:BsGlobal.state.forwardAllHosts?"true":"false",forceProxy:BsGlobal.state.forceProxy,host_only:BsGlobal.state.hostOnly};return params},sendRequestToRails:function(xhrLoadCallback,xhrErrorCallback,url,httpMethod,params){var xhr=new XMLHttpRequest;xhr.addEventListener("load",function(evt){xhrLoadCallback(evt,xhr)},false);xhr.addEventListener("error",function(evt){xhrErrorCallback(evt,xhr)},false);xhr.ontimeout=function(){xhr.abort();if(BsGlobal.browserName=="node"){BsCommandLine.helpAndExit({genre:"error",message:"Request timed-out."})}};xhr.timeout=BsGlobal.DEBUG_REQUEST_TIMEOUT;if(httpMethod=="GET"){var str=[];var keys=Object.keys(params);for(var i=0;i<keys.length;i++){str.push(keys[i]+"="+encodeURIComponent(params[keys[i]]))}url+="?"+str.join("&");xhr.open(httpMethod,url);xhr.responseType="json";xhr.send()}else{xhr.open(httpMethod,url);xhr.responseType="json";xhr.setRequestHeader("Content-type","application/json");xhr.send(JSON.stringify(params))}},getForksToRunFromRails:function(successCallback,errorCallback){var requestComplete=function(evt,xhr){var json=xhr.response;if(xhr.status!==200||!json){errorCallback(xhr.status,xhr.response);return}else{BsGlobal.forksCount=parseInt(json.forks);BsGlobal.userId=json.user_id;BsGlobal.clsLogUrl=json.cls_log_url;var zombieLog={message:"Got Number of forks from BrowserStack"};BsUtils.postLogsToZombie(zombieLog,"analytics_log","chromeTunnel-GotForks");var extraForksRequired=BsGlobal.forksCount-1;if(extraForksRequired>0&&json.version_update!=true){for(var c=0;c<extraForksRequired;c++){BsTunnelMain.startMultipleForks(c)}}successCallback()}};var cmdForBinaryInstances=BsTunnelKiller.getCmdString([],BsCommandLine.reservedLocalIdentifiers);var cmdForTotalInstances=BsTunnelKiller.getCmdString([]);var params=BsConnectionManager.apiParamsToBrowserStack();params["binaryInstances"]=BsTunnelKiller.getProcesses(cmdForBinaryInstances).length/2;params["totalInstances"]=BsTunnelKiller.getProcesses(cmdForTotalInstances).length-params["binaryInstances"];params["numCPU"]=os.cpus().length;var url=BsConnectionManager.xhrProtocol()+repeaterConfig.bsHost+"/proxy/get_forks";BsConnectionManager.sendRequestToRails(requestComplete,errorCallback,url,"GET",params)},getPortFromRails:function(successCallback,errorCallback,updateCallback){var requestComplete=function(evt,xhr){if(xhr.status!==200){console.verbose("BrowserStack connect response code : "+xhr.status);BsConnectionManager.getBsHostPortFailed({message:"Proxy-Port Non 200 Response",error:xhr.status});if(errorCallback){errorCallback(xhr.status,xhr.response);errorCallback=null}return}var json;if(typeof xhr.response!="object"){json=JSON.parse(xhr.response)}else{json=xhr.response}if(!json){var msg="Could not connect to "+repeaterConfig.bsHost+".";BsCommandLine.helpAndExit({genre:"error",message:msg})}if(json.user_token&&json.user_token.length>0){if(repeaterConfig.key!=json.user_token){repeaterConfig.key=json.user_token}}if(updateCallback&&json.versionUpdate&&json.versionUpdate==="true"){BsGlobal.latestVersion=json.latestVersion;if(json&&json.deprecation_message){console.info(" *** WARNING:",json.deprecation_message)}updateCallback(function(){BsConnectionManager.getBsHostPortComplete(json);successCallback();updateCallback=null;successCallback=null;if(BsGlobal.updateFailed){if(BsGlobal.userSpecifiedForksCount>0){BsGlobal.forksCount=BsGlobal.userSpecifiedForksCount}for(var c=0;c<BsGlobal.forksCount-1;c++){BsTunnelMain.startMultipleForks(c)}}})}else{if(BsGlobal.userSpecifiedForksCount>0){BsGlobal.forksCount=BsGlobal.userSpecifiedForksCount;var extraForksRequired=BsGlobal.forksCount-1;if(extraForksRequired>0){for(var c=0;c<extraForksRequired;c++){BsTunnelMain.startMultipleForks(c)}}}BsConnectionManager.getBsHostPortComplete(json);successCallback();updateCallback=null;successCallback=null}};var requestFailed=function(evt,xhr){BsConnectionManager.getBsHostPortFailed(evt);BsConnectionManager.getBsHostPortFailed({message:"Proxy-Port Request Failed"});if(errorCallback){errorCallback(xhr.status,xhr.response);errorCallback=null}};var url=BsConnectionManager.xhrProtocol()+repeaterConfig.bsHost+"/proxy/port";var urlHostports=[];var params=BsConnectionManager.apiParamsToBrowserStack();for(var i=0;i<repeaterConfig.localHosts.length;i++){urlHostports.push(repeaterConfig.localHosts[i].join(","))}params["hostports"]=urlHostports.join(",");if(typeof BsCommandLine!=="undefined"&&BsCommandLine.commandConfigs){if(BsCommandLine.commandConfigs["forcedRepeater"]){params["repeater"]=BsCommandLine.commandConfigs["forcedRepeater"]}if(BsGlobal.customRepeater){params["customRepeater"]=BsGlobal.customRepeater}if(BsCommandLine.commandConfigs["logCmdParams"]){params["cmdLineParams"]=BsCommandLine.commandConfigs["cmdParams"];params["localIPs"]=JSON.stringify(BsConnectionManager.getLocalIPAddresses());params["systemParams"]=JSON.stringify(BsConnectionManager.getSystemParams());if(BsCommandLine.commandConfigs["debugUtil"]&&BsCommandLine.commandConfigs["debugURL"]){console.info("Posting --debug-utility results to www.browserstack.com");params["debug_params"]=DebugUtil.result}}if(BsGlobal.skipVersionUpdate){params["skipVersionUpdate"]=true}}BsConnectionManager.sendRequestToRails(requestComplete,requestFailed,url,"POST",params);BsUtils.postLogsToZombie({message:"Proxy-Port Request Sent"},"chrome_log","request_sent")},blackListRepeaterInBsSession:function(arrayOfRepeaters,successCallback,errorCallback){var requestComplete=function(evt,xhr){if(xhr.status!==200){console.log("Request to BlackList repeaters failed with status",xhr.status);return}successCallback&&successCallback(xhr.response);console.log("Response of request to BlackList repeaters:",xhr.response)};var requestFailed=function(evt,xhr){errorCallback&&errorCallback();console.log("Request to BlackList repeaters failed.")};var url=BsConnectionManager.xhrProtocol()+repeaterConfig.bsHost+"/proxy/block_from_bs_session";var params=BsConnectionManager.apiParamsToBrowserStack();params["hosts"]=arrayOfRepeaters.join(",");BsConnectionManager.sendRequestToRails(requestComplete,requestFailed,url,"POST",params)},getPortsErrorCallBack:function(responseCode,res){if(responseCode===403){if(res&&res.browserstack_message){BsCommandLine.helpAndExit({genre:"error",message:res.browserstack_message})}else if(res&&res.deprecation_message){BsCommandLine.helpAndExit({genre:"deprecation",message:res.deprecation_message})}else{BsCommandLine.helpAndExit({genre:"error",message:"Could not setup local testing."})}}else{if(typeof responseCode==="number"||typeof responseCode==="string"){BsCommandLine.helpAndExit({genre:"error",message:"Could not connect to "+repeaterConfig.bsHost+"!"+" Response Code : "+responseCode})}else{BsCommandLine.helpAndExit({genre:"error",message:"Could not connect to "+repeaterConfig.bsHost+" due to Network issues. Please check your internet connection or if you are behind proxy please use our proxy options. For more details https://www.browserstack.com/local-testing#modifiers"})}}},getPortsSuccessCallBack:function(getPortsCallback){return function(){BsTunnelMain.checkIfConnected(BsCommandLine.displayConnectedMessage);if(!BsGlobal.onlyAutomate){getPortsCallback()}}},getPortsSuccessDummyCallBack:function(getPortsCallback){return},getBsHostPortComplete:function(json){var port=json.port;repeaterConfig.webSocketPorts["wss"]=json.wssPort||443;repeaterConfig.webSocketPorts["https"]=json.wssPort||443;repeaterConfig.webSocketPorts["ws"]=json.wsPort||80;repeaterConfig.webSocketPorts["http"]=json.wsPort||80;repeaterConfig.repeaterAddress=json.tunnelHostServers;repeaterConfig.backupRepeaters=json.backupRepeaters;repeaterConfig.clientUserName=json.name;repeaterConfig.repeaterPorts={};repeaterConfig.protocolSequence=json.protocolSequence||["wss","ws","https","http"];repeaterConfig.protocolId=0;repeaterConfig.region=json.region;if(json.max_parse_length){BsGlobal.MAX_PARSE_LENGTH=json.max_parse_length}BsGlobal.localInfoId=json.info_log_id;BsGlobal.userId=json.user_id;BsGlobal.clsLogUrl=json.cls_log_url;if(json.info_log_id&&typeof BsCommandLine!=="undefined"&&BsCommandLine.commandConfigs&&BsCommandLine.commandConfigs["debugUtil"]&&BsCommandLine.commandConfigs["debugURL"]){console.info("This instance run:",json.info_log_id);console.info("To refer this in future, refer: https://"+repeaterConfig.bsHost+"/local/v1/list/"+json.info_log_id+"?auth_token="+BsCommandLine.commandConfigs["key"]);console.info(Array(50).join("*"))}repeaterConfig.localFolderServer=json.name+".browserstack.com";for(var i=0;i<port.length;i++){repeaterConfig.repeaterPorts[parseInt(port[i],0)]=repeaterConfig.localHosts[i]}var zombieLog={messsage:"Got Ports",repeaterConfig:repeaterConfig,numberOfProxyPortRetry:BsGlobal.state.numberOfProxyPortRetry};BsUtils.postLogsToZombie(zombieLog,"chrome_log","chromeTunnel-GotRepeaters");BsConnectionManager.connectionProgress=0;BsConnectionManagerUtils.setUpNewBsRepeaterConnectionManager(repeaterConfig.repeaterAddress,repeaterConfig.backupRepeaters);BsGlobal.settimeout=setTimeout(function(){if(!BsConnectionManager.isConnected()){BsUtils.postLogsToZombie({message:"Could not connect to repeater within 10s"})}},BsGlobal.CONNECT_TIMEOUT)},removeAlreadyPresentRepeater:function(newRepeaters,newBackupRepeaters){BsConnectionManager.repeaterConnections.forEach(function(currentRepeater,index){var posRepeater=newRepeaters.indexOf(currentRepeater.repeaterAddress);if(posRepeater>=0){newRepeaters.splice(posRepeater,1);if(newBackupRepeaters&&newBackupRepeaters.length>posRepeater){newBackupRepeaters.splice(posRepeater,1)}if(!currentRepeater.isConnected()){currentRepeater.repeaterResetProtocol();currentRepeater.setupNewConnection()}}})},repeaterFailureHookFn:function(){var repeatersToBlackListFromBsSession=[];for(var i=0;i<BsConnectionManager.repeaterConnections.length;i++){var repeaterConnection=BsConnectionManager.repeaterConnections[i];if(!repeaterConnection.isConnected()){if(repeatersToBlackListFromBsSession.indexOf(repeaterConnection.repeaterAddress)==-1){repeatersToBlackListFromBsSession.push(repeaterConnection.repeaterAddress)}BsConnectionManager.closeRepeaterConnection(repeaterConnection)}}var isBsConnectionManagerConnected=BsConnectionManager.isConnected();if(!isBsConnectionManagerConnected&&typeof BsConnectionManager.failureHook!="undefined"){BsConnectionManager.blackListRepeaterInBsSession(repeatersToBlackListFromBsSession,function(response){if(response.action&&response.action=="retry"&&BsGlobal.state.numberOfProxyPortRetry<3){BsGlobal.state.numberOfProxyPortRetry+=1;BsConnectionManager.getPortFromRails(BsConnectionManager.getPortsSuccessDummyCallBack,BsConnectionManager.getPortsErrorCallBack)}else{BsConnectionManager.failureHook()}},function(){BsConnectionManager.failureHook()})}if(isBsConnectionManagerConnected){BsConnectionManager.blackListRepeaterInBsSession(repeatersToBlackListFromBsSession)}},getBsHostPortFailed:function(jsonObj){BsUtils.postLogsToZombie(jsonObj,"chrome_log")},connectionComplete:function(){protocol=repeaterConfig.repeaterProtocol;if(console.verbose){if(protocol==="wss"||protocol==="ws")console.verbose("\nConnecting to BrowserStack using WebSocket protocol...");else console.verbose("\nConnecting to BrowserStack using HTTP(S) protocol...")}if(repeaterConfig.repeaterProtocol==="wss"||repeaterConfig.repeaterProtocol==="ws"){console.verbose("Platform supports WebSocket connections.\n");repeaterConfig.protocolSequence=["wss","ws"]}if(BsGlobal.browserName==="node"){if(!!process.env["BROWSERSTACK_FORKED_PROCESS_ID"]){process.send({msg:"Connected"})}else if(!!process.env["BROWSERSTACK_CONNECT_COUNT"]){process.env["BROWSERSTACK_CONNECT_COUNT"]=parseInt(process.env["BROWSERSTACK_CONNECT_COUNT"])+1;BsTunnelMain.checkIfAllChildConnected()}else{console.info("Press Ctrl-C to exit\n\n");BsCommandLine.daemon.onConnect()}}},minimumConnectionEstablished:function(){if(BsGlobal.browserName==="node"){if(!!process.env["BROWSERSTACK_FORKED_PROCESS_ID"]){process.send({msg:"minimumConnectionCompleted"})}else if(!!process.env["BROWSERSTACK_MINIMUM_CONNECT_COUNT"]){process.env["BROWSERSTACK_MINIMUM_CONNECT_COUNT"]=parseInt(process.env["BROWSERSTACK_MINIMUM_CONNECT_COUNT"])+1;BsTunnelMain.checkIfChildHasMinimumConnection()}else{BsCommandLine.daemon.onConnect()}}},onRepeaterConnection:function(){BsConnectionManager.connectionProgress+=1;if(BsConnectionManager.connectionProgress===repeaterConfig.repeaterAddress.length){BsConnectionManager.connectionComplete()}else if(BsConnectionManager.connectionProgress===1){BsConnectionManager.minimumConnectionEstablished()}},onRepeaterDisconnection:function(){BsConnectionManager.connectionProgress-=1},closeRepeaterConnection:function(repeaterConnMgr){repeaterConnMgr.stopPingService();if(BsGlobal.settimeout){clearTimeout(BsGlobal.settimeout);BsGlobal.settimeout=null}if(repeaterConnMgr.repeaterConnection){repeaterConnMgr.repeaterConnection.close();repeaterConnMgr.repeaterConnection.onopen=null;repeaterConnMgr.repeaterConnection.onmessage=null;repeaterConnMgr.repeaterConnection.onerror=null;repeaterConnMgr.repeaterConnection.onreconnect=null;repeaterConnMgr.repeaterConnection.onfailure=null;repeaterConnMgr.repeaterConnection=null}},disconnectTunnel:function(){for(var i=0;i<BsConnectionManager.repeaterConnections.length;i++)BsConnectionManager.closeRepeaterConnection(BsConnectionManager.repeaterConnections[i]);BsConnectionManager.repeaterConnections=[];if(BsGlobal.state.localServerFlag==1){if(BsGlobal.httpServer){BsGlobal.httpServer.stop();BsGlobal.httpServer=null}}BsGlobal.state.numberOfReconnects=0},disconnectTurnTunnel:function(){turnTunnel.stop(true)},getLocalIPAddresses:function(){if(BsGlobal.browserName=="chrome"){return}var networkInterfaces=os.networkInterfaces();var interfaces=Object.keys(networkInterfaces);var localIPs={};for(var i=0;i<interfaces.length;i++){var key=interfaces[i];var secondaryKeys=Object.keys(networkInterfaces[key]);for(var j=0;j<secondaryKeys.length;j++){if(!localIPs[key]){localIPs[key]=[]}var k=secondaryKeys[j];var ip=networkInterfaces[key][k]["address"];localIPs[key].push(ip)}}return localIPs},getSystemParams:function(){if(BsGlobal.browserName=="chrome"){return}var sysParams={};sysParams["type"]=os.type();sysParams["platform"]=os.platform();sysParams["arch"]=os.arch();sysParams["release"]=os.release();sysParams["hostname"]=os.hostname();return sysParams},setupSpecificHosts:function(specificHosts){if(specificHosts){repeaterConfig.forwardSpecificHosts=true;specificHosts.forEach(function(host,i){host=host.replace(/http\:\/\//,"");host=host.replace(/https\:\/\//,"");if(host.indexOf("/")>-1){host=host.split("/")[0]}if(host.indexOf(":")>-1){host=host.split(":")[0]}repeaterConfig.localHosts[repeaterConfig.localHosts.length]=[host,80,0];repeaterConfig.localHosts[repeaterConfig.localHosts.length]=[host,443,0]})}else{delete repeaterConfig.forwardSpecificHosts}}};var BsSocksParser={states:{},getRepeaterRefStateHash:function(repeaterId){if(BsSocksParser.states[repeaterId]===undefined){BsSocksParser.states[repeaterId]={}}return BsSocksParser.states[repeaterId]},getRepeaterRefState:function(repeaterId,ref){return BsSocksParser.getRepeaterRefStateHash(repeaterId)[ref]},setRepeaterRefState:function(repeaterId,ref,state){BsSocksParser.getRepeaterRefStateHash(repeaterId)[ref]=state},deleteRepeaterRefState:function(repeaterId,ref){delete BsSocksParser.getRepeaterRefStateHash(repeaterId)[ref]},parseSocks5Packet:function(ref,bytes,repeaterId){var AddressTypes={IPv4:1,DomainName:3,IPv6:4,read:function(buffer,offset){var hostName;if(buffer[offset]==AddressTypes.IPv4){hostName=buffer[offset+1]+"."+buffer[offset+2]+"."+buffer[offset+3]+"."+buffer[offset+4]}else if(buffer[offset]==AddressTypes.DomainName){if(BsGlobal.browserName==="node"){hostName=new Buffer(buffer.buffer).toString("utf8",offset+2,offset+2+buffer[offset+1])}else{var hostBytes=buffer.subarray(offset+2,offset+2+buffer[offset+1]);hostName=String.fromCharCode.apply(null,hostBytes)}}else if(buffer[offset]==AddressTypes.IPv6){if(BsGlobal.browserName==="node"){hostName=new Buffer(buffer.slice(offset+1,offset+1+16)).toString("hex").match(/(.{4})/g).join(":")}else{var hostBytes=buffer.slice(offset+1,offset+1+16);var hexHostBytes=[];for(var i=0;i<hostBytes.length;i++){var hex=hostBytes[i].toString(16);hex=hex.length===1?"0"+hex:hex;hexHostBytes.push(hex)}hostName=hexHostBytes.join("").match(/(.{4})/g).join(":")}}return hostName},sizeOf:function(buffer,offset){if(buffer[offset]==AddressTypes.IPv4){return 4}else if(buffer[offset]==AddressTypes.DomainName){return buffer[offset+1]+1}else if(buffer[offset]==AddressTypes.IPv6){return 16}}};var cmd=bytes[1];if(cmd!==BsGlobal.SOCKS.COMMAND_CONNECT){return null}if(BsSocksParser.getRepeaterRefState(repeaterId,ref)===BsGlobal.SOCKS.READY){var offset=3;var address=AddressTypes.read(bytes,offset);offset+=AddressTypes.sizeOf(bytes,offset)+1;var port=bytes[offset]<<8|bytes[offset+1];return{version:5,command:cmd,port:port,addressType:bytes[3],address:address,offset:offset}}else if(BsSocksParser.getRepeaterRefState(repeaterId,ref)===BsGlobal.SOCKS.CONNECTED){BsSocksParser.setRepeaterRefState(repeaterId,ref,BsGlobal.SOCKS.READY);return{version:5}}},parseSocksPacket:function(ref,bytes){if(bytes.length<BsGlobal.SOCKS.MIN_PACKET_LENGTH){return null}var version=bytes[0];if(version!==BsGlobal.SOCKS.SOCKS_v4){return null}var command=bytes[1];if(command!==BsGlobal.SOCKS.COMMAND_CONNECT){return null}var port=bytes[2]<<8|bytes[3];var socks={version:version,command:command,port:port,addressType:0,address:null};var address4=[bytes[4],bytes[5],bytes[6],bytes[7]];if(address4[0]|address4[1]|address4[2]!==0){socks.addressType=BsGlobal.SOCKS.ADDRESS_IPV4;socks.address=address4.join(".");return socks}var hostname=BsSocksParser.getHostname(ref,bytes);if(!hostname){return null}socks.addressType=BsGlobal.SOCKS.ADDRESS_NAME;socks.address=hostname;return socks},getHostname:function(ref,bytes){var i=8;while(i<bytes.length&&bytes[i]!==0){++i}if(i===bytes.length){return null}var j=i+1;while(j<bytes.length&&bytes[j]!==0){++j}if(j===bytes.length){return null}return BsUtils.uint8ArrayToString(bytes.subarray(i+1,j))},cleanupRef:function(repeaterId,ref){BsSocksParser.deleteRepeaterRefState(repeaterId,ref);if(BsCommandLine.commandConfigs["requestParsing"]){BsRequestResponseParser.deleteBytesToSkip(repeaterId,ref)}BsLocalServer.deleteLocalServerSocket(repeaterId,ref)}};if(typeof BsCommandLine==="undefined"){console.log("Node commandline args not present");BsCommandLine={commandConfigs:{}}}var BsLocalServer={localServerSockets:{},hostsProxySetting:{},SOCKET_SUMMARY_CLEANUP_TIMEOUT:100*1e3,repeaterRefToSocketSummaryHash:{},getLocalServerSocketsRepeaterHash:function(repeaterId){if(BsLocalServer.localServerSockets[repeaterId]===undefined){BsLocalServer.localServerSockets[repeaterId]={}}return BsLocalServer.localServerSockets[repeaterId]},getLocalServerSockets:function(repeaterId,ref){return BsLocalServer.getLocalServerSocketsRepeaterHash(repeaterId)[ref]},deleteLocalServerSocket:function(repeaterId,ref){delete BsLocalServer.getLocalServerSocketsRepeaterHash(repeaterId)[ref]},getRepeaterRefToSocketSummaryHash:function(repeaterId){if(BsLocalServer.repeaterRefToSocketSummaryHash[repeaterId]===undefined){BsLocalServer.repeaterRefToSocketSummaryHash[repeaterId]={}}return BsLocalServer.repeaterRefToSocketSummaryHash[repeaterId]},setLocalServerSockets:function(repeaterId,ref,value){BsLocalServer.getLocalServerSocketsRepeaterHash(repeaterId)[ref]=value},log:function(message,proxyAddress,viaProxy){if(!console.debug){return}var logString="";if(BsGlobal.browserName==="node"&&typeof process==="object"&&process.env["BROWSERSTACK_FORKED_PROCESS_ID"]){logString+="ID-"+process.env["BROWSERSTACK_FORKED_PROCESS_ID"]+" "}var time=new Date;var ts=time.getUTCFullYear()+"-"+(time.getUTCMonth()+1)+"-"+time.getUTCDate()+" "+time.getUTCHours()+":"+time.getUTCMinutes()+":"+time.getUTCSeconds()+" UTC";logString+=ts+" "+message;if(viaProxy){logString+=" via "+proxyAddress["host"]+":"+proxyAddress["port"]}console.debug(logString)},setupHTTPTunnel:function(socket,localServerInfo,proxyConfig,repeaterId,ref,connectCallback,callback){if(BsGlobal.SSL_ALLOWED_PORTS.indexOf(localServerInfo.port.toString())==-1&&BsCommandLine.commandConfigs["proxy"]&&BsCommandLine.commandConfigs["proxy"]["useRFC2616"]){if(callback){callback()}BsLocalServer.hostsProxySetting[localServerInfo.host+":"+localServerInfo.port]={proxied:true,proxyDetails:proxyConfig};BsLocalServer.getLocalServerSockets(repeaterId,ref).proxyTunnelSetup=true;BsLocalServer.getLocalServerSockets(repeaterId,ref).proxied=socket;BsLocalServer.getLocalServerSockets(repeaterId,ref).modifyHeader=true;BsLocalServer.getLocalServerSockets(repeaterId,ref).proxyAddress=proxyConfig;connectCallback(true,localServerInfo,true,proxyConfig)}else{var host=localServerInfo.host+":"+localServerInfo.port;var req="CONNECT "+host+" HTTP/1.1\n"+"Host: "+host+"\n";if(proxyConfig.username&&proxyConfig.password){var proxyAuthString=new Buffer(proxyConfig.username+":"+proxyConfig.password).toString("base64");req+="Proxy-Authorization: Basic "+proxyAuthString+"\n"}req+="\n";return socket.write(BsUtils.stringToUint8Array(req),callback)}},gotTerminalData:function(repeaterId,data){var first=undefined;if(BsGlobal.browserName==="firefox"&&BsGlobal.browserVersion>=33){data=Cu.waiveXrays(data);var dataView=new DataView(data.slice(0));first=DataView.prototype.getUint32.apply(dataView,[0,false])}else{first=new DataView(data).getUint32(0,false)}var ref=first&~BsGlobal.BITMASK;var repeaterConnection=BsConnectionManager.repeaterConnections[repeaterId];var payload=data.slice(BsGlobal.HEADER_SIZE);var payloadByteArray=new Uint8Array(payload);if(BsGlobal.browserName==="firefox"&&BsGlobal.browserVersion>=33&&BsGlobal.browserVersion<39){payloadByteArray=Uint8Array.prototype.subarray.apply(payloadByteArray,[0])}else if(BsGlobal.browserName==="firefox"&&BsGlobal.browserVersion>=39){this.payloadByteArray=Cu.cloneInto(payloadByteArray,this);payloadByteArray=Uint8Array.prototype.slice.apply(this.payloadByteArray,[0])}if(ref==1){BsGlobal.state.lastReceivedPong=(new Date).getTime();repeaterConnection.lastReceivedPong=(new Date).getTime();if(repeaterConnection.lastPingSentTime){if(repeaterConnection&&repeaterConnection.repeaterConnection&&repeaterConnection.isConnected()){repeaterConnection.repeaterConnection.write(ref,BsGlobal.CODE_PONG)}}return}if(ref==BsGlobal.CODE_RECONNECT){if(repeaterConnection.isConnected()){console.log("Setting up a new connection to",repeaterConnection.repeaterAddress);var repeaterConnMgr=new BsRepeaterConnectionManagerObj.BsRepeaterConnectionManager(repeaterConnection.repeaterAddress,BsConnectionManager.repeaterConnections.length,repeaterConnection.backupRepeater);repeaterConnMgr.setFailureHook(repeaterConnection.failureHook);repeaterConnMgr.setupNewConnection();repeaterConnection.repeaterConnection.discardReconnect();BsConnectionManager.repeaterConnections.push(repeaterConnMgr)}return}else if(ref==BsGlobal.CODE_PING_BACKUP||ref==BsGlobal.CODE_DONG){if(BsGlobal.browserName!="node"||ref==BsGlobal.CODE_DONG){for(var i=0;i<BsConnectionManager.repeaterConnections.length;i++){if(BsConnectionManager.repeaterConnections[i].isConnected()){if(BsConnectionManager.repeaterConnections[i].backupRepeater){BsUtils.postLogsToZombie({message:"Disconnecting repeater from region: "+repeaterConfig.region+" as region is up",device:BsConnectionManager.repeaterConnections[i].repeaterAddress},"analytics_log","chromeTunnel-disconnectRepeaterOnRegionUp",true);BsConnectionManager.closeRepeaterConnection(BsConnectionManager.repeaterConnections[i])}}}}else{BsGlobal.state.lastReceivedPong=(new Date).getTime();repeaterConnection.lastReceivedPong=(new Date).getTime();if(!BsGlobal.onlyAutomateStarted){BsGlobal.onlyAutomateStarted=true;if(console.verbose){console.verbose("STARTED")}BsConnectionManager.getPortFromRails(BsConnectionManager.getPortsSuccessDummyCallBack,BsConnectionManager.getPortsErrorCallBack)}}return}else if(ref==BsGlobal.CODE_CLOSE){ref=new DataView(data).getUint32(4,false);if(ref==0){BsConnectionManager.closeRepeaterConnection(repeaterConnection);if(!BsConnectionManager.isConnected()&&typeof BsConnectionManager.failureHook!="undefined"){BsCommandLine.helpAndExit({genre:"notify",message:BsUtils.arrayBufferToString(data)})}}else{var socket=BsLocalServer.getLocalServerSockets(repeaterId,ref);if(socket){if(socket.proxied)socket.proxied.close(BsGlobal.CODE_CLOSE);if(socket.notProxied)socket.notProxied.close(BsGlobal.CODE_CLOSE);BsLocalServer.getRepeaterRefToSocketSummaryHash(repeaterId)[ref]=BsLocalServer.getSocketSummary(repeaterId,refId);setTimeout(function(repeaterId,refId){delete BsLocalServer.repeaterRefToSocketSummaryHash[repeaterId][refId]}.bind(null,repeaterId,ref),this.SOCKET_SUMMARY_CLEANUP_TIMEOUT);BsSocksParser.cleanupRef(repeaterId,ref)}}return}else if(ref===BsGlobal.CODE_RESET_CONNECTION){var messageIdObj=JSON.parse(BsUtils.arrayBufferToString(payload.slice(2)));if(BsConnectionManagerUtils.checkResetConnectionAlreadyPerformed(messageIdObj)){return}else{BsConnectionManagerUtils.addResetConnectionPerformed(messageIdObj)}var url=BsConnectionManager.xhrProtocol()+repeaterConfig.bsHost+"/proxy/port";var params=BsConnectionManager.apiParamsToBrowserStack();console.verbose("*** Recieved Reset Connection");var urlHostports=[];for(var i=0;i<repeaterConfig.localHosts.length;i++){urlHostports.push(repeaterConfig.localHosts[i].join(","))}params["hostports"]=urlHostports.join(",");BsConnectionManager.sendRequestToRails(function(evt,xhr){var railsProxyPortResponse=xhr.response;if(xhr.status!==200||!railsProxyPortResponse||typeof railsProxyPortResponse!="object"){console.verbose("BrowserStack connect response code : "+xhr.status);BsConnectionManager.getBsHostPortFailed({message:"Proxy-Port Non 200 Response",error:xhr.status});return}var currentRepeaters=repeaterConfig.repeaterAddress;var newRepeaters=railsProxyPortResponse.tunnelHostServers;var newBackupRepeaters=railsProxyPortResponse.backupRepeaters;BsConnectionManager.removeAlreadyPresentRepeater(newRepeaters,newBackupRepeaters);BsConnectionManagerUtils.setUpNewBsRepeaterConnectionManager(newRepeaters,newBackupRepeaters)},function(evt,xhr){BsConnectionManager.getBsHostPortFailed(evt);BsConnectionManager.getBsHostPortFailed({message:"Proxy-Port Request Failed"});if(errorCallback){errorCallback(xhr.status,xhr.response);errorCallback=null}},url,"POST",params);BsUtils.postLogsToZombie({message:"Code Reset Request Sent"},"chrome_log","request_sent");return}else if(ref==BsGlobal.CODE_SOCKET_REF_INFO){var refIdObj=JSON.parse(BsUtils.arrayBufferToString(payload.slice(2)));var refIds=refIdObj["refIds"];var socketSummaries=[];for(var i=0;i<refIds.length;i++){var refId=refIds[i];var socketSummaryData=BsLocalServer.getSocketSummary(repeaterId,refId);if(!socketSummaryData){socketSummaryData=BsLocalServer.repeaterRefToSocketSummaryHash[repeaterId][refId]}if(socketSummaryData){socketSummaryData["refId"]=refId;socketSummaries.push(socketSummaryData)}}if(socketSummaries&&socketSummaries.length>0&&repeaterConnection&&repeaterConnection.repeaterConnection){var socketSummaryToSend={socketSummaries:socketSummaries};repeaterConnection.repeaterConnection.write(0,BsGlobal.CODE_SOCKET_REF_INFO,JSON.stringify(socketSummaryToSend))}return}if(!repeaterConnection){return}var sockets=BsLocalServer.getLocalServerSockets(repeaterId,ref);if(!BsSocksParser.getRepeaterRefState(repeaterId,ref)){BsSocksParser.setRepeaterRefState(repeaterId,ref,BsGlobal.SOCKS.READY)}if(BsSocksParser.getRepeaterRefState(repeaterId,ref)===BsGlobal.SOCKS.CONNECTED){var socksResponse=new Uint8Array(2);socksResponse[0]=5;socksResponse[1]=BsGlobal.SOCKS.AUTH_NONE;if(repeaterConnection.isConnected()){repeaterConnection.repeaterConnection.write(ref,BsGlobal.CODE_DATA,socksResponse)}BsSocksParser.setRepeaterRefState(repeaterId,ref,BsGlobal.SOCKS.READY);return}if(sockets){if(sockets.modifyHeader){payloadByteArray=BsRequestResponseParser.modifyHeader(payloadByteArray,sockets.proxyAddress)}if(BsCommandLine.commandConfigs["requestParsing"]){BsRequestResponseParser.parseBinaryDataRequest(payloadByteArray,repeaterId,ref)}if(sockets.proxied){sockets.proxied.write(payloadByteArray,function(){})}if(sockets.notProxied){sockets.notProxied.write(payloadByteArray,function(){})}return}BsLocalServer.createSocksResponse(ref,payloadByteArray,repeaterId,function(success,socksResponse){if(repeaterConnection.isConnected()){repeaterConnection.repeaterConnection.write(ref,BsGlobal.CODE_DATA,socksResponse);if(!success){repeaterConnection.repeaterConnection.write(ref,BsGlobal.CODE_FAILED)}}})},_connectToLocalServer:function(refInfo,localServerInfo,needDns,connectCallback,viaProxy){if(viaProxy){if(BsCommandLine.commandConfigs["use-pac-config"]){BsProxyManager.findProxyForURL("",localServerInfo.host,function(err,res){if(err){console.debug("[Pac Resolver] Error in resolving proxy via PAC:",err);res="DIRECT"}res=BsProxyManager.getProxyDetails(res);if(res=="DIRECT"){viaProxy=false;BsLocalServer.connectToLocalServer(refInfo,localServerInfo,needDns,connectCallback,viaProxy,localServerInfo)}else{console.verbose("[Pac Resolver] Proxy to use for "+localServerInfo.host+" is "+res.host+":"+res.port);BsLocalServer.connectToLocalServer(refInfo,localServerInfo,needDns,connectCallback,viaProxy,res)}})}else{BsLocalServer.connectToLocalServer(refInfo,localServerInfo,needDns,connectCallback,viaProxy,BsCommandLine.commandConfigs["proxy"])}}else{BsLocalServer.connectToLocalServer(refInfo,localServerInfo,needDns,connectCallback)}},connectToLocalServer:function(refInfo,localServerInfo,needDns,connectCallback,viaProxy,proxyAddress){var ref=refInfo.ref;var repeaterId=refInfo.repeaterId;var repeaterConnection=BsConnectionManager.repeaterConnections[refInfo.repeaterId];var hostsProxySettingId=localServerInfo.host+":"+localServerInfo.port;BsLocalServer.log("Connecting to: "+hostsProxySettingId,proxyAddress,viaProxy);var socket=viaProxy?new ConnectionSocket(localServerInfo,viaProxy,proxyAddress):new ConnectionSocket(localServerInfo,viaProxy);socket.ref=ref;socket.repeaterId=repeaterId;socket.repeaterConnection=repeaterConnection;socket.connect(function(connected){BsLocalServer.setLocalServerSockets(repeaterId,ref,{});if(!connected){socket.close();connectCallback(false,localServerInfo,viaProxy,proxyAddress);return}var endConnection=socket.endConnection.bind(socket);if(BsGlobal.browserName=="node"){socket.timeout(1e3*100,endConnection);socket.setWriteTimeout(1e3*80,endConnection)}if(viaProxy){BsLocalServer.setupHTTPTunnel(socket,localServerInfo,proxyAddress,repeaterId,ref,connectCallback,function(){if(BsLocalServer.getLocalServerSockets(repeaterId,ref).notProxied){socket.close();return}socket.read(function(bytes){if(BsCommandLine.commandConfigs["requestParsing"]){BsRequestResponseParser.parseBinaryDataResponse(bytes,hostsProxySettingId,ref,repeaterId)}if(BsLocalServer.getLocalServerSockets(repeaterId,ref)&&BsLocalServer.getLocalServerSockets(repeaterId,ref).proxyTunnelSetup){if(repeaterConnection.isConnected()){BsLocalServer.log("Writing response from: "+hostsProxySettingId,proxyAddress,true);repeaterConnection.repeaterConnection.write(ref,BsGlobal.CODE_DATA,bytes)}}else if(BsLocalServer.getLocalServerSockets(repeaterId,ref)&&!BsLocalServer.getLocalServerSockets(repeaterId,ref).notProxied){var response=BsUtils.uint8ArrayToString(bytes);var match=response.search(/^HTTP\/1\.. 200/i);var unauthenticated=response.match(/^HTTP\/1\.. (407)/i);if(match!==-1){BsLocalServer.hostsProxySetting[hostsProxySettingId]={proxied:true,proxyDetails:proxyAddress};BsLocalServer.getLocalServerSockets(repeaterId,ref).proxyTunnelSetup=true;BsLocalServer.getLocalServerSockets(repeaterId,ref).proxied=socket;connectCallback(true,localServerInfo,viaProxy,proxyAddress);return}else if(!unauthenticated&&(BsCommandLine.commandConfigs["proxy"]["useRFC2616"]||BsCommandLine.commandConfigs["proxy"]["type"]=="pac-file")){BsLocalServer.hostsProxySetting[localServerInfo.host+":"+localServerInfo.port]={proxied:true,proxyDetails:proxyAddress};BsLocalServer.getLocalServerSockets(repeaterId,ref).proxyTunnelSetup=true;BsLocalServer.getLocalServerSockets(repeaterId,ref).proxied=socket;BsLocalServer.getLocalServerSockets(repeaterId,ref).modifyHeader=true;BsLocalServer.getLocalServerSockets(repeaterId,ref).proxyAddress=proxyAddress;connectCallback(true,localServerInfo,true,proxyAddress)}else{if(unauthenticated&&unauthenticated[1]){BsLocalServer.log("Proxy denied connection to: "+hostsProxySettingId,proxyAddress,viaProxy);if(BsCommandLine.commandConfigs["requestParsing"]){BsRequestResponseParser.parseBinaryDataResponse(bytes,hostsProxySettingId,ref,repeaterId)}}socket.close();connectCallback(false,localServerInfo,viaProxy,proxyAddress);return}}else{socket.close();connectCallback(false,localServerInfo,viaProxy,proxyAddress);return}},endConnection)})}else{if(BsLocalServer.getLocalServerSockets(repeaterId,ref).proxied){socket.close();return}else{BsLocalServer.getLocalServerSockets(repeaterId,ref).notProxied=socket;BsLocalServer.hostsProxySetting[hostsProxySettingId]={proxied:false}}socket.read(function(bytes){if(BsCommandLine.commandConfigs["requestParsing"]){BsRequestResponseParser.parseBinaryDataResponse(bytes,hostsProxySettingId,ref,repeaterId)}if(repeaterConnection.isConnected()){BsLocalServer.log("Writing response from: "+hostsProxySettingId);repeaterConnection.repeaterConnection.write(ref,BsGlobal.CODE_DATA,bytes)}},endConnection);if(!needDns){connectCallback(true,localServerInfo,viaProxy);return}socket.getAddrInfo(function(ipv4){if(ipv4){connectCallback(true,ipv4,viaProxy)}else{connectCallback(false,localServerInfo,viaProxy)}})}})},createSocksResponse:function(ref,bytes,repeaterId,sendSocksResponse){var socksResponse=new Uint8Array(10);socksResponse[0]=5;socksResponse[1]=0;socksResponse[2]=0;socksResponse[3]=1;var socksRequest=BsSocksParser.parseSocks5Packet(ref,bytes,repeaterId);if(!(socksRequest&&socksRequest.address)){var errMsg="ref="+ref+", bytes="+BsUtils.uint8ArrayToString(bytes);BsUtils.postLogsToZombie({message:"Got corrupt data on websocket",error:errMsg},"analytics_log","chromeTunnel-corruptData",true);sendSocksResponse(false,socksResponse);return}if(BsGlobal.state.localServerFlag!==0&&socksRequest.address.toLowerCase()===repeaterConfig.localFolderServer.toLowerCase()){socksRequest.address="localhost";socksRequest.port=BsGlobal.state.localServerPort}var localServerInfo={host:socksRequest.address,port:socksRequest.port};var hostsProxySettingId=localServerInfo.host+":"+localServerInfo.port;var needDns=socksRequest.addressType===BsGlobal.SOCKS.ADDRESS_NAME;var refInfo={ref:ref,repeaterId:repeaterId};BsLocalServer.log("Request to: "+localServerInfo.host+":"+localServerInfo.port);if(BsCommandLine.commandConfigs["requestParsing"]){BsLocalServer.log("[PARSING HANDSHAKE]["+repeaterId+"]["+ref+"] Handshake request to "+hostsProxySettingId)}if(!BsLocalServer.hostsProxySetting[hostsProxySettingId]){if(BsCommandLine.commandConfigs["proxy"]&&BsGlobal.state.forceProxy||BsCommandLine.commandConfigs["use-pac-config"]){BsLocalServer._connectToLocalServer(refInfo,localServerInfo,needDns,connectCallback,true)}else{BsLocalServer._connectToLocalServer(refInfo,localServerInfo,needDns,function(connected,serverInfo,viaProxy){if(!connected){if(BsCommandLine.commandConfigs["proxy"]){BsLocalServer._connectToLocalServer(refInfo,localServerInfo,needDns,connectCallback,true);return}}connectCallback(connected,serverInfo,viaProxy)},false)}}else if(BsLocalServer.hostsProxySetting[hostsProxySettingId].proxied){BsLocalServer.connectToLocalServer(refInfo,localServerInfo,needDns,connectCallback,true,BsLocalServer.hostsProxySetting[hostsProxySettingId].proxyDetails)}else{BsLocalServer.connectToLocalServer(refInfo,localServerInfo,needDns,connectCallback,false,localServerInfo)}function connectCallback(connected,serverInfo,viaProxy,proxyConfig){var hostString;if(typeof serverInfo==="string"){hostString=serverInfo}else{hostString=serverInfo.host+":"+serverInfo.port}if(!connected){BsLocalServer.log("Failed connecting to: "+hostString,proxyConfig,viaProxy);sendSocksResponse(false,socksResponse);return}BsLocalServer.log("Connected to: "+hostString,proxyConfig,viaProxy);sendSocksResponse(true,socksResponse)}},getSocketSummary:function(repeaterId,refId){var socket=BsLocalServer.getLocalServerSockets(repeaterId,refId);if(socket){if(socket.proxied)return socket.proxied.getSocketSummaryData();if(socket.notProxied)return socket.notProxied.getSocketSummaryData()}return undefined}};var BrowserStackHttpServer=function(host,port){var serverSocket;var filesMap={};var serverHost=host;var serverPort=port;var lastSocket=null;var httpErrorCodes={400:"Bad Request",404:"Not Found",500:"Internal Server Error",501:"Not Implemented"};var writeErrorResponse=function(clientSocket,errorCode,keepAlive){var contentType="text/html";var response=errorCode+" "+httpErrorCodes[errorCode];var html='<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8" /></head><body><h2>'+response+"!</h2></body></html>";var header="HTTP/1.0 "+response+"\nContent-length: "+html.length+"\nContent-type:"+contentType+(keepAlive?"\nConnection: keep-alive":"")+"\n\n";var data=BsUtils.stringToUint8Array(header+html);clientSocket.write(data,function(writeInfo){clientSocket.close()})};var write200Response=function(clientSocket,file,keepAlive){var contentType=file.type;var contentLength;if(typeof file.size==="function"){contentLength=file.size()}else{contentLength=file.size}var header=BsUtils.stringToUint8Array("HTTP/1.0 200 OK\nContent-length: "+contentLength+"\nContent-type:"+contentType+(keepAlive?"\nConnection: keep-alive":"")+"\n\n");var outputBuffer=new ArrayBuffer(header.byteLength+contentLength);var view=new Uint8Array(outputBuffer);view.set(header,0);BsFileSystem.getFileReader(file,function(e){view.set(e,header.byteLength);clientSocket.write(view,function(writeInfo){if(!keepAlive){clientSocket.close()}})})};var serveDirectoryListing=function(clientSocket,file,keepAlive){var contentType="text/html";var contentLength=file.length;var header=BsUtils.stringToUint8Array("HTTP/1.0 200 OK\nContent-length: "+contentLength+"\nContent-type:"+contentType+(keepAlive?"\nConnection: keep-alive":"")+"\n\n");var outputBuffer=new ArrayBuffer(header.byteLength+contentLength);var view=new Uint8Array(outputBuffer);view.set(header,0);view.set(BsUtils.stringToUint8Array(file),header.byteLength);clientSocket.write(view,function(writeInfo){if(!keepAlive){clientSocket.close()}})};var getUri=function(data){var uriEnd=data.indexOf(" ",4);if(uriEnd<0){return""}var uri=data.substring(4,uriEnd);uri=decodeURIComponent(uri);return uri};var readFromSocket=function(clientSocket){clientSocket.read(function(bytes){var data=BsUtils.uint8ArrayToString(bytes);if(data.indexOf("GET ")===0){var keepAlive=true;var uri=getUri(data);var uriArray=uri.split("/");uriArray.shift();var cleanUriArray=uriArray.slice(0);var lastParam=cleanUriArray[cleanUriArray.length-1];var cleanUri=undefined;if(lastParam.indexOf("?")>0){var baseValue=lastParam.split("?")[0];cleanUriArray[cleanUriArray.length-1]=baseValue;cleanUri=cleanUriArray.join(BsGlobal.pathSeparator)}uri=uriArray.join(BsGlobal.pathSeparator);var file=filesMap[uri]||filesMap["index.html"];if(file&&file.isFile){file.file(function(e){write200Response(clientSocket,e,keepAlive)})}else{rootDirectory.getFile(uri,{create:false},function(file){file.file(function(fileReader){write200Response(clientSocket,fileReader,keepAlive)})},function(){if(cleanUri){rootDirectory.getFile(cleanUri,{create:false},function(file){file.file(function(fileReader){write200Response(clientSocket,fileReader,keepAlive)})},function(){writeErrorResponse(clientSocket,404,keepAlive)});return}rootDirectory.getDirectory(uri,{create:false},function(dir){dir.getFile("index.html",{create:false},function(indexFile){indexFile.file(function(fileReader){write200Response(clientSocket,fileReader,keepAlive)})},function(){getDirectoryListingHtml(dir,function(html){serveDirectoryListing(clientSocket,html,keepAlive)})})},function(){writeErrorResponse(clientSocket,404,keepAlive)})})}}else{writeErrorResponse(clientSocket,400,keepAlive)}})};var buildFilelisting=function(dir){var dirReader=dir.createReader();filesMap={};dirReader.readEntries(function(entries){for(var i=0,entry;entry=entries[i];++i){filesMap[entry.name]=true}})};var getDirectoryListingHtml=function(currentDirectory,callback){var dirReader=currentDirectory.createReader();var html='<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8" /></head><body>';var segments=BsFileSystem.getSegments(currentDirectory,rootDirectory);var path=segments.join("/");if(path){path="/"+path}dirReader.readEntries(function(entries){html+="<ul>";var entry;var len=entries.length;for(var i=0;i<len;++i){entry=entries[i];if(entry){var href=path+"/"+entry.name+(entry.isDirectory?"/":"");html+="<li><span><a href='"+href+"'>"+entry.name+(entry.isDirectory?"/":"")+"</a></span></li>"}}html+="</ul></body></html>";callback(html)})};this.start=function(directoryEntry,callback){rootDirectory=directoryEntry;buildFilelisting(rootDirectory);serverSocket=new ServerSocket;serverSocket.init(serverPort,50,function(started){if(started){serverSocket.listen(function(clientSocket){lastSocket=clientSocket;readFromSocket(clientSocket)});callback()}})};this.stop=function(){if(serverSocket){serverSocket.close()}};this.findNextOpenPort=function(port,callback){BsFileSystem.findNextOpenPort(this,port,callback)};this.setServerPort=function(port){serverPort=port}};var ConnectionSocket=function(options){var mySocketId=options.socketId;var myHost=options.host;var myPort=options.port;var alive=options.socketId!==undefined;var socketSummary={};socketSummary.error="";var isClosed=false;var upstreamSize=0;var downstreamSize=0;var creationTime;var connectTime=-1,remoteAddress="";var buildSocketSummary=function(){socketSummary.refId=this.ref;socketSummary.host=options.host;socketSummary.port=options.port;socketSummary.createdAt=creationTime;socketSummary.aliveTime=(new Date).getTime()-creationTime;socketSummary.connectTime=connectTime;socketSummary.remoteAddress=remoteAddress;socketSummary.bandwidth={upstream:upstreamSize,downstream:downstreamSize};socketSummary.isPublic=false};this.connect=function(callback){creationTime=(new Date).getTime();if(myHost&&myPort){chrome.socket.create("tcp",{},function(result){connectTime=(new Date).getTime()-creationTime;mySocketId=result.socketId;chrome.socket.connect(mySocketId,myHost,myPort,function(resultCode){alive=resultCode>=0;if(callback){callback(alive)}})})}};this.endConnection=function(){var repeaterConnection=this.repeaterConnection;if(repeaterConnection.isConnected()){repeaterConnection.repeaterConnection.write(this.ref,BsGlobal.CODE_END)}this.close()};this.close=function(hadCodeClose){if(isClosed){return}else{isClosed=true}buildSocketSummary();if(hadCodeClose&&hadCodeClose===BsGlobal.CODE_CLOSE){socketSummary.error={};socketSummary.error.code=BsGlobal.SOCKET_ERROR.CODE_CLOSE;socketSummary.connectionStatus="success"}else if(socketSummary.error===""||socketSummary.error===BsGlobal.SOCKET_ERROR.INACTIVITY||socketSummary.error===BsGlobal.SOCKET_ERROR.SERVER_CLOSED_SOCKET){socketSummary.connectionStatus="success";var errorTemp=socketSummary.error;socketSummary.error={};socketSummary.error.code=errorTemp}else{socketSummary.connectionStatus="error"}if(this.repeaterConnection&&this.repeaterConnection.repeaterConnection){this.repeaterConnection.repeaterConnection.write(this.ref,BsGlobal.CODE_SOCKET_SUMMARY,JSON.stringify(socketSummary))}if(alive){alive=false;chrome.socket.disconnect(mySocketId)}chrome.socket.destroy(mySocketId)};this.readBinary=function(dataCallback,endCallback){chrome.socket.read(mySocketId,null,function mySocketReader(readInfo){if(readInfo&&readInfo.resultCode>0){dataCallback(readInfo.data);downstreamSize+=readInfo.data.length;chrome.socket.read(mySocketId,null,mySocketReader)}else{if(endCallback){endCallback()}}})};this.writeBinary=function(data){upstreamSize+=data.length;chrome.socket.write(mySocketId,data,function(){})};this.read=function(dataCallback,endCallback){chrome.socket.read(mySocketId,null,function mySocketReader(readInfo){if(readInfo&&readInfo.resultCode>0){var dataArray=new Uint8Array(readInfo.data);downstreamSize+=dataArray.length;dataCallback(dataArray);chrome.socket.read(mySocketId,null,mySocketReader)}else{if(endCallback){endCallback()}}})};this.write=function(byteArray,callback){upstreamSize+=byteArray.length;chrome.socket.write(mySocketId,byteArray.buffer,callback)};this.getAddrInfo=function(callback){chrome.socket.getInfo(mySocketId,function(socketInfo){if(socketInfo&&socketInfo.peerAddress){remoteAddress=socketInfo.peerAddress;callback(socketInfo.peerAddress)}else{remoteAddress="127.0.0.1";callback("127.0.0.1")}})}};var ServerSocket=function(){var mySocketId=0;var onAcceptCallback=null;this.init=function(serverPort,backlog,callback){chrome.socket.create("tcp",{},function(socketInfo){mySocketId=socketInfo.socketId;console.log("socketId = "+mySocketId);console.log("serverPort = "+serverPort);console.log("backlog = "+backlog);chrome.socket.listen(mySocketId,"127.0.0.1",serverPort,backlog,function(result){callback(result===0)})})};var myAccept=function(acceptInfo){chrome.socket.accept(mySocketId,myAccept);if(acceptInfo.resultCode===0){var clientSocket=new ConnectionSocket({socketId:acceptInfo.socketId});onAcceptCallback(clientSocket)}};this.listen=function(callback){onAcceptCallback=callback;chrome.socket.accept(mySocketId,myAccept)};this.close=function(){chrome.socket.destroy(mySocketId)}};var BsFileSystem={openDirectory:function(callback){if(!BsGlobal.state.chooserWindowOpen){chrome.app.window.create("filepopup.html",{bounds:{width:1,height:1},frame:"none",hidden:true},function(createdWindow){BsGlobal.state.chooserWindowOpen=true;createdWindow.onClosed=function(){BsGlobal.state.chooserWindowOpen=false;console.log("closed 2");chrome.storage.local.get("chosenFile",function(e){if(e&&e.chosenFile){chrome.fileSystem.restoreEntry(e.chosenFile,function(docRoot){console.log(docRoot);callback(docRoot.fullPath)})}else{callback(null)}})}})}},getDirectoryEntry:function(callback){chrome.storage.local.get("chosenFile",function(e){if(e&&e.chosenFile){chrome.fileSystem.restoreEntry(e.chosenFile,function(docRoot){callback(docRoot)})}})},getFileReader:function(file,callback){var fileReader=new FileReader;fileReader.onload=function(e){callback(new Uint8Array(e.target.result))};fileReader.readAsArrayBuffer(file)},findNextOpenPort:function(obj,port,callback){var that=obj;if(port>46e3){port=45693}chrome.socket.create("tcp",{},function(r){chrome.socket.connect(r.socketId,"127.0.0.1",parseInt(port,0),function(e){if(e>=0){that.findNextOpenPort(port+1,callback)}else{callback(port)}})})},getSegments:function(currentDirectory,rootDirectory){var segments=currentDirectory.fullPath.split(BsGlobal.pathSeparator);segments.shift();segments.shift();return segments}};var BsTunnelMain={init:function(){BsGlobal.browserName="chrome";BsGlobal.appVersion=chrome.runtime.getManifest().version;BsGlobal.osName=BsUtils.getOsName(window.navigator.platform);try{BsGlobal.browserVersion=window.navigator.userAgent.match("Chrome/(.*) ")[1]}catch(err){BsGlobal.browserVersion="Chrome"}BsGlobal.nativeWindow=window;var oldErrorHandler=window.onerror;window.onerror=function(error,url,line){var message={error:error,url:url,line:line};BsUtils.postLogsToZombie(message,"analytics_log","chromeTunnel-exception",true);if(oldErrorHandler){return oldErrorHandler(error,url,line)}return false};chrome.runtime.onMessageExternal.addListener(function(request,sender,sendResponse){BsTunnelMessenger.processRequest(request,sendResponse);return true});chrome.app.runtime.onLaunched.addListener(function(){window.open("http://www.browserstack.com")})}};BsTunnelMain.init();var turnTunnel=function(){var serverSocket,ws,conns,id,buff,timeoutJob,dataTS=Date.now();var live_session_id,user_id,log_server_url;var tunnel={start:function(options,sendResponse){if(!options)return;options.timeout=options.timeout?options.timeout:3e4;live_session_id=options.live_session_id;user_id=options.user_id;log_server_url=options.log_server_url;var self=this;this.stop();conns={},id=0,buff=[];self.logToCLS("turnTunnel_start",options);if(options.wsPath&&options.wsPath!=""){ws=new BsGlobal.nativeWindow.WebSocket(options.wsPath);ws.onerror=function(e){self.logToCLS("turnTunnel_ws_error",e)};ws.onclose=function(){setTimeout(function(){self.start(options)},500);self.logToCLS("turnTunnel_ws_close",options)};ws.binaryType="arraybuffer";ws.onopen=function(){while(buff.length>0){var buf=buff.shift();ws.send(buf[0]);ws.send(buf[1])}self.logToCLS("turnTunnel_ws_open",options)};var conn_id=id.toString();ws.onmessage=function(message){if(typeof message.data=="string")conn_id=message.data;else if(conns&&conns[conn_id]){conns[conn_id].writeBinary(message.data)}};var once=true,startTime=Date.now();timeoutJob=BsUtils.setInterval(function(){if(Date.now()-dataTS>options.timeout){self.stop();self.logToCLS("turnTunnel_tiemout",options)}else if(once&&Date.now()-startTime>options.timeout+1e4){once=false;self.logToCLS("turnTunnel_used",options)}},5e3)}if(!serverSocket){serverSocket=new ServerSocket;serverSocket.init(options.port,50,function(started){if(started){serverSocket.listen(function(clientSocket){id++;var c_id=id.toString();conns[c_id]=clientSocket;clientSocket.readBinary(function(data){if(ws&&ws.readyState==1){ws.send(c_id);ws.send(data)}else{buff.push([c_id,data])}dataTS=Date.now()})});self.logToCLS("turnTunnel_tcp_server_bound",options)}else{self.logToCLS("turnTunnel_tcp_server_failed",options);self.stop(true)}if(sendResponse){sendResponse(options.port,started);sendResponse=null}})}},stop:function(stopServer){this.logToCLS("turnTunnel_stop",{});for(var c_id in conns){try{conns[c_id].close();delete conns[c_id]}catch(e){}}if(serverSocket&&stopServer){serverSocket.close();serverSocket=null}if(timeoutJob)BsUtils.clearInterval(timeoutJob);if(ws){ws.onclose=function(){};ws.close();ws=null}},logToCLS:function(kind,params,error){var zombie_data={message:kind,error:error,json_data:params,app:"turnTunnel",product:"Live",live_session_id:live_session_id,user_id:user_id,app_timestamp:(new Date).toISOString()};try{var xmlhttp=new XMLHttpRequest;xmlhttp.open("POST",log_server_url);xmlhttp.setRequestHeader("Content-Type","application/json;charset=UTF-8");xmlhttp.addEventListener("error",function(e){console.log("turntunnel xhr error",e)},false);xmlhttp.send(JSON.stringify(zombie_data))}catch(e){console.log("Error in pushing logs",e)}}};return tunnel}();var clipboard={set:function(text){document.oncopy=function(e){e.clipboardData.setData("Text",text);e.preventDefault()};document.execCommand("Copy",false,null)},get:function(callback){var data={};document.onpaste=function(e){data=e.clipboardData.getData("Text");e.preventDefault();callback(data)};document.execCommand("Paste",false,null)}};